
Osciladores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800916c  0800916c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a04  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a94  20000a94  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000137d3  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000326c  00000000  00000000  000338d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec0  00000000  00000000  00036b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b30  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000231b1  00000000  00000000  00038538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000139de  00000000  00000000  0005b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca39f  00000000  00000000  0006f0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004204  00000000  00000000  00139468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013d66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009074 	.word	0x08009074

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009074 	.word	0x08009074

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <enviar_dato>:
    *z3_result = z3_temp;
    *z4_result = z4_temp;
}


void enviar_dato(uint8_t* dato, uint8_t size ){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart2, dato, size, HAL_MAX_DELAY);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <enviar_dato+0x24>)
 80004dc:	f004 f8f7 	bl	80046ce <HAL_UART_Transmit>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000104 	.word	0x20000104

080004ec <syncwrite_mover_servos>:

void syncwrite_mover_servos(uint8_t *ids, uint16_t *posiciones, uint8_t cantidad){
 80004ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004f0:	b08d      	sub	sp, #52	; 0x34
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	466b      	mov	r3, sp
 80004fe:	461e      	mov	r6, r3
	const uint8_t INSTRUCCION = 0x83; //FUNCION SYNWRITE EN HEZADECIMAL UWU
 8000500:	2383      	movs	r3, #131	; 0x83
 8000502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	const uint8_t ID_BROADCAST = 0xFE;
 8000506:	23fe      	movs	r3, #254	; 0xfe
 8000508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	const uint8_t START_ADDR = 0x1E;
 800050c:	231e      	movs	r3, #30
 800050e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	const uint8_t BYTES_POR_SERVO = 3; //es el id + 2 bytes de posicion
 8000512:	2303      	movs	r3, #3
 8000514:	f887 3020 	strb.w	r3, [r7, #32]
	// algo como 4 headers + N *3(id + 2 bytes) + 1 byte de cheksum

	uint8_t longitud = 4+ cantidad*BYTES_POR_SERVO;
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800051e:	fb12 f303 	smulbb	r3, r2, r3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	3304      	adds	r3, #4
 8000526:	77fb      	strb	r3, [r7, #31]
	uint8_t paquete[6 + cantidad * BYTES_POR_SERVO];
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	1d99      	adds	r1, r3, #6
 8000534:	1e4b      	subs	r3, r1, #1
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	460a      	mov	r2, r1
 800053a:	2300      	movs	r3, #0
 800053c:	4690      	mov	r8, r2
 800053e:	4699      	mov	r9, r3
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800054c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000550:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000554:	460a      	mov	r2, r1
 8000556:	2300      	movs	r3, #0
 8000558:	4614      	mov	r4, r2
 800055a:	461d      	mov	r5, r3
 800055c:	f04f 0200 	mov.w	r2, #0
 8000560:	f04f 0300 	mov.w	r3, #0
 8000564:	00eb      	lsls	r3, r5, #3
 8000566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800056a:	00e2      	lsls	r2, r4, #3
 800056c:	460b      	mov	r3, r1
 800056e:	3307      	adds	r3, #7
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	ebad 0d03 	sub.w	sp, sp, r3
 8000578:	466b      	mov	r3, sp
 800057a:	3300      	adds	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

	int i = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
	    paquete[i++] = 0xFF;
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	21ff      	movs	r1, #255	; 0xff
 800058c:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 0xFF;
 800058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	21ff      	movs	r1, #255	; 0xff
 8000598:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = ID_BROADCAST;
 800059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80005a6:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = longitud;
 80005a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	7ff9      	ldrb	r1, [r7, #31]
 80005b2:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = INSTRUCCION;
 80005b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005ba:	697a      	ldr	r2, [r7, #20]
 80005bc:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80005c0:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = START_ADDR;
 80005c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80005ce:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 2; // 2 bytes por dato (posición)
 80005d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	2102      	movs	r1, #2
 80005da:	54d1      	strb	r1, [r2, r3]

	    for (uint8_t j = 0; j < cantidad; j++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80005e2:	e025      	b.n	8000630 <syncwrite_mover_servos+0x144>
	            uint16_t pos = posiciones[j];
 80005e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	4413      	add	r3, r2
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	827b      	strh	r3, [r7, #18]
	            paquete[i++] = ids[j];         // ID del servo
 80005f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	441a      	add	r2, r3
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	1c59      	adds	r1, r3, #1
 80005fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000600:	7811      	ldrb	r1, [r2, #0]
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = pos & 0xFF;     // LSB
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800060c:	8a7a      	ldrh	r2, [r7, #18]
 800060e:	b2d1      	uxtb	r1, r2
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = (pos >> 8) & 0xFF; // MSB
 8000614:	8a7b      	ldrh	r3, [r7, #18]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b299      	uxth	r1, r3
 800061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000620:	b2c9      	uxtb	r1, r1
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	54d1      	strb	r1, [r2, r3]
	    for (uint8_t j = 0; j < cantidad; j++) {
 8000626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800062a:	3301      	adds	r3, #1
 800062c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000630:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3d4      	bcc.n	80005e4 <syncwrite_mover_servos+0xf8>
	        }
	    //cheksum

	    uint8_t checksum = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000640:	2302      	movs	r3, #2
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
 8000644:	e00b      	b.n	800065e <syncwrite_mover_servos+0x172>
	           checksum += paquete[j];
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	4413      	add	r3, r2
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000652:	4413      	add	r3, r2
 8000654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	3301      	adds	r3, #1
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
 800065e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	429a      	cmp	r2, r3
 8000664:	dbef      	blt.n	8000646 <syncwrite_mover_servos+0x15a>
	       }
	       checksum = ~checksum;
 8000666:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800066a:	43db      	mvns	r3, r3
 800066c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       paquete[i++] = checksum;
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800067c:	54d1      	strb	r1, [r2, r3]

	       // Enviar por UART
	       enviar_dato(paquete, i);
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	6978      	ldr	r0, [r7, #20]
 8000686:	f7ff ff1d 	bl	80004c4 <enviar_dato>
 800068a:	46b5      	mov	sp, r6
}
 800068c:	bf00      	nop
 800068e:	3734      	adds	r7, #52	; 0x34
 8000690:	46bd      	mov	sp, r7
 8000692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000698 <grados_a_posicion>:

uint16_t grados_a_posicion(float grados) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (grados < 0.0f) grados = 0.0f;
 80006a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ae:	d502      	bpl.n	80006b6 <grados_a_posicion+0x1e>
 80006b0:	f04f 0300 	mov.w	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
    if (grados > 300.0f) grados = 300.0f;
 80006b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80006f0 <grados_a_posicion+0x58>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd01      	ble.n	80006cc <grados_a_posicion+0x34>
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <grados_a_posicion+0x5c>)
 80006ca:	607b      	str	r3, [r7, #4]
    return (uint16_t)(grados * (1023.0f / 300.0f));
 80006cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80006f8 <grados_a_posicion+0x60>
 80006d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006dc:	ee17 3a90 	vmov	r3, s15
 80006e0:	b29b      	uxth	r3, r3
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	43960000 	.word	0x43960000
 80006f4:	43960000 	.word	0x43960000
 80006f8:	405a3d71 	.word	0x405a3d71

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	ed2d 8b02 	vpush	{d8}
 8000702:	b098      	sub	sp, #96	; 0x60
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fdf1 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 fa91 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 fb59 	bl	8000dc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000712:	f000 faf7 	bl	8000d04 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000716:	f007 fd93 	bl	8008240 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800071a:	f000 fb29 	bl	8000d70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t id[] = {0, 1, 2,3,4,5,6,7,8,9,10,11};
 800071e:	4a41      	ldr	r2, [pc, #260]	; (8000824 <main+0x128>)
 8000720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000724:	ca07      	ldmia	r2, {r0, r1, r2}
 8000726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint16_t posicion[] = {512, 512, 410,512, 512, 410,512, 512, 410,512, 512, 410};
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <main+0x12c>)
 800072c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000730:	461d      	mov	r5, r3
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0003 	ldmia.w	r5, {r0, r1}
 800073a:	e884 0003 	stmia.w	r4, {r0, r1}


  syncwrite_mover_servos(id, posicion, 12);
 800073e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000742:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000746:	220c      	movs	r2, #12
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fecf 	bl	80004ec <syncwrite_mover_servos>

  HAL_Delay(3000);
 800074e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000752:	f000 fe3d 	bl	80013d0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000756:	f007 fd99 	bl	800828c <MX_USB_HOST_Process>

    theta = atan2f(y, x);
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <main+0x130>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <main+0x134>)
 8000762:	ed93 7a00 	vldr	s14, [r3]
 8000766:	eef0 0a47 	vmov.f32	s1, s14
 800076a:	eeb0 0a67 	vmov.f32	s0, s15
 800076e:	f008 f9af 	bl	8008ad0 <atan2f>
 8000772:	eef0 7a40 	vmov.f32	s15, s0
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x138>)
 8000778:	edc3 7a00 	vstr	s15, [r3]
        if (theta < 0.0f) { //Calculo de tyheta
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <main+0x138>)
 800077e:	edd3 7a00 	vldr	s15, [r3]
 8000782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d509      	bpl.n	80007a0 <main+0xa4>
            theta += 2.0f * PI;
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <main+0x138>)
 800078e:	edd3 7a00 	vldr	s15, [r3]
 8000792:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000838 <main+0x13c>
 8000796:	ee77 7a87 	vadd.f32	s15, s15, s14
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0x138>)
 800079c:	edc3 7a00 	vstr	s15, [r3]
    }


    // CÁLCULO DE ATRACTORES PARA OSCILADOR 3
    atractores3 = 0.0f;
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <main+0x140>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N3; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007ac:	e02f      	b.n	800080e <main+0x112>
    	atractores3 += a3[i] * expf(-b3[i] * fabsf(theta - deltaTheta3[i]));
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <main+0x144>)
 80007b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	ed93 8a00 	vldr	s16, [r3]
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <main+0x148>)
 80007bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eeb1 7a67 	vneg.f32	s14, s15
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <main+0x138>)
 80007cc:	edd3 6a00 	vldr	s13, [r3]
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <main+0x14c>)
 80007d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007e0:	eef0 7ae7 	vabs.f32	s15, s15
 80007e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	f008 f972 	bl	8008ad4 <expf>
 80007f0:	eef0 7a40 	vmov.f32	s15, s0
 80007f4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <main+0x140>)
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <main+0x140>)
 8000804:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < N3; i++) {
 8000808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800080a:	3301      	adds	r3, #1
 800080c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800080e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000810:	2b01      	cmp	r3, #1
 8000812:	ddcc      	ble.n	80007ae <main+0xb2>
    }

    // CÁLCULO DE ATRACTORES PARA OSCILADOR 4
    atractores4 = 0.0f;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <main+0x150>)
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N4; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000820:	e046      	b.n	80008b0 <main+0x1b4>
 8000822:	bf00      	nop
 8000824:	0800908c 	.word	0x0800908c
 8000828:	08009098 	.word	0x08009098
 800082c:	20000154 	.word	0x20000154
 8000830:	20000000 	.word	0x20000000
 8000834:	20000150 	.word	0x20000150
 8000838:	40c90fdb 	.word	0x40c90fdb
 800083c:	20000170 	.word	0x20000170
 8000840:	080090b4 	.word	0x080090b4
 8000844:	080090bc 	.word	0x080090bc
 8000848:	080090c4 	.word	0x080090c4
 800084c:	20000174 	.word	0x20000174
    	atractores4 += a4[i] * expf(-b4[i] * fabsf(theta - deltaTheta4[i]));
 8000850:	4acd      	ldr	r2, [pc, #820]	; (8000b88 <main+0x48c>)
 8000852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	ed93 8a00 	vldr	s16, [r3]
 800085c:	4acb      	ldr	r2, [pc, #812]	; (8000b8c <main+0x490>)
 800085e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	eeb1 7a67 	vneg.f32	s14, s15
 800086c:	4bc8      	ldr	r3, [pc, #800]	; (8000b90 <main+0x494>)
 800086e:	edd3 6a00 	vldr	s13, [r3]
 8000872:	4ac8      	ldr	r2, [pc, #800]	; (8000b94 <main+0x498>)
 8000874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000882:	eef0 7ae7 	vabs.f32	s15, s15
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	f008 f921 	bl	8008ad4 <expf>
 8000892:	eef0 7a40 	vmov.f32	s15, s0
 8000896:	ee28 7a27 	vmul.f32	s14, s16, s15
 800089a:	4bbf      	ldr	r3, [pc, #764]	; (8000b98 <main+0x49c>)
 800089c:	edd3 7a00 	vldr	s15, [r3]
 80008a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a4:	4bbc      	ldr	r3, [pc, #752]	; (8000b98 <main+0x49c>)
 80008a6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < N4; i++) {
 80008aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008ac:	3301      	adds	r3, #1
 80008ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80008b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	ddcc      	ble.n	8000850 <main+0x154>
    }

    // DINÁMICA DE OSCILADORES (MÉTODO DE EULER)

    // Cálculo de alpha
    alpha = 1.0f - sqrtf(x * x + y * y);
 80008b6:	4bb9      	ldr	r3, [pc, #740]	; (8000b9c <main+0x4a0>)
 80008b8:	ed93 7a00 	vldr	s14, [r3]
 80008bc:	4bb7      	ldr	r3, [pc, #732]	; (8000b9c <main+0x4a0>)
 80008be:	edd3 7a00 	vldr	s15, [r3]
 80008c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c6:	4bb6      	ldr	r3, [pc, #728]	; (8000ba0 <main+0x4a4>)
 80008c8:	edd3 6a00 	vldr	s13, [r3]
 80008cc:	4bb4      	ldr	r3, [pc, #720]	; (8000ba0 <main+0x4a4>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	f008 f92f 	bl	8008b40 <sqrtf>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ee:	4bad      	ldr	r3, [pc, #692]	; (8000ba4 <main+0x4a8>)
 80008f0:	edc3 7a00 	vstr	s15, [r3]

    // Oscilador base (x, y)
    x_new = x + dt * (alpha * x - omega * y);
 80008f4:	4bab      	ldr	r3, [pc, #684]	; (8000ba4 <main+0x4a8>)
 80008f6:	ed93 7a00 	vldr	s14, [r3]
 80008fa:	4ba8      	ldr	r3, [pc, #672]	; (8000b9c <main+0x4a0>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000904:	4ba8      	ldr	r3, [pc, #672]	; (8000ba8 <main+0x4ac>)
 8000906:	edd3 6a00 	vldr	s13, [r3]
 800090a:	4ba5      	ldr	r3, [pc, #660]	; (8000ba0 <main+0x4a4>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000918:	4ba4      	ldr	r3, [pc, #656]	; (8000bac <main+0x4b0>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000922:	4b9e      	ldr	r3, [pc, #632]	; (8000b9c <main+0x4a0>)
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092c:	4ba0      	ldr	r3, [pc, #640]	; (8000bb0 <main+0x4b4>)
 800092e:	edc3 7a00 	vstr	s15, [r3]
    y_new = y + dt * (alpha * y + omega * x);
 8000932:	4b9c      	ldr	r3, [pc, #624]	; (8000ba4 <main+0x4a8>)
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	4b99      	ldr	r3, [pc, #612]	; (8000ba0 <main+0x4a4>)
 800093a:	edd3 7a00 	vldr	s15, [r3]
 800093e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000942:	4b99      	ldr	r3, [pc, #612]	; (8000ba8 <main+0x4ac>)
 8000944:	edd3 6a00 	vldr	s13, [r3]
 8000948:	4b94      	ldr	r3, [pc, #592]	; (8000b9c <main+0x4a0>)
 800094a:	edd3 7a00 	vldr	s15, [r3]
 800094e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000956:	4b95      	ldr	r3, [pc, #596]	; (8000bac <main+0x4b0>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000960:	4b8f      	ldr	r3, [pc, #572]	; (8000ba0 <main+0x4a4>)
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096a:	4b92      	ldr	r3, [pc, #584]	; (8000bb4 <main+0x4b8>)
 800096c:	edc3 7a00 	vstr	s15, [r3]

    // Oscilador 3
    float primerTermino3 = -beta3 * (z3 - z0_3);
 8000970:	eddf 7a91 	vldr	s15, [pc, #580]	; 8000bb8 <main+0x4bc>
 8000974:	eeb1 7a67 	vneg.f32	s14, s15
 8000978:	4b90      	ldr	r3, [pc, #576]	; (8000bbc <main+0x4c0>)
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float dzdt3 = -primerTermino3 + atractores3;
 800098e:	4b8c      	ldr	r3, [pc, #560]	; (8000bc0 <main+0x4c4>)
 8000990:	ed93 7a00 	vldr	s14, [r3]
 8000994:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    z3_new = z3 + dzdt3 * dt;
 80009a0:	4b82      	ldr	r3, [pc, #520]	; (8000bac <main+0x4b0>)
 80009a2:	ed93 7a00 	vldr	s14, [r3]
 80009a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80009aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ae:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <main+0x4c0>)
 80009b0:	edd3 7a00 	vldr	s15, [r3]
 80009b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b8:	4b82      	ldr	r3, [pc, #520]	; (8000bc4 <main+0x4c8>)
 80009ba:	edc3 7a00 	vstr	s15, [r3]

    // Oscilador 4
    float primerTermino4 = -beta4 * (z4 - z0_4);
 80009be:	eddf 7a82 	vldr	s15, [pc, #520]	; 8000bc8 <main+0x4cc>
 80009c2:	eeb1 7a67 	vneg.f32	s14, s15
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <main+0x4d0>)
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	eddf 6a80 	vldr	s13, [pc, #512]	; 8000bd0 <main+0x4d4>
 80009d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80009d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    float dzdt4 = -primerTermino4 + atractores4;
 80009dc:	4b6e      	ldr	r3, [pc, #440]	; (8000b98 <main+0x49c>)
 80009de:	ed93 7a00 	vldr	s14, [r3]
 80009e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80009e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    z4_new = z4 + dzdt4 * dt;
 80009ee:	4b6f      	ldr	r3, [pc, #444]	; (8000bac <main+0x4b0>)
 80009f0:	ed93 7a00 	vldr	s14, [r3]
 80009f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80009f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009fc:	4b73      	ldr	r3, [pc, #460]	; (8000bcc <main+0x4d0>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a06:	4b73      	ldr	r3, [pc, #460]	; (8000bd4 <main+0x4d8>)
 8000a08:	edc3 7a00 	vstr	s15, [r3]

        // ACTUALIZAR ESTADO
    x = x_new;
 8000a0c:	4b68      	ldr	r3, [pc, #416]	; (8000bb0 <main+0x4b4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a62      	ldr	r2, [pc, #392]	; (8000b9c <main+0x4a0>)
 8000a12:	6013      	str	r3, [r2, #0]
    y = y_new;
 8000a14:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <main+0x4b8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a61      	ldr	r2, [pc, #388]	; (8000ba0 <main+0x4a4>)
 8000a1a:	6013      	str	r3, [r2, #0]
    z3 = z3_new;
 8000a1c:	4b69      	ldr	r3, [pc, #420]	; (8000bc4 <main+0x4c8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a66      	ldr	r2, [pc, #408]	; (8000bbc <main+0x4c0>)
 8000a22:	6013      	str	r3, [r2, #0]
    z4 = z4_new;
 8000a24:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <main+0x4d8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a68      	ldr	r2, [pc, #416]	; (8000bcc <main+0x4d0>)
 8000a2a:	6013      	str	r3, [r2, #0]

    z3_grados = (z3 * 14 + 152);
 8000a2c:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <main+0x4c0>)
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
 8000a32:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000bd8 <main+0x4dc>
 8000a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <main+0x4e0>)
 8000a44:	edc3 7a00 	vstr	s15, [r3]
    z4_grados = z4 * 38  + 98;
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <main+0x4d0>)
 8000a4a:	edd3 7a00 	vldr	s15, [r3]
 8000a4e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000be0 <main+0x4e4>
 8000a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a56:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000be4 <main+0x4e8>
 8000a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a5e:	4b62      	ldr	r3, [pc, #392]	; (8000be8 <main+0x4ec>)
 8000a60:	edc3 7a00 	vstr	s15, [r3]
    z4_grados_i = 180-(z4 * 38  + 98);
 8000a64:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <main+0x4d0>)
 8000a66:	edd3 7a00 	vldr	s15, [r3]
 8000a6a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000be0 <main+0x4e4>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000be4 <main+0x4e8>
 8000a76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a7a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000bec <main+0x4f0>
 8000a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a82:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <main+0x4f4>)
 8000a84:	edc3 7a00 	vstr	s15, [r3]

    z3_posicion = grados_a_posicion(z3_grados);
 8000a88:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <main+0x4e0>)
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a92:	f7ff fe01 	bl	8000698 <grados_a_posicion>
 8000a96:	4603      	mov	r3, r0
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa0:	4b54      	ldr	r3, [pc, #336]	; (8000bf4 <main+0x4f8>)
 8000aa2:	edc3 7a00 	vstr	s15, [r3]
    z4_posicion = grados_a_posicion(z4_grados);
 8000aa6:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <main+0x4ec>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	f7ff fdf2 	bl	8000698 <grados_a_posicion>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000abe:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <main+0x4fc>)
 8000ac0:	edc3 7a00 	vstr	s15, [r3]
    z4_posicion_i = grados_a_posicion(z4_grados_i);
 8000ac4:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <main+0x4f4>)
 8000ac6:	edd3 7a00 	vldr	s15, [r3]
 8000aca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ace:	f7ff fde3 	bl	8000698 <grados_a_posicion>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <main+0x500>)
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    //PATA delantera IZQUIERDA

    uint8_t ids[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <main+0x504>)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t posiciones[] = {512, z3_posicion, z4_posicion,512, z3_posicion, z4_posicion,512, z3_posicion, z4_posicion_i,512, z3_posicion, z4_posicion_i};
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	803b      	strh	r3, [r7, #0]
 8000af4:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <main+0x4f8>)
 8000af6:	edd3 7a00 	vldr	s15, [r3]
 8000afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afe:	ee17 3a90 	vmov	r3, s15
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4b3c      	ldr	r3, [pc, #240]	; (8000bf8 <main+0x4fc>)
 8000b08:	edd3 7a00 	vldr	s15, [r3]
 8000b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b10:	ee17 3a90 	vmov	r3, s15
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	80bb      	strh	r3, [r7, #4]
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <main+0x4f8>)
 8000b20:	edd3 7a00 	vldr	s15, [r3]
 8000b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b28:	ee17 3a90 	vmov	r3, s15
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	813b      	strh	r3, [r7, #8]
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <main+0x4fc>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b3a:	ee17 3a90 	vmov	r3, s15
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	817b      	strh	r3, [r7, #10]
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	81bb      	strh	r3, [r7, #12]
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <main+0x4f8>)
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b52:	ee17 3a90 	vmov	r3, s15
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <main+0x500>)
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b64:	ee17 3a90 	vmov	r3, s15
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	823b      	strh	r3, [r7, #16]
 8000b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b70:	827b      	strh	r3, [r7, #18]
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <main+0x4f8>)
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b7c:	ee17 3a90 	vmov	r3, s15
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	82bb      	strh	r3, [r7, #20]
 8000b84:	e03e      	b.n	8000c04 <main+0x508>
 8000b86:	bf00      	nop
 8000b88:	080090cc 	.word	0x080090cc
 8000b8c:	080090dc 	.word	0x080090dc
 8000b90:	20000150 	.word	0x20000150
 8000b94:	080090ec 	.word	0x080090ec
 8000b98:	20000174 	.word	0x20000174
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000154 	.word	0x20000154
 8000ba4:	2000014c 	.word	0x2000014c
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000178 	.word	0x20000178
 8000bb4:	2000017c 	.word	0x2000017c
 8000bb8:	c285f190 	.word	0xc285f190
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	20000170 	.word	0x20000170
 8000bc4:	20000180 	.word	0x20000180
 8000bc8:	c0594af5 	.word	0xc0594af5
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	3edc28f6 	.word	0x3edc28f6
 8000bd4:	20000184 	.word	0x20000184
 8000bd8:	43180000 	.word	0x43180000
 8000bdc:	20000158 	.word	0x20000158
 8000be0:	42180000 	.word	0x42180000
 8000be4:	42c40000 	.word	0x42c40000
 8000be8:	2000015c 	.word	0x2000015c
 8000bec:	43340000 	.word	0x43340000
 8000bf0:	20000160 	.word	0x20000160
 8000bf4:	20000164 	.word	0x20000164
 8000bf8:	20000168 	.word	0x20000168
 8000bfc:	2000016c 	.word	0x2000016c
 8000c00:	0800908c 	.word	0x0800908c
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <main+0x530>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0e:	ee17 3a90 	vmov	r3, s15
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	82fb      	strh	r3, [r7, #22]


    syncwrite_mover_servos(ids, posiciones, 12);
 8000c16:	4639      	mov	r1, r7
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc64 	bl	80004ec <syncwrite_mover_servos>

    HAL_Delay(0.001);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fbd3 	bl	80013d0 <HAL_Delay>
  {
 8000c2a:	e594      	b.n	8000756 <main+0x5a>
 8000c2c:	2000016c 	.word	0x2000016c

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 feb6 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <SystemClock_Config+0xcc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <SystemClock_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ca4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 ff90 	bl	8003bdc <HAL_RCC_OscConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cc2:	f000 f9af 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 f9f1 	bl	80040cc <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cf0:	f000 f998 	bl	8001024 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	; 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <MX_SPI1_Init+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d56:	f003 fbd9 	bl	800450c <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d60:	f000 f960 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000ac 	.word	0x200000ac
 8000d6c:	40013000 	.word	0x40013000

08000d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <MX_USART2_UART_Init+0x50>)
 8000d7e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d94:	220c      	movs	r2, #12
 8000d96:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USART2_UART_Init+0x48>)
 8000da6:	f003 fc3a 	bl	800461e <HAL_HalfDuplex_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000db0:	f000 f938 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000104 	.word	0x20000104
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	000f4240 	.word	0x000f4240

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b8b      	ldr	r3, [pc, #556]	; (800100c <MX_GPIO_Init+0x248>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a8a      	ldr	r2, [pc, #552]	; (800100c <MX_GPIO_Init+0x248>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b88      	ldr	r3, [pc, #544]	; (800100c <MX_GPIO_Init+0x248>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b84      	ldr	r3, [pc, #528]	; (800100c <MX_GPIO_Init+0x248>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a83      	ldr	r2, [pc, #524]	; (800100c <MX_GPIO_Init+0x248>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b81      	ldr	r3, [pc, #516]	; (800100c <MX_GPIO_Init+0x248>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b7d      	ldr	r3, [pc, #500]	; (800100c <MX_GPIO_Init+0x248>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a7c      	ldr	r2, [pc, #496]	; (800100c <MX_GPIO_Init+0x248>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b7a      	ldr	r3, [pc, #488]	; (800100c <MX_GPIO_Init+0x248>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <MX_GPIO_Init+0x248>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a75      	ldr	r2, [pc, #468]	; (800100c <MX_GPIO_Init+0x248>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <MX_GPIO_Init+0x248>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	; (800100c <MX_GPIO_Init+0x248>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a6e      	ldr	r2, [pc, #440]	; (800100c <MX_GPIO_Init+0x248>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	; (800100c <MX_GPIO_Init+0x248>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b68      	ldr	r3, [pc, #416]	; (800100c <MX_GPIO_Init+0x248>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a67      	ldr	r2, [pc, #412]	; (800100c <MX_GPIO_Init+0x248>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b65      	ldr	r3, [pc, #404]	; (800100c <MX_GPIO_Init+0x248>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2108      	movs	r1, #8
 8000e86:	4862      	ldr	r0, [pc, #392]	; (8001010 <MX_GPIO_Init+0x24c>)
 8000e88:	f000 fd74 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4860      	ldr	r0, [pc, #384]	; (8001014 <MX_GPIO_Init+0x250>)
 8000e92:	f000 fd6f 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e9c:	485e      	ldr	r0, [pc, #376]	; (8001018 <MX_GPIO_Init+0x254>)
 8000e9e:	f000 fd69 	bl	8001974 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4855      	ldr	r0, [pc, #340]	; (8001010 <MX_GPIO_Init+0x24c>)
 8000eba:	f000 fbbf 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	484f      	ldr	r0, [pc, #316]	; (8001014 <MX_GPIO_Init+0x250>)
 8000ed6:	f000 fbb1 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eea:	2305      	movs	r3, #5
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4847      	ldr	r0, [pc, #284]	; (8001014 <MX_GPIO_Init+0x250>)
 8000ef6:	f000 fba1 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4843      	ldr	r0, [pc, #268]	; (800101c <MX_GPIO_Init+0x258>)
 8000f10:	f000 fb94 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f14:	2310      	movs	r3, #16
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f24:	2306      	movs	r3, #6
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	483b      	ldr	r0, [pc, #236]	; (800101c <MX_GPIO_Init+0x258>)
 8000f30:	f000 fb84 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f34:	2304      	movs	r3, #4
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4836      	ldr	r0, [pc, #216]	; (8001020 <MX_GPIO_Init+0x25c>)
 8000f48:	f000 fb78 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_GPIO_Init+0x25c>)
 8000f6a:	f000 fb67 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f6e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4824      	ldr	r0, [pc, #144]	; (8001018 <MX_GPIO_Init+0x254>)
 8000f88:	f000 fb58 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 8000f8c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481a      	ldr	r0, [pc, #104]	; (8001014 <MX_GPIO_Init+0x250>)
 8000faa:	f000 fb47 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4815      	ldr	r0, [pc, #84]	; (8001018 <MX_GPIO_Init+0x254>)
 8000fc2:	f000 fb3b 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <MX_GPIO_Init+0x25c>)
 8000fe4:	f000 fb2a 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_GPIO_Init+0x24c>)
 8000ffe:	f000 fb1d 	bl	800163c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40021000 	.word	0x40021000
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_MspInit+0x4c>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x4c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 faa2 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_SPI_MspInit+0x84>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12b      	bne.n	80010fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_SPI_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010da:	23e0      	movs	r3, #224	; 0xe0
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ea:	2305      	movs	r3, #5
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_SPI_MspInit+0x8c>)
 80010f6:	f000 faa1 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40013000 	.word	0x40013000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_UART_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x88>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_UART_MspInit+0x88>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x88>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_UART_MspInit+0x88>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_UART_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800116a:	2304      	movs	r3, #4
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117a:	2307      	movs	r3, #7
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0x8c>)
 8001186:	f000 fa59 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004400 	.word	0x40004400
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f8d0 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <OTG_FS_IRQHandler+0x10>)
 80011fa:	f000 feb5 	bl	8001f68 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000056c 	.word	0x2000056c

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f007 fbd2 	bl	80089e0 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20020000 	.word	0x20020000
 8001268:	00000400 	.word	0x00000400
 800126c:	20000188 	.word	0x20000188
 8001270:	20000a98 	.word	0x20000a98

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f007 fb91 	bl	80089ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fa17 	bl	80006fc <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012dc:	08009174 	.word	0x08009174
  ldr r2, =_sbss
 80012e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012e4:	20000a94 	.word	0x20000a94

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_Init+0x40>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_Init+0x40>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x40>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f94f 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fe86 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f967 	bl	8001622 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f92f 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000014 	.word	0x20000014
 8001388:	2000001c 	.word	0x2000001c
 800138c:	20000018 	.word	0x20000018

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000001c 	.word	0x2000001c
 80013b4:	2000018c 	.word	0x2000018c

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	2000018c 	.word	0x2000018c

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000001c 	.word	0x2000001c

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff3e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff31 	bl	800147c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e16b      	b.n	8001930 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 815a 	bne.w	800192a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80b4 	beq.w	800192a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a5f      	ldr	r2, [pc, #380]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_GPIO_Init+0x30c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a5b      	ldr	r2, [pc, #364]	; (800194c <HAL_GPIO_Init+0x310>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_GPIO_Init+0x314>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x226>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_GPIO_Init+0x318>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x222>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x31c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x21e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_GPIO_Init+0x320>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_GPIO_Init+0x324>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x216>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x328>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x212>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x32c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x20e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x330>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20a>
 8001842:	2307      	movs	r3, #7
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001846:	2308      	movs	r3, #8
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x228>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x228>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x310>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x334>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_GPIO_Init+0x334>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae90 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e059      	b.n	8001a6c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f006 fc92 	bl	80082fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e6:	d102      	bne.n	80019ee <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fa9b 	bl	8004f2e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7c1a      	ldrb	r2, [r3, #16]
 8001a00:	f88d 2000 	strb.w	r2, [sp]
 8001a04:	3304      	adds	r3, #4
 8001a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a08:	f003 fa1c 	bl	8004e44 <USB_CoreInit>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e026      	b.n	8001a6c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fa93 	bl	8004f50 <USB_SetCurrentMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e017      	b.n	8001a6c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7c1a      	ldrb	r2, [r3, #16]
 8001a44:	f88d 2000 	strb.w	r2, [sp]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	f003 fc36 	bl	80052bc <USB_HostInit>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e004      	b.n	8001a6c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	70fb      	strb	r3, [r7, #3]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70bb      	strb	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001a8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a90:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_HCD_HC_Init+0x2c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e09d      	b.n	8001bdc <HAL_HCD_HC_Init+0x168>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3319      	adds	r3, #25
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3314      	adds	r3, #20
 8001acc:	787a      	ldrb	r2, [r7, #1]
 8001ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3315      	adds	r3, #21
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3326      	adds	r3, #38	; 0x26
 8001af4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	78bb      	ldrb	r3, [r7, #2]
 8001afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b02:	b2d8      	uxtb	r0, r3
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	3316      	adds	r3, #22
 8001b12:	4602      	mov	r2, r0
 8001b14:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fbc8 	bl	80022b0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001b20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0a      	bge.n	8001b3e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	3317      	adds	r3, #23
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e009      	b.n	8001b52 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3317      	adds	r3, #23
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fd14 	bl	8005584 <USB_GetHostSpeed>
 8001b5c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10b      	bne.n	8001b7e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_HCD_HC_Init+0x10a>
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2bbc      	cmp	r3, #188	; 0xbc
 8001b78:	d901      	bls.n	8001b7e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001b7a:	23bc      	movs	r3, #188	; 0xbc
 8001b7c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b298      	uxth	r0, r3
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3328      	adds	r3, #40	; 0x28
 8001ba8:	4602      	mov	r2, r0
 8001baa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	787c      	ldrb	r4, [r7, #1]
 8001bb6:	78ba      	ldrb	r2, [r7, #2]
 8001bb8:	78f9      	ldrb	r1, [r7, #3]
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4623      	mov	r3, r4
 8001bca:	f003 fd03 	bl	80055d4 <USB_HC_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}

08001be4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_HCD_HC_Halt+0x1e>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e00f      	b.n	8001c22 <HAL_HCD_HC_Halt+0x3e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f895 	bl	8005d42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	70fb      	strb	r3, [r7, #3]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70bb      	strb	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3317      	adds	r3, #23
 8001c56:	78ba      	ldrb	r2, [r7, #2]
 8001c58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	3326      	adds	r3, #38	; 0x26
 8001c6a:	787a      	ldrb	r2, [r7, #1]
 8001c6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c6e:	7c3b      	ldrb	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	332a      	adds	r3, #42	; 0x2a
 8001c84:	2203      	movs	r2, #3
 8001c86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	3319      	adds	r3, #25
 8001c98:	7f3a      	ldrb	r2, [r7, #28]
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e009      	b.n	8001cb2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	332a      	adds	r3, #42	; 0x2a
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	f200 8102 	bhi.w	8001ebe <HAL_HCD_HC_SubmitRequest+0x292>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001cd1 	.word	0x08001cd1
 8001cc4:	08001ea9 	.word	0x08001ea9
 8001cc8:	08001d95 	.word	0x08001d95
 8001ccc:	08001e1f 	.word	0x08001e1f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001cd0:	7c3b      	ldrb	r3, [r7, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f040 80f5 	bne.w	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d12d      	bne.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001cde:	8b3b      	ldrh	r3, [r7, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333d      	adds	r3, #61	; 0x3d
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	333d      	adds	r3, #61	; 0x3d
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	332a      	adds	r3, #42	; 0x2a
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001d22:	e0ce      	b.n	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	332a      	adds	r3, #42	; 0x2a
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
      break;
 8001d38:	e0c3      	b.n	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	331a      	adds	r3, #26
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	f040 80b8 	bne.w	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	332a      	adds	r3, #42	; 0x2a
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
      break;
 8001d7c:	e0a1      	b.n	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	332a      	adds	r3, #42	; 0x2a
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]
      break;
 8001d92:	e096      	b.n	8001ec2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d94:	78bb      	ldrb	r3, [r7, #2]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d120      	bne.n	8001ddc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	333d      	adds	r3, #61	; 0x3d
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	332a      	adds	r3, #42	; 0x2a
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001dc4:	e07e      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	332a      	adds	r3, #42	; 0x2a
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	701a      	strb	r2, [r3, #0]
      break;
 8001dda:	e073      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	333c      	adds	r3, #60	; 0x3c
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	332a      	adds	r3, #42	; 0x2a
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
      break;
 8001e06:	e05d      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	332a      	adds	r3, #42	; 0x2a
 8001e18:	2202      	movs	r2, #2
 8001e1a:	701a      	strb	r2, [r3, #0]
      break;
 8001e1c:	e052      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e1e:	78bb      	ldrb	r3, [r7, #2]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d120      	bne.n	8001e66 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	333d      	adds	r3, #61	; 0x3d
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	332a      	adds	r3, #42	; 0x2a
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e4e:	e039      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	332a      	adds	r3, #42	; 0x2a
 8001e60:	2202      	movs	r2, #2
 8001e62:	701a      	strb	r2, [r3, #0]
      break;
 8001e64:	e02e      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	333c      	adds	r3, #60	; 0x3c
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	332a      	adds	r3, #42	; 0x2a
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
      break;
 8001e90:	e018      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	332a      	adds	r3, #42	; 0x2a
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
      break;
 8001ea6:	e00d      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	332a      	adds	r3, #42	; 0x2a
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
      break;
 8001ebc:	e002      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001ec2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	332c      	adds	r3, #44	; 0x2c
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	8b39      	ldrh	r1, [r7, #24]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4403      	add	r3, r0
 8001ee8:	3334      	adds	r3, #52	; 0x34
 8001eea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	334c      	adds	r3, #76	; 0x4c
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3338      	adds	r3, #56	; 0x38
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3315      	adds	r3, #21
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	334d      	adds	r3, #77	; 0x4d
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	1d19      	adds	r1, r3, #4
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	799b      	ldrb	r3, [r3, #6]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f003 fc68 	bl	800582c <USB_HC_StartXfer>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop

08001f68 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 f95c 	bl	800523c <USB_GetMode>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 80fb 	bne.w	8002182 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f91f 	bl	80051d4 <USB_ReadInterrupts>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80f1 	beq.w	8002180 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 f916 	bl	80051d4 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fb2:	d104      	bne.n	8001fbe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 f906 	bl	80051d4 <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fd2:	d104      	bne.n	8001fde <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 f8f6 	bl	80051d4 <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ff2:	d104      	bne.n	8001ffe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ffc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 f8e6 	bl	80051d4 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f003 f8d8 	bl	80051d4 <USB_ReadInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800202a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800202e:	d120      	bne.n	8002072 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002038:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800204a:	2110      	movs	r1, #16
 800204c:	6938      	ldr	r0, [r7, #16]
 800204e:	f002 ffcb 	bl	8004fe8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002052:	6938      	ldr	r0, [r7, #16]
 8002054:	f002 fffa 	bl	800504c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7a5b      	ldrb	r3, [r3, #9]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d105      	bne.n	800206c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f9ec 	bl	8005444 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f006 f9b5 	bl	80083dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 f8ac 	bl	80051d4 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002086:	d102      	bne.n	800208e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f001 fd33 	bl	8003af4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 f89e 	bl	80051d4 <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d106      	bne.n	80020b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f006 f97e 	bl	80083a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2208      	movs	r2, #8
 80020ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 f88d 	bl	80051d4 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020c4:	d139      	bne.n	800213a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fe28 	bl	8005d20 <USB_HC_ReadInterrupt>
 80020d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e025      	b.n	8002124 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002102:	d106      	bne.n	8002112 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f905 	bl	800231a <HCD_HC_IN_IRQHandler>
 8002110:	e005      	b.n	800211e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 ff67 	bl	8002fec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	795b      	ldrb	r3, [r3, #5]
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4293      	cmp	r3, r2
 800212e:	d3d3      	bcc.n	80020d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f848 	bl	80051d4 <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b10      	cmp	r3, #16
 800214c:	d101      	bne.n	8002152 <HAL_HCD_IRQHandler+0x1ea>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_HCD_IRQHandler+0x1ec>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d014      	beq.n	8002182 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f001 fbe4 	bl	8003936 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0210 	orr.w	r2, r2, #16
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	e000      	b.n	8002182 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002180:	bf00      	nop
    }
  }
}
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_HCD_Start+0x16>
 800219a:	2302      	movs	r3, #2
 800219c:	e013      	b.n	80021c6 <HAL_HCD_Start+0x3e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f9b0 	bl	8005512 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fea8 	bl	8004f0c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_HCD_Stop+0x16>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e00d      	b.n	8002200 <HAL_HCD_Stop+0x32>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 ff03 	bl	8005ffc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 f952 	bl	80054be <USB_ResetPort>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334c      	adds	r3, #76	; 0x4c
 8002240:	781b      	ldrb	r3, [r3, #0]
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3338      	adds	r3, #56	; 0x38
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 f994 	bl	80055b2 <USB_GetCurrentFrame>
 800228a:	4603      	mov	r3, r0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 f96f 	bl	8005584 <USB_GetHostSpeed>
 80022a6:	4603      	mov	r3, r0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	331a      	adds	r3, #26
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	331b      	adds	r3, #27
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3325      	adds	r3, #37	; 0x25
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3324      	adds	r3, #36	; 0x24
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f002 ff5e 	bl	80051fa <USB_ReadChInterrupts>
 800233e:	4603      	mov	r3, r0
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11a      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2304      	movs	r3, #4
 8002358:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	334d      	adds	r3, #77	; 0x4d
 800236a:	2207      	movs	r2, #7
 800236c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fce3 	bl	8005d42 <USB_HC_Halt>
 800237c:	e09e      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 ff37 	bl	80051fa <USB_ReadChInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002396:	d11b      	bne.n	80023d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	; 0x4d
 80023bc:	2208      	movs	r2, #8
 80023be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fcba 	bl	8005d42 <USB_HC_Halt>
 80023ce:	e075      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 ff0e 	bl	80051fa <USB_ReadChInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d11a      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2308      	movs	r3, #8
 80023f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	334d      	adds	r3, #77	; 0x4d
 800240a:	2206      	movs	r2, #6
 800240c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fc93 	bl	8005d42 <USB_HC_Halt>
 800241c:	e04e      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fee7 	bl	80051fa <USB_ReadChInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d11b      	bne.n	8002470 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	334d      	adds	r3, #77	; 0x4d
 800245c:	2209      	movs	r2, #9
 800245e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fc6a 	bl	8005d42 <USB_HC_Halt>
 800246e:	e025      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f002 febe 	bl	80051fa <USB_ReadChInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	2b80      	cmp	r3, #128	; 0x80
 8002486:	d119      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	461a      	mov	r2, r3
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	334d      	adds	r3, #77	; 0x4d
 80024aa:	2207      	movs	r2, #7
 80024ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fc43 	bl	8005d42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fe98 	bl	80051fa <USB_ReadChInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d112      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fc2f 	bl	8005d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	f000 bd75 	b.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fe78 	bl	80051fa <USB_ReadChInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	f040 8128 	bne.w	8002766 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	2320      	movs	r3, #32
 8002526:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	331b      	adds	r3, #27
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d119      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	331b      	adds	r3, #27
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	440a      	add	r2, r1
 8002568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	799b      	ldrb	r3, [r3, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01b      	beq.n	80025b2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3330      	adds	r3, #48	; 0x30
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	1ac9      	subs	r1, r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	3338      	adds	r3, #56	; 0x38
 80025b0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	; 0x4d
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3344      	adds	r3, #68	; 0x44
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3326      	adds	r3, #38	; 0x26
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3326      	adds	r3, #38	; 0x26
 8002612:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002614:	2b02      	cmp	r3, #2
 8002616:	d110      	bne.n	800263a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 fb8e 	bl	8005d42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2310      	movs	r3, #16
 8002636:	6093      	str	r3, [r2, #8]
 8002638:	e03d      	b.n	80026b6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3326      	adds	r3, #38	; 0x26
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d00a      	beq.n	8002666 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3326      	adds	r3, #38	; 0x26
 8002660:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002662:	2b01      	cmp	r3, #1
 8002664:	d127      	bne.n	80026b6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002684:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334c      	adds	r3, #76	; 0x4c
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334c      	adds	r3, #76	; 0x4c
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f005 fea1 	bl	80083f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	799b      	ldrb	r3, [r3, #6]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d13b      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3338      	adds	r3, #56	; 0x38
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4403      	add	r3, r0
 80026de:	3328      	adds	r3, #40	; 0x28
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	440b      	add	r3, r1
 80026e4:	1e59      	subs	r1, r3, #1
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4403      	add	r3, r0
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8470 	beq.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	333c      	adds	r3, #60	; 0x3c
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2d8      	uxtb	r0, r3
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	333c      	adds	r3, #60	; 0x3c
 800272e:	4602      	mov	r2, r0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	f000 bc58 	b.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	333c      	adds	r3, #60	; 0x3c
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2d8      	uxtb	r0, r3
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	4602      	mov	r2, r0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	f000 bc40 	b.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd43 	bl	80051fa <USB_ReadChInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b20      	cmp	r3, #32
 800277c:	d131      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2320      	movs	r3, #32
 800278e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	331a      	adds	r3, #26
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 841f 	bne.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	331b      	adds	r3, #27
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334d      	adds	r3, #77	; 0x4d
 80027cc:	2203      	movs	r2, #3
 80027ce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fab2 	bl	8005d42 <USB_HC_Halt>
 80027de:	f000 bc02 	b.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 fd05 	bl	80051fa <USB_ReadChInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 8305 	bne.w	8002e06 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2302      	movs	r3, #2
 800280c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	334d      	adds	r3, #77	; 0x4d
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d114      	bne.n	800284e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	334d      	adds	r3, #77	; 0x4d
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334c      	adds	r3, #76	; 0x4c
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e2cc      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	334d      	adds	r3, #77	; 0x4d
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d114      	bne.n	800288e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334d      	adds	r3, #77	; 0x4d
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334c      	adds	r3, #76	; 0x4c
 8002888:	2205      	movs	r2, #5
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e2ac      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	334d      	adds	r3, #77	; 0x4d
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b07      	cmp	r3, #7
 80028a2:	d00b      	beq.n	80028bc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	; 0x4d
 80028b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	f040 80a6 	bne.w	8002a08 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	334d      	adds	r3, #77	; 0x4d
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3344      	adds	r3, #68	; 0x44
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4403      	add	r3, r0
 80028f0:	3344      	adds	r3, #68	; 0x44
 80028f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3344      	adds	r3, #68	; 0x44
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d943      	bls.n	8002992 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3344      	adds	r3, #68	; 0x44
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	331a      	adds	r3, #26
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d123      	bne.n	800297c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	331b      	adds	r3, #27
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	331c      	adds	r3, #28
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	440a      	add	r2, r1
 8002972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	2204      	movs	r2, #4
 800298e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002990:	e229      	b.n	8002de6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	334c      	adds	r3, #76	; 0x4c
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3326      	adds	r3, #38	; 0x26
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3326      	adds	r3, #38	; 0x26
 80029cc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	f040 8209 	bne.w	8002de6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029ea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a06:	e1ee      	b.n	8002de6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	; 0x4d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	f040 80c8 	bne.w	8002bb0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334d      	adds	r3, #77	; 0x4d
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	331b      	adds	r3, #27
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 81ce 	bne.w	8002de8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3326      	adds	r3, #38	; 0x26
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d16b      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3348      	adds	r3, #72	; 0x48
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c59      	adds	r1, r3, #1
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4403      	add	r3, r0
 8002a82:	3348      	adds	r3, #72	; 0x48
 8002a84:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3348      	adds	r3, #72	; 0x48
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d943      	bls.n	8002b24 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3348      	adds	r3, #72	; 0x48
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	331b      	adds	r3, #27
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3344      	adds	r3, #68	; 0x44
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d809      	bhi.n	8002aee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	331c      	adds	r3, #28
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	0151      	lsls	r1, r2, #5
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	440a      	add	r2, r1
 8002b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	334c      	adds	r3, #76	; 0x4c
 8002b1e:	2204      	movs	r2, #4
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e014      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334c      	adds	r3, #76	; 0x4c
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e009      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334c      	adds	r3, #76	; 0x4c
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3326      	adds	r3, #38	; 0x26
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3326      	adds	r3, #38	; 0x26
 8002b74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 8136 	bne.w	8002de8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e11b      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334d      	adds	r3, #77	; 0x4d
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	f040 8081 	bne.w	8002cca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334d      	adds	r3, #77	; 0x4d
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	331b      	adds	r3, #27
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 80fa 	bne.w	8002de8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	; 0x4c
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	0151      	lsls	r1, r2, #5
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	0151      	lsls	r1, r2, #5
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c46:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	0151      	lsls	r1, r2, #5
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c62:	f023 0320 	bic.w	r3, r3, #32
 8002c66:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3326      	adds	r3, #38	; 0x26
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3326      	adds	r3, #38	; 0x26
 8002c8e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f040 80a9 	bne.w	8002de8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e08e      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	334d      	adds	r3, #77	; 0x4d
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d143      	bne.n	8002d68 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	334d      	adds	r3, #77	; 0x4d
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	334c      	adds	r3, #76	; 0x4c
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3326      	adds	r3, #38	; 0x26
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3326      	adds	r3, #38	; 0x26
 8002d2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d159      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d4a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e03f      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	334d      	adds	r3, #77	; 0x4d
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d126      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	; 0x4d
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	; 0x44
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c59      	adds	r1, r3, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4403      	add	r3, r0
 8002db2:	3344      	adds	r3, #68	; 0x44
 8002db4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334c      	adds	r3, #76	; 0x4c
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e00d      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	; 0x4d
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	f000 8100 	beq.w	8002fe4 <HCD_HC_IN_IRQHandler+0xcca>
 8002de4:	e000      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002de6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334c      	adds	r3, #76	; 0x4c
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f005 fafa 	bl	80083f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e04:	e0ef      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 f9f3 	bl	80051fa <USB_ReadChInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d12f      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	334d      	adds	r3, #77	; 0x4d
 8002e40:	2205      	movs	r2, #5
 8002e42:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	331a      	adds	r3, #26
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3344      	adds	r3, #68	; 0x44
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 ff63 	bl	8005d42 <USB_HC_Halt>
 8002e7c:	e0b3      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 f9b7 	bl	80051fa <USB_ReadChInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	f040 80a7 	bne.w	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3326      	adds	r3, #38	; 0x26
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d11b      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3344      	adds	r3, #68	; 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	334d      	adds	r3, #77	; 0x4d
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 ff2f 	bl	8005d42 <USB_HC_Halt>
 8002ee4:	e03f      	b.n	8002f66 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3326      	adds	r3, #38	; 0x26
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3326      	adds	r3, #38	; 0x26
 8002f0c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d129      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	799b      	ldrb	r3, [r3, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HCD_HC_IN_IRQHandler+0xc2a>
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	331b      	adds	r3, #27
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d110      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	; 0x4d
 8002f54:	2204      	movs	r2, #4
 8002f56:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 feee 	bl	8005d42 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	331b      	adds	r3, #27
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d129      	bne.n	8002fd0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	331b      	adds	r3, #27
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fca:	f043 0320 	orr.w	r3, r3, #32
 8002fce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2310      	movs	r3, #16
 8002fe0:	6093      	str	r3, [r2, #8]
 8002fe2:	e000      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002fe4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f002 f8f5 	bl	80051fa <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d11b      	bne.n	8003052 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2304      	movs	r3, #4
 800302a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334d      	adds	r3, #77	; 0x4d
 800303c:	2207      	movs	r2, #7
 800303e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f002 fe7a 	bl	8005d42 <USB_HC_Halt>
 800304e:	f000 bc6f 	b.w	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f002 f8cd 	bl	80051fa <USB_ReadChInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	f040 8082 	bne.w	8003170 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2320      	movs	r3, #32
 800307c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3319      	adds	r3, #25
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d124      	bne.n	80030de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3319      	adds	r3, #25
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	334c      	adds	r3, #76	; 0x4c
 80030b8:	2202      	movs	r2, #2
 80030ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334d      	adds	r3, #77	; 0x4d
 80030cc:	2203      	movs	r2, #3
 80030ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fe32 	bl	8005d42 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	331a      	adds	r3, #26
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	f040 841d 	bne.w	8003930 <HCD_HC_OUT_IRQHandler+0x944>
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	331b      	adds	r3, #27
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 8411 	bne.w	8003930 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3326      	adds	r3, #38	; 0x26
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d009      	beq.n	8003138 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	331b      	adds	r3, #27
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	; 0x4d
 8003148:	2203      	movs	r2, #3
 800314a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fdf4 	bl	8005d42 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3344      	adds	r3, #68	; 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e3df      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f002 f83e 	bl	80051fa <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d111      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fdcb 	bl	8005d42 <USB_HC_Halt>
 80031ac:	e3c0      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 f81f 	bl	80051fa <USB_ReadChInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d168      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3344      	adds	r3, #68	; 0x44
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 f809 	bl	80051fa <USB_ReadChInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d112      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3319      	adds	r3, #25
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	331b      	adds	r3, #27
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d019      	beq.n	8003262 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	331b      	adds	r3, #27
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	440a      	add	r2, r1
 8003258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003260:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	2301      	movs	r3, #1
 8003272:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	334d      	adds	r3, #77	; 0x4d
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fd56 	bl	8005d42 <USB_HC_Halt>
 8003296:	e34b      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 ffaa 	bl	80051fa <USB_ReadChInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d139      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334d      	adds	r3, #77	; 0x4d
 80032c0:	2205      	movs	r2, #5
 80032c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	331a      	adds	r3, #26
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3319      	adds	r3, #25
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f002 fd19 	bl	8005d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	461a      	mov	r2, r3
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	6093      	str	r3, [r2, #8]
 8003322:	e305      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f001 ff64 	bl	80051fa <USB_ReadChInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11a      	bne.n	8003372 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2308      	movs	r3, #8
 800334c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	; 0x4d
 800335e:	2206      	movs	r2, #6
 8003360:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f002 fce9 	bl	8005d42 <USB_HC_Halt>
 8003370:	e2de      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 ff3d 	bl	80051fa <USB_ReadChInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b10      	cmp	r3, #16
 8003388:	d144      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3344      	adds	r3, #68	; 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334d      	adds	r3, #77	; 0x4d
 80033ae:	2204      	movs	r2, #4
 80033b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3319      	adds	r3, #25
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d114      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3318      	adds	r3, #24
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	3319      	adds	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fca1 	bl	8005d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2310      	movs	r3, #16
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	e28d      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f001 feec 	bl	80051fa <USB_ReadChInterrupts>
 8003422:	4603      	mov	r3, r0
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b80      	cmp	r3, #128	; 0x80
 800342a:	d169      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	799b      	ldrb	r3, [r3, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d111      	bne.n	8003458 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334d      	adds	r3, #77	; 0x4d
 8003444:	2207      	movs	r2, #7
 8003446:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f002 fc76 	bl	8005d42 <USB_HC_Halt>
 8003456:	e049      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3344      	adds	r3, #68	; 0x44
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4403      	add	r3, r0
 8003478:	3344      	adds	r3, #68	; 0x44
 800347a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3344      	adds	r3, #68	; 0x44
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d922      	bls.n	80034d8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3344      	adds	r3, #68	; 0x44
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334c      	adds	r3, #76	; 0x4c
 80034b6:	2204      	movs	r2, #4
 80034b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334c      	adds	r3, #76	; 0x4c
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f004 ff91 	bl	80083f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d6:	e009      	b.n	80034ec <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	; 0x4c
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	6093      	str	r3, [r2, #8]
 80034fe:	e217      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fe76 	bl	80051fa <USB_ReadChInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d11b      	bne.n	8003552 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	334d      	adds	r3, #77	; 0x4d
 800352a:	2209      	movs	r2, #9
 800352c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f002 fc03 	bl	8005d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	e1ee      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fe4d 	bl	80051fa <USB_ReadChInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	f040 81df 	bne.w	800392a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2302      	movs	r3, #2
 800357c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334d      	adds	r3, #77	; 0x4d
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 8093 	bne.w	80036bc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334d      	adds	r3, #77	; 0x4d
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	; 0x4c
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3326      	adds	r3, #38	; 0x26
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d00b      	beq.n	80035ec <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3326      	adds	r3, #38	; 0x26
 80035e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	f040 8190 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	799b      	ldrb	r3, [r3, #6]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d115      	bne.n	8003620 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	333d      	adds	r3, #61	; 0x3d
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2d8      	uxtb	r0, r3
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	333d      	adds	r3, #61	; 0x3d
 800361c:	4602      	mov	r2, r0
 800361e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	799b      	ldrb	r3, [r3, #6]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 8171 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3334      	adds	r3, #52	; 0x34
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8165 	beq.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3334      	adds	r3, #52	; 0x34
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4403      	add	r3, r0
 8003662:	3328      	adds	r3, #40	; 0x28
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	440b      	add	r3, r1
 8003668:	1e59      	subs	r1, r3, #1
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4403      	add	r3, r0
 8003678:	3328      	adds	r3, #40	; 0x28
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003680:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 813f 	beq.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	333d      	adds	r3, #61	; 0x3d
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	f083 0301 	eor.w	r3, r3, #1
 80036a6:	b2d8      	uxtb	r0, r3
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	333d      	adds	r3, #61	; 0x3d
 80036b6:	4602      	mov	r2, r0
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e127      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334d      	adds	r3, #77	; 0x4d
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d120      	bne.n	8003714 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	334d      	adds	r3, #77	; 0x4d
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	331b      	adds	r3, #27
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 8107 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	334c      	adds	r3, #76	; 0x4c
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e0fb      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334d      	adds	r3, #77	; 0x4d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d13a      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	334d      	adds	r3, #77	; 0x4d
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	334c      	adds	r3, #76	; 0x4c
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	331b      	adds	r3, #27
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 80d1 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	331b      	adds	r3, #27
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	440a      	add	r2, r1
 8003794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379c:	6053      	str	r3, [r2, #4]
 800379e:	e0b5      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334d      	adds	r3, #77	; 0x4d
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d114      	bne.n	80037e0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	; 0x4d
 80037c6:	2202      	movs	r2, #2
 80037c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334c      	adds	r3, #76	; 0x4c
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e095      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	; 0x4d
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d114      	bne.n	8003820 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334d      	adds	r3, #77	; 0x4d
 8003806:	2202      	movs	r2, #2
 8003808:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	334c      	adds	r3, #76	; 0x4c
 800381a:	2205      	movs	r2, #5
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e075      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	334d      	adds	r3, #77	; 0x4d
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b07      	cmp	r3, #7
 8003834:	d00a      	beq.n	800384c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334d      	adds	r3, #77	; 0x4d
 8003846:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003848:	2b09      	cmp	r3, #9
 800384a:	d170      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334d      	adds	r3, #77	; 0x4d
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3344      	adds	r3, #68	; 0x44
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4403      	add	r3, r0
 8003880:	3344      	adds	r3, #68	; 0x44
 8003882:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3344      	adds	r3, #68	; 0x44
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d914      	bls.n	80038c4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	; 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	334c      	adds	r3, #76	; 0x4c
 80038be:	2204      	movs	r2, #4
 80038c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038c2:	e022      	b.n	800390a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334c      	adds	r3, #76	; 0x4c
 80038d4:	2202      	movs	r2, #2
 80038d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800390a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	334c      	adds	r3, #76	; 0x4c
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f004 fd68 	bl	80083f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003928:	e002      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800392e:	bf00      	nop
  }
}
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08a      	sub	sp, #40	; 0x28
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	0c5b      	lsrs	r3, r3, #17
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d004      	beq.n	800397c <HCD_RXQLVL_IRQHandler+0x46>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b05      	cmp	r3, #5
 8003976:	f000 80b6 	beq.w	8003ae6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800397a:	e0b7      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80b3 	beq.w	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	332c      	adds	r3, #44	; 0x2c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80a7 	beq.w	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3338      	adds	r3, #56	; 0x38
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	18d1      	adds	r1, r2, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4403      	add	r3, r0
 80039c0:	3334      	adds	r3, #52	; 0x34
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4299      	cmp	r1, r3
 80039c6:	f200 8083 	bhi.w	8003ad0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	332c      	adds	r3, #44	; 0x2c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	b292      	uxth	r2, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f001 fb9d 	bl	8005124 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	332c      	adds	r3, #44	; 0x2c
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	18d1      	adds	r1, r2, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	332c      	adds	r3, #44	; 0x2c
 8003a10:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	18d1      	adds	r1, r2, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4403      	add	r3, r0
 8003a36:	3338      	adds	r3, #56	; 0x38
 8003a38:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	0cdb      	lsrs	r3, r3, #19
 8003a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3328      	adds	r3, #40	; 0x28
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d13f      	bne.n	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d03c      	beq.n	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	333c      	adds	r3, #60	; 0x3c
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2d8      	uxtb	r0, r3
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	333c      	adds	r3, #60	; 0x3c
 8003aca:	4602      	mov	r2, r0
 8003acc:	701a      	strb	r2, [r3, #0]
      break;
 8003ace:	e00c      	b.n	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	334c      	adds	r3, #76	; 0x4c
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	701a      	strb	r2, [r3, #0]
      break;
 8003ae4:	e001      	b.n	8003aea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003aea:	bf00      	nop
  }
}
 8003aec:	bf00      	nop
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d10b      	bne.n	8003b44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f004 fc42 	bl	80083c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d132      	bne.n	8003bb4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d126      	bne.n	8003bae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7a5b      	ldrb	r3, [r3, #9]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d113      	bne.n	8003b90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b72:	d106      	bne.n	8003b82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fc62 	bl	8005444 <USB_InitFSLSPClkSel>
 8003b80:	e011      	b.n	8003ba6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fc5b 	bl	8005444 <USB_InitFSLSPClkSel>
 8003b8e:	e00a      	b.n	8003ba6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	79db      	ldrb	r3, [r3, #7]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ba4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f004 fc34 	bl	8008414 <HAL_HCD_PortEnabled_Callback>
 8003bac:	e002      	b.n	8003bb4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f004 fc3e 	bl	8008430 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d103      	bne.n	8003bc6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f043 0320 	orr.w	r3, r3, #32
 8003bc4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e267      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e242      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b69      	ldr	r3, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a68      	ldr	r2, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fb90 	bl	80013b8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fb8c 	bl	80013b8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e207      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fb7c 	bl	80013b8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fb78 	bl	80013b8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f3      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b51      	ldr	r3, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd fb31 	bl	80013b8 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd fb2d 	bl	80013b8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fb10 	bl	80013b8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fb0c 	bl	80013b8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e187      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd faf0 	bl	80013b8 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd faec 	bl	80013b8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e167      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fad9 	bl	80013b8 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00e      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd fad5 	bl	80013b8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d907      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e150      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ea      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8097 	beq.w	8003f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b77      	ldr	r3, [pc, #476]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b74      	ldr	r3, [pc, #464]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a73      	ldr	r2, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fa95 	bl	80013b8 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fd fa91 	bl	80013b8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e10c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ea>
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a63      	ldr	r2, [pc, #396]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x30c>
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a5b      	ldr	r2, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ee8:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	4b55      	ldr	r3, [pc, #340]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a54      	ldr	r2, [pc, #336]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd fa56 	bl	80013b8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fa52 	bl	80013b8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0cb      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCC_OscConfig+0x334>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd fa40 	bl	80013b8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fa3c 	bl	80013b8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0b5      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	4b3e      	ldr	r3, [pc, #248]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a1 	beq.w	80040bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d05c      	beq.n	8004040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d141      	bne.n	8004012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd fa10 	bl	80013b8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd fa0c 	bl	80013b8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e087      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fd f9e5 	bl	80013b8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd f9e1 	bl	80013b8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e05c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x416>
 8004010:	e054      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd f9ce 	bl	80013b8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd f9ca 	bl	80013b8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x444>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d121      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fd f8fc 	bl	80013b8 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd f8f8 	bl	80013b8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd f85c 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	080090fc 	.word	0x080090fc
 8004290:	20000014 	.word	0x20000014
 8004294:	20000018 	.word	0x20000018

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b094      	sub	sp, #80	; 0x50
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	2300      	movs	r3, #0
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	2300      	movs	r3, #0
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80e1 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e0db      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042d0:	e0db      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d6:	e0d8      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
 8004306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4621      	mov	r1, r4
 8004324:	1a51      	subs	r1, r2, r1
 8004326:	6139      	str	r1, [r7, #16]
 8004328:	4629      	mov	r1, r5
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800433c:	4659      	mov	r1, fp
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4651      	mov	r1, sl
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4651      	mov	r1, sl
 800434c:	ebb2 0801 	subs.w	r8, r2, r1
 8004350:	4659      	mov	r1, fp
 8004352:	eb63 0901 	sbc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	462b      	mov	r3, r5
 8004378:	eb49 0303 	adc.w	r3, r9, r3
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438a:	4629      	mov	r1, r5
 800438c:	024b      	lsls	r3, r1, #9
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004394:	4621      	mov	r1, r4
 8004396:	024a      	lsls	r2, r1, #9
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a8:	f7fb ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e058      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	4611      	mov	r1, r2
 80043c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0159      	lsls	r1, r3, #5
 80043de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e2:	0150      	lsls	r0, r2, #5
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4641      	mov	r1, r8
 80043ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ee:	4649      	mov	r1, r9
 80043f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004408:	ebb2 040a 	subs.w	r4, r2, sl
 800440c:	eb63 050b 	sbc.w	r5, r3, fp
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	00eb      	lsls	r3, r5, #3
 800441a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441e:	00e2      	lsls	r2, r4, #3
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	4643      	mov	r3, r8
 8004426:	18e3      	adds	r3, r4, r3
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	464b      	mov	r3, r9
 800442c:	eb45 0303 	adc.w	r3, r5, r3
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443e:	4629      	mov	r1, r5
 8004440:	028b      	lsls	r3, r1, #10
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004448:	4621      	mov	r1, r4
 800444a:	028a      	lsls	r2, r1, #10
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fb feb4 	bl	80001c8 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_GetSysClockFreq+0x200>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004482:	e002      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetSysClockFreq+0x204>)
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800448c:	4618      	mov	r0, r3
 800448e:	3750      	adds	r7, #80	; 0x50
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000014 	.word	0x20000014

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	0800910c 	.word	0x0800910c

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffdc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	0800910c 	.word	0x0800910c

0800450c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07b      	b.n	8004616 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d108      	bne.n	8004538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452e:	d009      	beq.n	8004544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
 8004536:	e005      	b.n	8004544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fd8e 	bl	8001080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	ea42 0103 	orr.w	r1, r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0104 	and.w	r1, r3, #4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0210 	and.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004604:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e04a      	b.n	80046c6 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fc fd63 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2224      	movs	r2, #36	; 0x24
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f97a 	bl	800495c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004686:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d175      	bne.n	80047da <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_UART_Transmit+0x2c>
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06e      	b.n	80047dc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2221      	movs	r2, #33	; 0x21
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470c:	f7fc fe54 	bl	80013b8 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d108      	bne.n	800473a <HAL_UART_Transmit+0x6c>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e003      	b.n	8004742 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004742:	e02e      	b.n	80047a2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f848 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e03a      	b.n	80047dc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e007      	b.n	8004794 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cb      	bne.n	8004744 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f814 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e006      	b.n	80047dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	e03b      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d037      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fc fddb 	bl	80013b8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x30>
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e03a      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d023      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d020      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d01d      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d116      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f81d 	bl	8004896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2208      	movs	r2, #8
 8004860:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e00f      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	429a      	cmp	r2, r3
 800488a:	d0b4      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b095      	sub	sp, #84	; 0x54
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048be:	643a      	str	r2, [r7, #64]	; 0x40
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3314      	adds	r3, #20
 80048d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	2b01      	cmp	r3, #1
 800490c:	d119      	bne.n	8004942 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	60bb      	str	r3, [r7, #8]
   return(result);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0310 	bic.w	r3, r3, #16
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800492e:	61ba      	str	r2, [r7, #24]
 8004930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004950:	bf00      	nop
 8004952:	3754      	adds	r7, #84	; 0x54
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0c0      	sub	sp, #256	; 0x100
 8004962:	af00      	add	r7, sp, #0
 8004964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	ea40 0301 	orr.w	r3, r0, r1
 8004984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049b4:	f021 010c 	bic.w	r1, r1, #12
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c2:	430b      	orrs	r3, r1
 80049c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	ea40 0301 	orr.w	r3, r0, r1
 80049e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b8f      	ldr	r3, [pc, #572]	; (8004c28 <UART_SetConfig+0x2cc>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d005      	beq.n	80049fc <UART_SetConfig+0xa0>
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b8d      	ldr	r3, [pc, #564]	; (8004c2c <UART_SetConfig+0x2d0>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d104      	bne.n	8004a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7ff fd72 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8004a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a04:	e003      	b.n	8004a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a06:	f7ff fd59 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8004a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	f040 810c 	bne.w	8004c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a36:	415b      	adcs	r3, r3
 8004a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a3e:	4621      	mov	r1, r4
 8004a40:	eb12 0801 	adds.w	r8, r2, r1
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb43 0901 	adc.w	r9, r3, r1
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5e:	4690      	mov	r8, r2
 8004a60:	4699      	mov	r9, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	eb18 0303 	adds.w	r3, r8, r3
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	18db      	adds	r3, r3, r3
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a90:	4613      	mov	r3, r2
 8004a92:	eb42 0303 	adc.w	r3, r2, r3
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
 8004a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aa0:	f7fb fb92 	bl	80001c8 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8004acc:	415b      	adcs	r3, r3
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af4:	4692      	mov	sl, r2
 8004af6:	469b      	mov	fp, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	eb1a 0303 	adds.w	r3, sl, r3
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb4b 0303 	adc.w	r3, fp, r3
 8004b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b36:	f7fb fb47 	bl	80001c8 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004b42:	fba3 2301 	umull	r2, r3, r3, r1
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2264      	movs	r2, #100	; 0x64
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004b58:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b80:	415b      	adcs	r3, r3
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bdc:	460b      	mov	r3, r1
 8004bde:	18db      	adds	r3, r3, r3
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be2:	4613      	mov	r3, r2
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bf2:	f7fb fae9 	bl	80001c8 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 0207 	and.w	r2, r3, #7
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c24:	e106      	b.n	8004e34 <UART_SetConfig+0x4d8>
 8004c26:	bf00      	nop
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	6239      	str	r1, [r7, #32]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c56:	4641      	mov	r1, r8
 8004c58:	1854      	adds	r4, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0501 	adc.w	r5, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	00eb      	lsls	r3, r5, #3
 8004c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c6e:	00e2      	lsls	r2, r4, #3
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	eb45 0303 	adc.w	r3, r5, r3
 8004c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	008b      	lsls	r3, r1, #2
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cac:	4621      	mov	r1, r4
 8004cae:	008a      	lsls	r2, r1, #2
 8004cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cb4:	f7fb fa88 	bl	80001c8 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b60      	ldr	r3, [pc, #384]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	61b9      	str	r1, [r7, #24]
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6139      	str	r1, [r7, #16]
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d52:	f7fb fa39 	bl	80001c8 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2264      	movs	r2, #100	; 0x64
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	1acb      	subs	r3, r1, r3
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	3332      	adds	r3, #50	; 0x32
 8004d70:	4a33      	ldr	r2, [pc, #204]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	673b      	str	r3, [r7, #112]	; 0x70
 8004d86:	677a      	str	r2, [r7, #116]	; 0x74
 8004d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dce:	464b      	mov	r3, r9
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
 8004de2:	667a      	str	r2, [r7, #100]	; 0x64
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004df0:	4649      	mov	r1, r9
 8004df2:	008b      	lsls	r3, r1, #2
 8004df4:	4641      	mov	r1, r8
 8004df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	008a      	lsls	r2, r1, #2
 8004dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e02:	f7fb f9e1 	bl	80001c8 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	; 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4422      	add	r2, r4
 8004e32:	609a      	str	r2, [r3, #8]
}
 8004e34:	bf00      	nop
 8004e36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d123      	bne.n	8004ea6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9dc 	bl	8005258 <USB_CoreReset>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	e01b      	b.n	8004ede <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9d0 	bl	8005258 <USB_CoreReset>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
 8004ed0:	e005      	b.n	8004ede <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ede:	7fbb      	ldrb	r3, [r7, #30]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10b      	bne.n	8004efc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f043 0206 	orr.w	r2, r3, #6
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr

08004f0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d115      	bne.n	8004f9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f7e:	200a      	movs	r0, #10
 8004f80:	f7fc fa26 	bl	80013d0 <HAL_Delay>
      ms += 10U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	330a      	adds	r3, #10
 8004f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f956 	bl	800523c <USB_GetMode>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d01e      	beq.n	8004fd4 <USB_SetCurrentMode+0x84>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2bc7      	cmp	r3, #199	; 0xc7
 8004f9a:	d9f0      	bls.n	8004f7e <USB_SetCurrentMode+0x2e>
 8004f9c:	e01a      	b.n	8004fd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d115      	bne.n	8004fd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fb0:	200a      	movs	r0, #10
 8004fb2:	f7fc fa0d 	bl	80013d0 <HAL_Delay>
      ms += 10U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	330a      	adds	r3, #10
 8004fba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f93d 	bl	800523c <USB_GetMode>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <USB_SetCurrentMode+0x84>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2bc7      	cmp	r3, #199	; 0xc7
 8004fcc:	d9f0      	bls.n	8004fb0 <USB_SetCurrentMode+0x60>
 8004fce:	e001      	b.n	8004fd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e005      	b.n	8004fe0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2bc8      	cmp	r3, #200	; 0xc8
 8004fd8:	d101      	bne.n	8004fde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005002:	d901      	bls.n	8005008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e01b      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	daf2      	bge.n	8004ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	019b      	lsls	r3, r3, #6
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800502c:	d901      	bls.n	8005032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d0f0      	beq.n	8005020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005064:	d901      	bls.n	800506a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e018      	b.n	800509c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	daf2      	bge.n	8005058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2210      	movs	r2, #16
 800507a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005088:	d901      	bls.n	800508e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e006      	b.n	800509c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d0f0      	beq.n	800507c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	460b      	mov	r3, r1
 80050b8:	71fb      	strb	r3, [r7, #7]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d123      	bne.n	8005116 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ce:	88bb      	ldrh	r3, [r7, #4]
 80050d0:	3303      	adds	r3, #3
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e018      	b.n	800510e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	031a      	lsls	r2, r3, #12
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e8:	461a      	mov	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	3301      	adds	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3e2      	bcc.n	80050dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3724      	adds	r7, #36	; 0x24
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005124:	b480      	push	{r7}
 8005126:	b08b      	sub	sp, #44	; 0x2c
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	b29b      	uxth	r3, r3
 8005140:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	e014      	b.n	800517a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	601a      	str	r2, [r3, #0]
    pDest++;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	3301      	adds	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3301      	adds	r3, #1
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	3301      	adds	r3, #1
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	3301      	adds	r3, #1
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	429a      	cmp	r2, r3
 8005180:	d3e6      	bcc.n	8005150 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005182:	8bfb      	ldrh	r3, [r7, #30]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01e      	beq.n	80051c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	461a      	mov	r2, r3
 8005194:	f107 0310 	add.w	r3, r7, #16
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	701a      	strb	r2, [r3, #0]
      i++;
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	3301      	adds	r3, #1
 80051b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	3301      	adds	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051ba:	8bfb      	ldrh	r3, [r7, #30]
 80051bc:	3b01      	subs	r3, #1
 80051be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051c0:	8bfb      	ldrh	r3, [r7, #30]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ea      	bne.n	800519c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	372c      	adds	r7, #44	; 0x2c
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800522e:	68bb      	ldr	r3, [r7, #8]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0301 	and.w	r3, r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005270:	d901      	bls.n	8005276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e01b      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	daf2      	bge.n	8005264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800529a:	d901      	bls.n	80052a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d0f0      	beq.n	800528e <USB_CoreReset+0x36>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052bc:	b084      	sub	sp, #16
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d119      	bne.n	8005346 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10a      	bne.n	8005330 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e014      	b.n	800535a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800533e:	f023 0304 	bic.w	r3, r3, #4
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e009      	b.n	800535a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800535a:	2110      	movs	r1, #16
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fe43 	bl	8004fe8 <USB_FlushTxFifo>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fe6d 	bl	800504c <USB_FlushRxFifo>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e015      	b.n	80053ae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3301      	adds	r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053b2:	461a      	mov	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d3e3      	bcc.n	8005382 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <USB_HostInit+0x170>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10b      	bne.n	80053e8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <USB_HostInit+0x174>)
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <USB_HostInit+0x178>)
 80053e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053e6:	e009      	b.n	80053fc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a11      	ldr	r2, [pc, #68]	; (8005438 <USB_HostInit+0x17c>)
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <USB_HostInit+0x180>)
 80053f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <USB_HostInit+0x184>)
 8005416:	4313      	orrs	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr
 800542c:	40040000 	.word	0x40040000
 8005430:	01000200 	.word	0x01000200
 8005434:	00e00300 	.word	0x00e00300
 8005438:	00600080 	.word	0x00600080
 800543c:	004000e0 	.word	0x004000e0
 8005440:	a3200008 	.word	0xa3200008

08005444 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548c:	461a      	mov	r2, r3
 800548e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	e00c      	b.n	80054b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d107      	bne.n	80054ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	461a      	mov	r2, r3
 80054a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80054a8:	6053      	str	r3, [r2, #4]
 80054aa:	e001      	b.n	80054b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054ee:	2064      	movs	r0, #100	; 0x64
 80054f0:	f7fb ff6e 	bl	80013d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005502:	200a      	movs	r0, #10
 8005504:	f7fb ff64 	bl	80013d0 <HAL_Delay>

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005536:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <USB_DriveVbus+0x44>
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d106      	bne.n	8005556 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005554:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005560:	d109      	bne.n	8005576 <USB_DriveVbus+0x64>
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005574:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	0c5b      	lsrs	r3, r3, #17
 80055a2:	f003 0303 	and.w	r3, r3, #3
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	b29b      	uxth	r3, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	461a      	mov	r2, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	70fb      	strb	r3, [r7, #3]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70bb      	strb	r3, [r7, #2]
 80055ea:	4613      	mov	r3, r2
 80055ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	461a      	mov	r2, r3
 8005604:	f04f 33ff 	mov.w	r3, #4294967295
 8005608:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800560a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800560e:	2b03      	cmp	r3, #3
 8005610:	d87c      	bhi.n	800570c <USB_HC_Init+0x138>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <USB_HC_Init+0x44>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	080056cf 	.word	0x080056cf
 8005620:	08005629 	.word	0x08005629
 8005624:	08005691 	.word	0x08005691
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	461a      	mov	r2, r3
 8005636:	f240 439d 	movw	r3, #1181	; 0x49d
 800563a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800563c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005640:	2b00      	cmp	r3, #0
 8005642:	da10      	bge.n	8005666 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	440a      	add	r2, r1
 800565a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005662:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005664:	e055      	b.n	8005712 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a6f      	ldr	r2, [pc, #444]	; (8005828 <USB_HC_Init+0x254>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d151      	bne.n	8005712 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	440a      	add	r2, r1
 8005684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800568c:	60d3      	str	r3, [r2, #12]
      break;
 800568e:	e040      	b.n	8005712 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	461a      	mov	r2, r3
 800569e:	f240 639d 	movw	r3, #1693	; 0x69d
 80056a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	da34      	bge.n	8005716 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056cc:	e023      	b.n	8005716 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	461a      	mov	r2, r3
 80056dc:	f240 2325 	movw	r3, #549	; 0x225
 80056e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da17      	bge.n	800571a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005708:	60d3      	str	r3, [r2, #12]
      }
      break;
 800570a:	e006      	b.n	800571a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	77fb      	strb	r3, [r7, #31]
      break;
 8005710:	e004      	b.n	800571c <USB_HC_Init+0x148>
      break;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <USB_HC_Init+0x148>
      break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <USB_HC_Init+0x148>
      break;
 800571a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	440a      	add	r2, r1
 8005744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005748:	f043 0302 	orr.w	r3, r3, #2
 800574c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	6939      	ldr	r1, [r7, #16]
 8005764:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005768:	4313      	orrs	r3, r2
 800576a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800577c:	2b00      	cmp	r3, #0
 800577e:	da03      	bge.n	8005788 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e001      	b.n	800578c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fef9 	bl	8005584 <USB_GetHostSpeed>
 8005792:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005794:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005798:	2b02      	cmp	r3, #2
 800579a:	d106      	bne.n	80057aa <USB_HC_Init+0x1d6>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d003      	beq.n	80057aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e001      	b.n	80057ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ae:	787b      	ldrb	r3, [r7, #1]
 80057b0:	059b      	lsls	r3, r3, #22
 80057b2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057b6:	78bb      	ldrb	r3, [r7, #2]
 80057b8:	02db      	lsls	r3, r3, #11
 80057ba:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057c4:	049b      	lsls	r3, r3, #18
 80057c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80057cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d003      	beq.n	80057fe <USB_HC_Init+0x22a>
 80057f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10f      	bne.n	800581e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	440a      	add	r2, r1
 8005814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800581c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40040000 	.word	0x40040000

0800582c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	; 0x30
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005848:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a5d      	ldr	r2, [pc, #372]	; (80059c4 <USB_HC_StartXfer+0x198>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d12f      	bne.n	80058b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d11c      	bne.n	8005892 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	7c9b      	ldrb	r3, [r3, #18]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <USB_HC_StartXfer+0x3c>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	7c9b      	ldrb	r3, [r3, #18]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d124      	bne.n	80058b2 <USB_HC_StartXfer+0x86>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	799b      	ldrb	r3, [r3, #6]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d120      	bne.n	80058b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	440a      	add	r2, r1
 8005886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60d3      	str	r3, [r2, #12]
 8005890:	e00f      	b.n	80058b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	791b      	ldrb	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <USB_HC_StartXfer+0x86>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	795b      	ldrb	r3, [r3, #5]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	4619      	mov	r1, r3
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fb6b 	bl	8005f84 <USB_DoPing>
        return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e232      	b.n	8005d18 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	799b      	ldrb	r3, [r3, #6]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d158      	bne.n	800596c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80058ba:	2301      	movs	r3, #1
 80058bc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	78db      	ldrb	r3, [r3, #3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	8a92      	ldrh	r2, [r2, #20]
 80058cc:	fb03 f202 	mul.w	r2, r3, r2
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61da      	str	r2, [r3, #28]
 80058d4:	e07c      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	7c9b      	ldrb	r3, [r3, #18]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d130      	bne.n	8005940 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	2bbc      	cmp	r3, #188	; 0xbc
 80058e4:	d918      	bls.n	8005918 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	8a9b      	ldrh	r3, [r3, #20]
 80058ea:	461a      	mov	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d003      	beq.n	8005908 <USB_HC_StartXfer+0xdc>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d103      	bne.n	8005910 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2202      	movs	r2, #2
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	e05f      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2201      	movs	r2, #1
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e05b      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d007      	beq.n	8005938 <USB_HC_StartXfer+0x10c>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d003      	beq.n	8005938 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2204      	movs	r2, #4
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e04b      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2203      	movs	r2, #3
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e047      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10d      	bne.n	8005962 <USB_HC_StartXfer+0x136>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	8a92      	ldrh	r2, [r2, #20]
 800594e:	4293      	cmp	r3, r2
 8005950:	d907      	bls.n	8005962 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	8a92      	ldrh	r2, [r2, #20]
 8005958:	fb03 f202 	mul.w	r2, r3, r2
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61da      	str	r2, [r3, #28]
 8005960:	e036      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	61da      	str	r2, [r3, #28]
 800596a:	e031      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	8a92      	ldrh	r2, [r2, #20]
 800597c:	4413      	add	r3, r2
 800597e:	3b01      	subs	r3, #1
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	8a92      	ldrh	r2, [r2, #20]
 8005984:	fbb3 f3f2 	udiv	r3, r3, r2
 8005988:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800598a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800598c:	8b7b      	ldrh	r3, [r7, #26]
 800598e:	429a      	cmp	r2, r3
 8005990:	d90b      	bls.n	80059aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	8a92      	ldrh	r2, [r2, #20]
 800599c:	fb03 f202 	mul.w	r2, r3, r2
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61da      	str	r2, [r3, #28]
 80059a4:	e001      	b.n	80059aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80059a6:	2301      	movs	r3, #1
 80059a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	78db      	ldrb	r3, [r3, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	8a92      	ldrh	r2, [r2, #20]
 80059b8:	fb03 f202 	mul.w	r2, r3, r2
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61da      	str	r2, [r3, #28]
 80059c0:	e006      	b.n	80059d0 <USB_HC_StartXfer+0x1a4>
 80059c2:	bf00      	nop
 80059c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059da:	04d9      	lsls	r1, r3, #19
 80059dc:	4ba3      	ldr	r3, [pc, #652]	; (8005c6c <USB_HC_StartXfer+0x440>)
 80059de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	7d9b      	ldrb	r3, [r3, #22]
 80059e6:	075b      	lsls	r3, r3, #29
 80059e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	0148      	lsls	r0, r1, #5
 80059f0:	6a39      	ldr	r1, [r7, #32]
 80059f2:	4401      	add	r1, r0
 80059f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	460a      	mov	r2, r1
 8005a14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	7e7b      	ldrb	r3, [r7, #25]
 8005a5e:	075b      	lsls	r3, r3, #29
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	0148      	lsls	r0, r1, #5
 8005a64:	6a39      	ldr	r1, [r7, #32]
 8005a66:	4401      	add	r1, r0
 8005a68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	799b      	ldrb	r3, [r3, #6]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 80c3 	bne.w	8005c00 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	7c5b      	ldrb	r3, [r3, #17]
 8005a7e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a84:	4313      	orrs	r3, r2
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a96:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ab6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	79db      	ldrb	r3, [r3, #7]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d123      	bne.n	8005b08 <USB_HC_StartXfer+0x2dc>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11f      	bne.n	8005b08 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b06:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	7c9b      	ldrb	r3, [r3, #18]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d003      	beq.n	8005b18 <USB_HC_StartXfer+0x2ec>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	7c9b      	ldrb	r3, [r3, #18]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d117      	bne.n	8005b48 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d113      	bne.n	8005b48 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10f      	bne.n	8005b48 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b46:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	7c9b      	ldrb	r3, [r3, #18]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d162      	bne.n	8005c16 <USB_HC_StartXfer+0x3ea>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	78db      	ldrb	r3, [r3, #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d15e      	bne.n	8005c16 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d858      	bhi.n	8005c14 <USB_HC_StartXfer+0x3e8>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <USB_HC_StartXfer+0x33c>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b9b 	.word	0x08005b9b
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bdf 	.word	0x08005bdf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b96:	6053      	str	r3, [r2, #4]
          break;
 8005b98:	e03d      	b.n	8005c16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb4:	f043 030e 	orr.w	r3, r3, #14
 8005bb8:	6053      	str	r3, [r2, #4]
          break;
 8005bba:	e02c      	b.n	8005c16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bda:	6053      	str	r3, [r2, #4]
          break;
 8005bdc:	e01b      	b.n	8005c16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bfc:	6053      	str	r3, [r2, #4]
          break;
 8005bfe:	e00a      	b.n	8005c16 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6053      	str	r3, [r2, #4]
 8005c12:	e000      	b.n	8005c16 <USB_HC_StartXfer+0x3ea>
          break;
 8005c14:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	78db      	ldrb	r3, [r3, #3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	e003      	b.n	8005c48 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c46:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c4e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e055      	b.n	8005d18 <USB_HC_StartXfer+0x4ec>
 8005c6c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	78db      	ldrb	r3, [r3, #3]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d14e      	bne.n	8005d16 <USB_HC_StartXfer+0x4ea>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d04a      	beq.n	8005d16 <USB_HC_StartXfer+0x4ea>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	79db      	ldrb	r3, [r3, #7]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d146      	bne.n	8005d16 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	7c9b      	ldrb	r3, [r3, #18]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d831      	bhi.n	8005cf4 <USB_HC_StartXfer+0x4c8>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <USB_HC_StartXfer+0x46c>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005ccd 	.word	0x08005ccd
 8005ca0:	08005ca9 	.word	0x08005ca9
 8005ca4:	08005ccd 	.word	0x08005ccd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	3303      	adds	r3, #3
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005cb2:	8afa      	ldrh	r2, [r7, #22]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d91c      	bls.n	8005cf8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cca:	e015      	b.n	8005cf8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005cd6:	8afa      	ldrh	r2, [r7, #22]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d90a      	bls.n	8005cfc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cf2:	e003      	b.n	8005cfc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <USB_HC_StartXfer+0x4d2>
        break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <USB_HC_StartXfer+0x4d2>
        break;
 8005cfc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6999      	ldr	r1, [r3, #24]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	785a      	ldrb	r2, [r3, #1]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	9000      	str	r0, [sp, #0]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff f9c9 	bl	80050a8 <USB_WritePacket>
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	b29b      	uxth	r3, r3
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b089      	sub	sp, #36	; 0x24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0c9b      	lsrs	r3, r3, #18
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	0fdb      	lsrs	r3, r3, #31
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0fdb      	lsrs	r3, r3, #31
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d10d      	bne.n	8005dc4 <USB_HC_Halt+0x82>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <USB_HC_Halt+0x82>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d002      	beq.n	8005dc0 <USB_HC_Halt+0x7e>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d101      	bne.n	8005dc4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e0d8      	b.n	8005f76 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <USB_HC_Halt+0x8e>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d173      	bne.n	8005eb8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d14a      	bne.n	8005e92 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d133      	bne.n	8005e70 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e46:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e54:	d82e      	bhi.n	8005eb4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d0ec      	beq.n	8005e48 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e6e:	e081      	b.n	8005f74 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e90:	e070      	b.n	8005f74 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eb2:	e05f      	b.n	8005f74 <USB_HC_Halt+0x232>
            break;
 8005eb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eb6:	e05d      	b.n	8005f74 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d133      	bne.n	8005f50 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f34:	d81d      	bhi.n	8005f72 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d0ec      	beq.n	8005f28 <USB_HC_Halt+0x1e6>
 8005f4e:	e011      	b.n	8005f74 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e000      	b.n	8005f74 <USB_HC_Halt+0x232>
          break;
 8005f72:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	04da      	lsls	r2, r3, #19
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <USB_DoPing+0x74>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	1ff80000 	.word	0x1ff80000

08005ffc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fe ff8c 	bl	8004f2e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006016:	2110      	movs	r1, #16
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fe ffe5 	bl	8004fe8 <USB_FlushTxFifo>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff f80f 	bl	800504c <USB_FlushRxFifo>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e01f      	b.n	800607e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800605c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006064:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	461a      	mov	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	3301      	adds	r3, #1
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b0f      	cmp	r3, #15
 8006082:	d9dc      	bls.n	800603e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e034      	b.n	80060f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	461a      	mov	r2, r3
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d0:	d80c      	bhi.n	80060ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e8:	d0ec      	beq.n	80060c4 <USB_StopHost+0xc8>
 80060ea:	e000      	b.n	80060ee <USB_StopHost+0xf2>
        break;
 80060ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d9c7      	bls.n	800608a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006100:	461a      	mov	r2, r3
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe fefb 	bl	8004f0c <USB_EnableGlobalInt>

  return ret;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b089      	sub	sp, #36	; 0x24
 8006124:	af04      	add	r7, sp, #16
 8006126:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006128:	2301      	movs	r3, #1
 800612a:	2202      	movs	r2, #2
 800612c:	2102      	movs	r1, #2
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fc85 	bl	8006a3e <USBH_FindInterface>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2bff      	cmp	r3, #255	; 0xff
 800613c:	d002      	beq.n	8006144 <USBH_CDC_InterfaceInit+0x24>
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d901      	bls.n	8006148 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006144:	2302      	movs	r3, #2
 8006146:	e13d      	b.n	80063c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc5a 	bl	8006a06 <USBH_SelectInterface>
 8006152:	4603      	mov	r3, r0
 8006154:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800615c:	2302      	movs	r3, #2
 800615e:	e131      	b.n	80063c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006166:	2050      	movs	r0, #80	; 0x50
 8006168:	f002 fb66 	bl	8008838 <malloc>
 800616c:	4603      	mov	r3, r0
 800616e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006180:	2302      	movs	r3, #2
 8006182:	e11f      	b.n	80063c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006184:	2250      	movs	r2, #80	; 0x50
 8006186:	2100      	movs	r1, #0
 8006188:	68b8      	ldr	r0, [r7, #8]
 800618a:	f002 fc11 	bl	80089b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	211a      	movs	r1, #26
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	4413      	add	r3, r2
 800619a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b25b      	sxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da15      	bge.n	80061d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	211a      	movs	r1, #26
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 ffce 	bl	800817a <USBH_AllocPipe>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	7819      	ldrb	r1, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	7858      	ldrb	r0, [r3, #1]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	8952      	ldrh	r2, [r2, #10]
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	2203      	movs	r2, #3
 8006202:	9201      	str	r2, [sp, #4]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4623      	mov	r3, r4
 8006208:	4602      	mov	r2, r0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 ff86 	bl	800811c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2200      	movs	r2, #0
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f002 fa87 	bl	800872c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800621e:	2300      	movs	r3, #0
 8006220:	2200      	movs	r2, #0
 8006222:	210a      	movs	r1, #10
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc0a 	bl	8006a3e <USBH_FindInterface>
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	2bff      	cmp	r3, #255	; 0xff
 8006232:	d002      	beq.n	800623a <USBH_CDC_InterfaceInit+0x11a>
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d901      	bls.n	800623e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800623a:	2302      	movs	r3, #2
 800623c:	e0c2      	b.n	80063c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	211a      	movs	r1, #26
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	4413      	add	r3, r2
 800624a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b25b      	sxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	da16      	bge.n	8006284 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	211a      	movs	r1, #26
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	211a      	movs	r1, #26
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800627c:	881a      	ldrh	r2, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	835a      	strh	r2, [r3, #26]
 8006282:	e015      	b.n	80062b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	211a      	movs	r1, #26
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	211a      	movs	r1, #26
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	211a      	movs	r1, #26
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da16      	bge.n	80062f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	211a      	movs	r1, #26
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	211a      	movs	r1, #26
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	835a      	strh	r2, [r3, #26]
 80062f4:	e015      	b.n	8006322 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	211a      	movs	r1, #26
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	4413      	add	r3, r2
 8006302:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	211a      	movs	r1, #26
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	4413      	add	r3, r2
 8006318:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	7b9b      	ldrb	r3, [r3, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 ff26 	bl	800817a <USBH_AllocPipe>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	7bdb      	ldrb	r3, [r3, #15]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 ff1c 	bl	800817a <USBH_AllocPipe>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	7b59      	ldrb	r1, [r3, #13]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	7b98      	ldrb	r0, [r3, #14]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	8b12      	ldrh	r2, [r2, #24]
 8006362:	9202      	str	r2, [sp, #8]
 8006364:	2202      	movs	r2, #2
 8006366:	9201      	str	r2, [sp, #4]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4623      	mov	r3, r4
 800636c:	4602      	mov	r2, r0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fed4 	bl	800811c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	7b19      	ldrb	r1, [r3, #12]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	7bd8      	ldrb	r0, [r3, #15]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	8b52      	ldrh	r2, [r2, #26]
 800638c:	9202      	str	r2, [sp, #8]
 800638e:	2202      	movs	r2, #2
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4623      	mov	r3, r4
 8006396:	4602      	mov	r2, r0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 febf 	bl	800811c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	7b5b      	ldrb	r3, [r3, #13]
 80063aa:	2200      	movs	r2, #0
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 f9bc 	bl	800872c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7b1b      	ldrb	r3, [r3, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f002 f9b5 	bl	800872c <USBH_LL_SetToggle>

  return USBH_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}

080063cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 feb4 	bl	800815a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fedf 	bl	80081bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	7b1b      	ldrb	r3, [r3, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00e      	beq.n	800642a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	7b1b      	ldrb	r3, [r3, #12]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fea1 	bl	800815a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fecc 	bl	80081bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	7b5b      	ldrb	r3, [r3, #13]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00e      	beq.n	8006450 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	7b5b      	ldrb	r3, [r3, #13]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fe8e 	bl	800815a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	7b5b      	ldrb	r3, [r3, #13]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 feb9 	bl	80081bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	4618      	mov	r0, r3
 8006466:	f002 f9ef 	bl	8008848 <free>
    phost->pActiveClass->pData = 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006470:	2200      	movs	r2, #0
 8006472:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3340      	adds	r3, #64	; 0x40
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8b1 	bl	80065fe <GetLineCoding>
 800649c:	4603      	mov	r3, r0
 800649e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ac:	2102      	movs	r1, #2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80064b2:	7afb      	ldrb	r3, [r7, #11]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d877      	bhi.n	80065d0 <USBH_CDC_Process+0x114>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <USBH_CDC_Process+0x2c>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064fd 	.word	0x080064fd
 80064ec:	08006503 	.word	0x08006503
 80064f0:	08006533 	.word	0x08006533
 80064f4:	080065a7 	.word	0x080065a7
 80064f8:	080065b5 	.word	0x080065b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e06d      	b.n	80065de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f897 	bl	800663c <SetLineCoding>
 800650e:	4603      	mov	r3, r0
 8006510:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006520:	e058      	b.n	80065d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d055      	beq.n	80065d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2204      	movs	r2, #4
 800652c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006530:	e050      	b.n	80065d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	3340      	adds	r3, #64	; 0x40
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f860 	bl	80065fe <GetLineCoding>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d126      	bne.n	8006596 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	791b      	ldrb	r3, [r3, #4]
 800655c:	429a      	cmp	r2, r3
 800655e:	d13b      	bne.n	80065d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800656c:	429a      	cmp	r2, r3
 800656e:	d133      	bne.n	80065d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800657c:	429a      	cmp	r2, r3
 800657e:	d12b      	bne.n	80065d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d124      	bne.n	80065d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f958 	bl	8006844 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006594:	e020      	b.n	80065d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d01d      	beq.n	80065d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2204      	movs	r2, #4
 80065a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80065a4:	e018      	b.n	80065d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f867 	bl	800667a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f8da 	bl	8006766 <CDC_ProcessReception>
      break;
 80065b2:	e014      	b.n	80065de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f822 	bl	8007600 <USBH_ClrFeature>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80065ce:	e005      	b.n	80065dc <USBH_CDC_Process+0x120>

    default:
      break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <USBH_CDC_Process+0x122>
      break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <USBH_CDC_Process+0x122>
      break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <USBH_CDC_Process+0x122>
      break;
 80065dc:	bf00      	nop

  }

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	22a1      	movs	r2, #161	; 0xa1
 800660c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2221      	movs	r2, #33	; 0x21
 8006612:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2207      	movs	r2, #7
 8006624:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2207      	movs	r2, #7
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fb23 	bl	8007c78 <USBH_CtlReq>
 8006632:	4603      	mov	r3, r0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2221      	movs	r2, #33	; 0x21
 800664a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2207      	movs	r2, #7
 8006662:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2207      	movs	r2, #7
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fb04 	bl	8007c78 <USBH_CtlReq>
 8006670:	4603      	mov	r3, r0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af02      	add	r7, sp, #8
 8006680:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800668c:	2300      	movs	r3, #0
 800668e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006696:	2b01      	cmp	r3, #1
 8006698:	d002      	beq.n	80066a0 <CDC_ProcessTransmission+0x26>
 800669a:	2b02      	cmp	r3, #2
 800669c:	d023      	beq.n	80066e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800669e:	e05e      	b.n	800675e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	8b12      	ldrh	r2, [r2, #24]
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d90b      	bls.n	80066c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	69d9      	ldr	r1, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8b1a      	ldrh	r2, [r3, #24]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	7b5b      	ldrb	r3, [r3, #13]
 80066b8:	2001      	movs	r0, #1
 80066ba:	9000      	str	r0, [sp, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 fcea 	bl	8008096 <USBH_BulkSendData>
 80066c2:	e00b      	b.n	80066dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	7b5b      	ldrb	r3, [r3, #13]
 80066d2:	2001      	movs	r0, #1
 80066d4:	9000      	str	r0, [sp, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fcdd 	bl	8008096 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066e4:	e03b      	b.n	800675e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	7b5b      	ldrb	r3, [r3, #13]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fff3 	bl	80086d8 <USBH_LL_GetURBState>
 80066f2:	4603      	mov	r3, r0
 80066f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d128      	bne.n	800674e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	8b12      	ldrh	r2, [r2, #24]
 8006704:	4293      	cmp	r3, r2
 8006706:	d90e      	bls.n	8006726 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	8b12      	ldrh	r2, [r2, #24]
 8006710:	1a9a      	subs	r2, r3, r2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	8b12      	ldrh	r2, [r2, #24]
 800671e:	441a      	add	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	61da      	str	r2, [r3, #28]
 8006724:	e002      	b.n	800672c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800673c:	e00e      	b.n	800675c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f868 	bl	800681c <USBH_CDC_TransmitCallback>
      break;
 800674c:	e006      	b.n	800675c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800674e:	7afb      	ldrb	r3, [r7, #11]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d103      	bne.n	800675c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800675c:	bf00      	nop
  }
}
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006778:	2300      	movs	r3, #0
 800677a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006782:	2b03      	cmp	r3, #3
 8006784:	d002      	beq.n	800678c <CDC_ProcessReception+0x26>
 8006786:	2b04      	cmp	r3, #4
 8006788:	d00e      	beq.n	80067a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800678a:	e043      	b.n	8006814 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6a19      	ldr	r1, [r3, #32]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	8b5a      	ldrh	r2, [r3, #26]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	7b1b      	ldrb	r3, [r3, #12]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fca1 	bl	80080e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2204      	movs	r2, #4
 80067a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80067a6:	e035      	b.n	8006814 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	7b1b      	ldrb	r3, [r3, #12]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 ff92 	bl	80086d8 <USBH_LL_GetURBState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d129      	bne.n	8006812 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	7b1b      	ldrb	r3, [r3, #12]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fef5 	bl	80085b4 <USBH_LL_GetLastXferSize>
 80067ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d016      	beq.n	8006804 <CDC_ProcessReception+0x9e>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	8b5b      	ldrh	r3, [r3, #26]
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d910      	bls.n	8006804 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad2      	subs	r2, r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	441a      	add	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006802:	e006      	b.n	8006812 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f80f 	bl	8006830 <USBH_CDC_ReceiveCallback>
      break;
 8006812:	bf00      	nop
  }
}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800686c:	2302      	movs	r3, #2
 800686e:	e029      	b.n	80068c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	79fa      	ldrb	r2, [r7, #7]
 8006874:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f81f 	bl	80068cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 fdc5 	bl	800844c <USBH_LL_Init>

  return USBH_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e009      	b.n	80068f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	33e0      	adds	r3, #224	; 0xe0
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	2200      	movs	r2, #0
 80068ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b0f      	cmp	r3, #15
 80068f6:	d9f2      	bls.n	80068de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e009      	b.n	8006912 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006918:	d3f1      	bcc.n	80068fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2240      	movs	r2, #64	; 0x40
 800693e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	331c      	adds	r3, #28
 800696a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f002 f81d 	bl	80089b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f002 f814 	bl	80089b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f203 3326 	addw	r3, r3, #806	; 0x326
 800698e:	2212      	movs	r2, #18
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f002 f80c 	bl	80089b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800699e:	223e      	movs	r2, #62	; 0x3e
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f002 f804 	bl	80089b0 <memset>

  return USBH_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10e      	bne.n	80069ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	33de      	adds	r3, #222	; 0xde
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e004      	b.n	80069f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069ee:	2302      	movs	r3, #2
 80069f0:	73fb      	strb	r3, [r7, #15]
 80069f2:	e001      	b.n	80069f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d204      	bcs.n	8006a2c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006a2a:	e001      	b.n	8006a30 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	70fb      	strb	r3, [r7, #3]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70bb      	strb	r3, [r7, #2]
 8006a54:	4613      	mov	r3, r2
 8006a56:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a66:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a68:	e025      	b.n	8006ab6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	221a      	movs	r2, #26
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	3308      	adds	r3, #8
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	3302      	adds	r3, #2
 8006a7a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	795b      	ldrb	r3, [r3, #5]
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d002      	beq.n	8006a8c <USBH_FindInterface+0x4e>
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	2bff      	cmp	r3, #255	; 0xff
 8006a8a:	d111      	bne.n	8006ab0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a90:	78ba      	ldrb	r2, [r7, #2]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d002      	beq.n	8006a9c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a96:	78bb      	ldrb	r3, [r7, #2]
 8006a98:	2bff      	cmp	r3, #255	; 0xff
 8006a9a:	d109      	bne.n	8006ab0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006aa0:	787a      	ldrb	r2, [r7, #1]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d002      	beq.n	8006aac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006aa6:	787b      	ldrb	r3, [r7, #1]
 8006aa8:	2bff      	cmp	r3, #255	; 0xff
 8006aaa:	d101      	bne.n	8006ab0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	e006      	b.n	8006abe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d9d6      	bls.n	8006a6a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006abc:	23ff      	movs	r3, #255	; 0xff
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fcf6 	bl	80084c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006ad8:	2101      	movs	r1, #1
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fe0f 	bl	80086fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af04      	add	r7, sp, #16
 8006af2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d102      	bne.n	8006b0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b0b      	cmp	r3, #11
 8006b16:	f200 81be 	bhi.w	8006e96 <USBH_Process+0x3aa>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <USBH_Process+0x34>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b83 	.word	0x08006b83
 8006b28:	08006beb 	.word	0x08006beb
 8006b2c:	08006e31 	.word	0x08006e31
 8006b30:	08006e97 	.word	0x08006e97
 8006b34:	08006c8f 	.word	0x08006c8f
 8006b38:	08006dd7 	.word	0x08006dd7
 8006b3c:	08006cc5 	.word	0x08006cc5
 8006b40:	08006ce5 	.word	0x08006ce5
 8006b44:	08006d05 	.word	0x08006d05
 8006b48:	08006d49 	.word	0x08006d49
 8006b4c:	08006e19 	.word	0x08006e19
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 819e 	beq.w	8006e9a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b64:	20c8      	movs	r0, #200	; 0xc8
 8006b66:	f001 fe14 	bl	8008792 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fd07 	bl	800857e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b80:	e18b      	b.n	8006e9a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d107      	bne.n	8006b9c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b9a:	e18d      	b.n	8006eb8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba6:	d914      	bls.n	8006bd2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d903      	bls.n	8006bca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220d      	movs	r2, #13
 8006bc6:	701a      	strb	r2, [r3, #0]
      break;
 8006bc8:	e176      	b.n	8006eb8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
      break;
 8006bd0:	e172      	b.n	8006eb8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bd8:	f103 020a 	add.w	r2, r3, #10
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006be2:	200a      	movs	r0, #10
 8006be4:	f001 fdd5 	bl	8008792 <USBH_Delay>
      break;
 8006be8:	e166      	b.n	8006eb8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c00:	2064      	movs	r0, #100	; 0x64
 8006c02:	f001 fdc6 	bl	8008792 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fc92 	bl	8008530 <USBH_LL_GetSpeed>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2205      	movs	r2, #5
 8006c1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 faab 	bl	800817a <USBH_AllocPipe>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c2c:	2180      	movs	r1, #128	; 0x80
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 faa3 	bl	800817a <USBH_AllocPipe>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7919      	ldrb	r1, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c50:	b292      	uxth	r2, r2
 8006c52:	9202      	str	r2, [sp, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	9201      	str	r2, [sp, #4]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2280      	movs	r2, #128	; 0x80
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fa5c 	bl	800811c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7959      	ldrb	r1, [r3, #5]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c78:	b292      	uxth	r2, r2
 8006c7a:	9202      	str	r2, [sp, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	9201      	str	r2, [sp, #4]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	4603      	mov	r3, r0
 8006c84:	2200      	movs	r2, #0
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fa48 	bl	800811c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c8c:	e114      	b.n	8006eb8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f918 	bl	8006ec4 <USBH_HandleEnum>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 80fe 	bne.w	8006e9e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d103      	bne.n	8006cbc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cba:	e0f0      	b.n	8006e9e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2207      	movs	r2, #7
 8006cc0:	701a      	strb	r2, [r3, #0]
      break;
 8006cc2:	e0ec      	b.n	8006e9e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80e9 	beq.w	8006ea2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2208      	movs	r2, #8
 8006ce0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ce2:	e0de      	b.n	8006ea2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fc3f 	bl	8007572 <USBH_SetCfg>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 80d5 	bne.w	8006ea6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2209      	movs	r2, #9
 8006d00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d02:	e0d0      	b.n	8006ea6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fc4f 	bl	80075b8 <USBH_SetFeature>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	220a      	movs	r2, #10
 8006d2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d2c:	e0bd      	b.n	8006eaa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 80b9 	bne.w	8006eaa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	220a      	movs	r2, #10
 8006d3c:	701a      	strb	r2, [r3, #0]
      break;
 8006d3e:	e0b4      	b.n	8006eaa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	220a      	movs	r2, #10
 8006d44:	701a      	strb	r2, [r3, #0]
      break;
 8006d46:	e0b0      	b.n	8006eaa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80ad 	beq.w	8006eae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e016      	b.n	8006d90 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d62:	7bfa      	ldrb	r2, [r7, #15]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	32de      	adds	r2, #222	; 0xde
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	791a      	ldrb	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d108      	bne.n	8006d8a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d78:	7bfa      	ldrb	r2, [r7, #15]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32de      	adds	r2, #222	; 0xde
 8006d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006d88:	e005      	b.n	8006d96 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0e5      	beq.n	8006d62 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d016      	beq.n	8006dce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2206      	movs	r2, #6
 8006db6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dc4:	e073      	b.n	8006eae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	220d      	movs	r2, #13
 8006dca:	701a      	strb	r2, [r3, #0]
      break;
 8006dcc:	e06f      	b.n	8006eae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220d      	movs	r2, #13
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e06b      	b.n	8006eae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	220b      	movs	r2, #11
 8006dfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dfe:	e058      	b.n	8006eb2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d154      	bne.n	8006eb2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	220d      	movs	r2, #13
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	e050      	b.n	8006eb2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	220d      	movs	r2, #13
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e04c      	b.n	8006eb2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d049      	beq.n	8006eb6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
      }
      break;
 8006e2e:	e042      	b.n	8006eb6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fd47 	bl	80068cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e6c:	2105      	movs	r1, #5
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d107      	bne.n	8006e8e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fe1f 	bl	8006aca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e8c:	e014      	b.n	8006eb8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fb18 	bl	80084c4 <USBH_LL_Start>
      break;
 8006e94:	e010      	b.n	8006eb8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e96:	bf00      	nop
 8006e98:	e00e      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e00c      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e00a      	b.n	8006eb8 <USBH_Process+0x3cc>
    break;
 8006ea2:	bf00      	nop
 8006ea4:	e008      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e006      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006eaa:	bf00      	nop
 8006eac:	e004      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <USBH_Process+0x3cc>
      break;
 8006eb6:	bf00      	nop
  }
  return USBH_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af04      	add	r7, sp, #16
 8006eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b07      	cmp	r3, #7
 8006eda:	f200 81c1 	bhi.w	8007260 <USBH_HandleEnum+0x39c>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <USBH_HandleEnum+0x20>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f05 	.word	0x08006f05
 8006ee8:	08006fc3 	.word	0x08006fc3
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	080070bb 	.word	0x080070bb
 8006ef4:	08007125 	.word	0x08007125
 8006ef8:	08007195 	.word	0x08007195
 8006efc:	080071db 	.word	0x080071db
 8006f00:	08007221 	.word	0x08007221
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f04:	2108      	movs	r1, #8
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa50 	bl	80073ac <USBH_Get_DevDesc>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d130      	bne.n	8006f78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7919      	ldrb	r1, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	9202      	str	r2, [sp, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4603      	mov	r3, r0
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f8e7 	bl	800811c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7959      	ldrb	r1, [r3, #5]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f62:	b292      	uxth	r2, r2
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f8d3 	bl	800811c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f76:	e175      	b.n	8007264 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	f040 8172 	bne.w	8007264 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f86:	3301      	adds	r3, #1
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d903      	bls.n	8006fa2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	220d      	movs	r2, #13
 8006f9e:	701a      	strb	r2, [r3, #0]
      break;
 8006fa0:	e160      	b.n	8007264 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	795b      	ldrb	r3, [r3, #5]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f907 	bl	80081bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	791b      	ldrb	r3, [r3, #4]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f901 	bl	80081bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
      break;
 8006fc0:	e150      	b.n	8007264 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006fc2:	2112      	movs	r1, #18
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f9f1 	bl	80073ac <USBH_Get_DevDesc>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fda:	e145      	b.n	8007268 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	f040 8142 	bne.w	8007268 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fea:	3301      	adds	r3, #1
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d903      	bls.n	8007006 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	220d      	movs	r2, #13
 8007002:	701a      	strb	r2, [r3, #0]
      break;
 8007004:	e130      	b.n	8007268 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	795b      	ldrb	r3, [r3, #5]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f8d5 	bl	80081bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f8cf 	bl	80081bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
      break;
 800702a:	e11d      	b.n	8007268 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa7b 	bl	800752a <USBH_SetAddress>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d132      	bne.n	80070a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800703e:	2002      	movs	r0, #2
 8007040:	f001 fba7 	bl	8008792 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2203      	movs	r2, #3
 8007050:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7919      	ldrb	r1, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007066:	b292      	uxth	r2, r2
 8007068:	9202      	str	r2, [sp, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	9201      	str	r2, [sp, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4603      	mov	r3, r0
 8007072:	2280      	movs	r2, #128	; 0x80
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f851 	bl	800811c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7959      	ldrb	r1, [r3, #5]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800708e:	b292      	uxth	r2, r2
 8007090:	9202      	str	r2, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	9201      	str	r2, [sp, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4603      	mov	r3, r0
 800709a:	2200      	movs	r2, #0
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f83d 	bl	800811c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070a2:	e0e3      	b.n	800726c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	f040 80e0 	bne.w	800726c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	220d      	movs	r2, #13
 80070b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	705a      	strb	r2, [r3, #1]
      break;
 80070b8:	e0d8      	b.n	800726c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070ba:	2109      	movs	r1, #9
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9a1 	bl	8007404 <USBH_Get_CfgDesc>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070d2:	e0cd      	b.n	8007270 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	f040 80ca 	bne.w	8007270 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070e2:	3301      	adds	r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d903      	bls.n	80070fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220d      	movs	r2, #13
 80070fa:	701a      	strb	r2, [r3, #0]
      break;
 80070fc:	e0b8      	b.n	8007270 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	795b      	ldrb	r3, [r3, #5]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f859 	bl	80081bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	791b      	ldrb	r3, [r3, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f853 	bl	80081bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
      break;
 8007122:	e0a5      	b.n	8007270 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f969 	bl	8007404 <USBH_Get_CfgDesc>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2205      	movs	r2, #5
 8007140:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007142:	e097      	b.n	8007274 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b03      	cmp	r3, #3
 8007148:	f040 8094 	bne.w	8007274 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007152:	3301      	adds	r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007162:	2b03      	cmp	r3, #3
 8007164:	d903      	bls.n	800716e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	220d      	movs	r2, #13
 800716a:	701a      	strb	r2, [r3, #0]
      break;
 800716c:	e082      	b.n	8007274 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	795b      	ldrb	r3, [r3, #5]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f821 	bl	80081bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f81b 	bl	80081bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
      break;
 8007192:	e06f      	b.n	8007274 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800719a:	2b00      	cmp	r3, #0
 800719c:	d019      	beq.n	80071d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071aa:	23ff      	movs	r3, #255	; 0xff
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f953 	bl	8007458 <USBH_Get_StringDesc>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2206      	movs	r2, #6
 80071c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071c2:	e059      	b.n	8007278 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d156      	bne.n	8007278 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2206      	movs	r2, #6
 80071ce:	705a      	strb	r2, [r3, #1]
      break;
 80071d0:	e052      	b.n	8007278 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2206      	movs	r2, #6
 80071d6:	705a      	strb	r2, [r3, #1]
      break;
 80071d8:	e04e      	b.n	8007278 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d019      	beq.n	8007218 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071f0:	23ff      	movs	r3, #255	; 0xff
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f930 	bl	8007458 <USBH_Get_StringDesc>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2207      	movs	r2, #7
 8007206:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007208:	e038      	b.n	800727c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d135      	bne.n	800727c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2207      	movs	r2, #7
 8007214:	705a      	strb	r2, [r3, #1]
      break;
 8007216:	e031      	b.n	800727c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2207      	movs	r2, #7
 800721c:	705a      	strb	r2, [r3, #1]
      break;
 800721e:	e02d      	b.n	800727c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007236:	23ff      	movs	r3, #255	; 0xff
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f90d 	bl	8007458 <USBH_Get_StringDesc>
 800723e:	4603      	mov	r3, r0
 8007240:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800724c:	e018      	b.n	8007280 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d115      	bne.n	8007280 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
      break;
 8007258:	e012      	b.n	8007280 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
      break;
 800725e:	e00f      	b.n	8007280 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007260:	bf00      	nop
 8007262:	e00e      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007264:	bf00      	nop
 8007266:	e00c      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007268:	bf00      	nop
 800726a:	e00a      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 800726c:	bf00      	nop
 800726e:	e008      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007270:	bf00      	nop
 8007272:	e006      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007274:	bf00      	nop
 8007276:	e004      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007278:	bf00      	nop
 800727a:	e002      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 800727c:	bf00      	nop
 800727e:	e000      	b.n	8007282 <USBH_HandleEnum+0x3be>
      break;
 8007280:	bf00      	nop
  }
  return Status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f804 	bl	80072ce <USBH_HandleSof>
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b0b      	cmp	r3, #11
 80072de:	d10a      	bne.n	80072f6 <USBH_HandleSof+0x28>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
  }
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800730e:	bf00      	nop
}
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800732a:	bf00      	nop
}
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f8b8 	bl	80084fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 ff13 	bl	80081bc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	795b      	ldrb	r3, [r3, #5]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ff0d 	bl	80081bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80073b8:	887b      	ldrh	r3, [r7, #2]
 80073ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073be:	d901      	bls.n	80073c4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e01b      	b.n	80073fc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f872 	bl	80074c0 <USBH_GetDescriptor>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073ec:	887a      	ldrh	r2, [r7, #2]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f929 	bl	8007648 <USBH_ParseDevDesc>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af02      	add	r7, sp, #8
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	331c      	adds	r3, #28
 8007414:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007416:	887b      	ldrh	r3, [r7, #2]
 8007418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741c:	d901      	bls.n	8007422 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800741e:	2303      	movs	r3, #3
 8007420:	e016      	b.n	8007450 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800742c:	2100      	movs	r1, #0
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f846 	bl	80074c0 <USBH_GetDescriptor>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d107      	bne.n	800744e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	461a      	mov	r2, r3
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f9b3 	bl	80077b0 <USBH_ParseCfgDesc>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	460b      	mov	r3, r1
 8007466:	72fb      	strb	r3, [r7, #11]
 8007468:	4613      	mov	r3, r2
 800746a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800746c:	893b      	ldrh	r3, [r7, #8]
 800746e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007472:	d802      	bhi.n	800747a <USBH_Get_StringDesc+0x22>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800747a:	2303      	movs	r3, #3
 800747c:	e01c      	b.n	80074b8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007486:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800748e:	893b      	ldrh	r3, [r7, #8]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	460b      	mov	r3, r1
 8007494:	2100      	movs	r1, #0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f812 	bl	80074c0 <USBH_GetDescriptor>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d107      	bne.n	80074b6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074ac:	893a      	ldrh	r2, [r7, #8]
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fb93 	bl	8007bdc <USBH_ParseStringDesc>
  }

  return status;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	607b      	str	r3, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	72fb      	strb	r3, [r7, #11]
 80074ce:	4613      	mov	r3, r2
 80074d0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	789b      	ldrb	r3, [r3, #2]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d11c      	bne.n	8007514 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2206      	movs	r2, #6
 80074ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	893a      	ldrh	r2, [r7, #8]
 80074f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80074f2:	893b      	ldrh	r3, [r7, #8]
 80074f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fc:	d104      	bne.n	8007508 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f240 4209 	movw	r2, #1033	; 0x409
 8007504:	829a      	strh	r2, [r3, #20]
 8007506:	e002      	b.n	800750e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8b3a      	ldrh	r2, [r7, #24]
 8007512:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007514:	8b3b      	ldrh	r3, [r7, #24]
 8007516:	461a      	mov	r2, r3
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fbac 	bl	8007c78 <USBH_CtlReq>
 8007520:	4603      	mov	r3, r0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	789b      	ldrb	r3, [r3, #2]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d10f      	bne.n	800755e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2205      	movs	r2, #5
 8007548:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800755e:	2200      	movs	r2, #0
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb88 	bl	8007c78 <USBH_CtlReq>
 8007568:	4603      	mov	r3, r0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	789b      	ldrb	r3, [r3, #2]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10e      	bne.n	80075a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2209      	movs	r2, #9
 8007590:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	887a      	ldrh	r2, [r7, #2]
 8007596:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075a4:	2200      	movs	r2, #0
 80075a6:	2100      	movs	r1, #0
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fb65 	bl	8007c78 <USBH_CtlReq>
 80075ae:	4603      	mov	r3, r0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	789b      	ldrb	r3, [r3, #2]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10f      	bne.n	80075ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2203      	movs	r2, #3
 80075d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb41 	bl	8007c78 <USBH_CtlReq>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	789b      	ldrb	r3, [r3, #2]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10f      	bne.n	8007634 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fb1d 	bl	8007c78 <USBH_CtlReq>
 800763e:	4603      	mov	r3, r0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	4613      	mov	r3, r2
 8007654:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f203 3326 	addw	r3, r3, #806	; 0x326
 800765c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007668:	2302      	movs	r3, #2
 800766a:	e098      	b.n	800779e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	785a      	ldrb	r2, [r3, #1]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3302      	adds	r3, #2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b29a      	uxth	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	3303      	adds	r3, #3
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	b29b      	uxth	r3, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	b29a      	uxth	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	791a      	ldrb	r2, [r3, #4]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	795a      	ldrb	r2, [r3, #5]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	799a      	ldrb	r2, [r3, #6]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	79da      	ldrb	r2, [r3, #7]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d11b      	bne.n	8007704 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	79db      	ldrb	r3, [r3, #7]
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	dc0f      	bgt.n	80076f4 <USBH_ParseDevDesc+0xac>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	db0f      	blt.n	80076f8 <USBH_ParseDevDesc+0xb0>
 80076d8:	3b08      	subs	r3, #8
 80076da:	4a34      	ldr	r2, [pc, #208]	; (80077ac <USBH_ParseDevDesc+0x164>)
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <USBH_ParseDevDesc+0xb8>
 80076f2:	e001      	b.n	80076f8 <USBH_ParseDevDesc+0xb0>
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d003      	beq.n	8007700 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2208      	movs	r2, #8
 80076fc:	71da      	strb	r2, [r3, #7]
        break;
 80076fe:	e000      	b.n	8007702 <USBH_ParseDevDesc+0xba>
        break;
 8007700:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007702:	e00e      	b.n	8007722 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770a:	2b02      	cmp	r3, #2
 800770c:	d107      	bne.n	800771e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	79db      	ldrb	r3, [r3, #7]
 8007712:	2b08      	cmp	r3, #8
 8007714:	d005      	beq.n	8007722 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2208      	movs	r2, #8
 800771a:	71da      	strb	r2, [r3, #7]
 800771c:	e001      	b.n	8007722 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800771e:	2303      	movs	r3, #3
 8007720:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d939      	bls.n	800779c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3308      	adds	r3, #8
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29a      	uxth	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3309      	adds	r3, #9
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	b29b      	uxth	r3, r3
 800773c:	4313      	orrs	r3, r2
 800773e:	b29a      	uxth	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	330a      	adds	r3, #10
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29a      	uxth	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	330b      	adds	r3, #11
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	b29b      	uxth	r3, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	b29a      	uxth	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	330c      	adds	r3, #12
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	b29a      	uxth	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	330d      	adds	r3, #13
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	b29b      	uxth	r3, r3
 8007774:	4313      	orrs	r3, r2
 8007776:	b29a      	uxth	r2, r3
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7b9a      	ldrb	r2, [r3, #14]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	7bda      	ldrb	r2, [r3, #15]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	7c1a      	ldrb	r2, [r3, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	7c5a      	ldrb	r2, [r3, #17]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	01000101 	.word	0x01000101

080077b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	; 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80077c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80077de:	2302      	movs	r3, #2
 80077e0:	e0db      	b.n	800799a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	785a      	ldrb	r2, [r3, #1]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3302      	adds	r3, #2
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3303      	adds	r3, #3
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	b29b      	uxth	r3, r3
 800780a:	4313      	orrs	r3, r2
 800780c:	b29b      	uxth	r3, r3
 800780e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007812:	bf28      	it	cs
 8007814:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007818:	b29a      	uxth	r2, r3
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	791a      	ldrb	r2, [r3, #4]
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	795a      	ldrb	r2, [r3, #5]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	799a      	ldrb	r2, [r3, #6]
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	79da      	ldrb	r2, [r3, #7]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	7a1a      	ldrb	r2, [r3, #8]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d002      	beq.n	8007854 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	2209      	movs	r2, #9
 8007852:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2b09      	cmp	r3, #9
 8007858:	f240 809d 	bls.w	8007996 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800785c:	2309      	movs	r3, #9
 800785e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007864:	e081      	b.n	800796a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007866:	f107 0316 	add.w	r3, r7, #22
 800786a:	4619      	mov	r1, r3
 800786c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800786e:	f000 f9e8 	bl	8007c42 <USBH_GetNextDesc>
 8007872:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d176      	bne.n	800796a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b09      	cmp	r3, #9
 8007882:	d002      	beq.n	800788a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2209      	movs	r2, #9
 8007888:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800788a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800788e:	221a      	movs	r2, #26
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	3308      	adds	r3, #8
 8007896:	6a3a      	ldr	r2, [r7, #32]
 8007898:	4413      	add	r3, r2
 800789a:	3302      	adds	r3, #2
 800789c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800789e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a0:	69f8      	ldr	r0, [r7, #28]
 80078a2:	f000 f87e 	bl	80079a2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078b0:	e043      	b.n	800793a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078b2:	f107 0316 	add.w	r3, r7, #22
 80078b6:	4619      	mov	r1, r3
 80078b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ba:	f000 f9c2 	bl	8007c42 <USBH_GetNextDesc>
 80078be:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d138      	bne.n	800793a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	795b      	ldrb	r3, [r3, #5]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d113      	bne.n	80078f8 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d003      	beq.n	80078e0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	799b      	ldrb	r3, [r3, #6]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d10b      	bne.n	80078f8 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	79db      	ldrb	r3, [r3, #7]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <USBH_ParseCfgDesc+0x150>
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	d007      	beq.n	8007900 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2209      	movs	r2, #9
 80078f4:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078f6:	e003      	b.n	8007900 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	2207      	movs	r2, #7
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e000      	b.n	8007902 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007900:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007906:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800790a:	3201      	adds	r2, #1
 800790c:	00d2      	lsls	r2, r2, #3
 800790e:	211a      	movs	r1, #26
 8007910:	fb01 f303 	mul.w	r3, r1, r3
 8007914:	4413      	add	r3, r2
 8007916:	3308      	adds	r3, #8
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	3304      	adds	r3, #4
 800791e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007922:	69b9      	ldr	r1, [r7, #24]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f870 	bl	8007a0a <USBH_ParseEPDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007934:	3301      	adds	r3, #1
 8007936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	791b      	ldrb	r3, [r3, #4]
 800793e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007942:	429a      	cmp	r2, r3
 8007944:	d204      	bcs.n	8007950 <USBH_ParseCfgDesc+0x1a0>
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	885a      	ldrh	r2, [r3, #2]
 800794a:	8afb      	ldrh	r3, [r7, #22]
 800794c:	429a      	cmp	r2, r3
 800794e:	d8b0      	bhi.n	80078b2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007958:	429a      	cmp	r2, r3
 800795a:	d201      	bcs.n	8007960 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800795c:	2303      	movs	r3, #3
 800795e:	e01c      	b.n	800799a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8007960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007964:	3301      	adds	r3, #1
 8007966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800796a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800796e:	2b01      	cmp	r3, #1
 8007970:	d805      	bhi.n	800797e <USBH_ParseCfgDesc+0x1ce>
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	885a      	ldrh	r2, [r3, #2]
 8007976:	8afb      	ldrh	r3, [r7, #22]
 8007978:	429a      	cmp	r2, r3
 800797a:	f63f af74 	bhi.w	8007866 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	791b      	ldrb	r3, [r3, #4]
 8007982:	2b02      	cmp	r3, #2
 8007984:	bf28      	it	cs
 8007986:	2302      	movcs	r3, #2
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800798e:	429a      	cmp	r2, r3
 8007990:	d201      	bcs.n	8007996 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8007992:	2303      	movs	r3, #3
 8007994:	e001      	b.n	800799a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8007996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800799a:	4618      	mov	r0, r3
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	785a      	ldrb	r2, [r3, #1]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	789a      	ldrb	r2, [r3, #2]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	78da      	ldrb	r2, [r3, #3]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3304      	adds	r3, #4
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	bf28      	it	cs
 80079d6:	2302      	movcs	r3, #2
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	795a      	ldrb	r2, [r3, #5]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	799a      	ldrb	r2, [r3, #6]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	79da      	ldrb	r2, [r3, #7]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	7a1a      	ldrb	r2, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	721a      	strb	r2, [r3, #8]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	781a      	ldrb	r2, [r3, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	785a      	ldrb	r2, [r3, #1]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	789a      	ldrb	r2, [r3, #2]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	78da      	ldrb	r2, [r3, #3]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3305      	adds	r3, #5
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	799a      	ldrb	r2, [r3, #6]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	889b      	ldrh	r3, [r3, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6e:	d804      	bhi.n	8007a7a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a78:	d901      	bls.n	8007a7e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d136      	bne.n	8007af6 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	78db      	ldrb	r3, [r3, #3]
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d108      	bne.n	8007aa6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	889b      	ldrh	r3, [r3, #4]
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a9c:	f240 8097 	bls.w	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	e093      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	78db      	ldrb	r3, [r3, #3]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d107      	bne.n	8007ac2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	889b      	ldrh	r3, [r3, #4]
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	f240 8089 	bls.w	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
 8007ac0:	e085      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	78db      	ldrb	r3, [r3, #3]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d005      	beq.n	8007ada <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	78db      	ldrb	r3, [r3, #3]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d10a      	bne.n	8007af0 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	799b      	ldrb	r3, [r3, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <USBH_ParseEPDesc+0xe0>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	799b      	ldrb	r3, [r3, #6]
 8007ae6:	2b10      	cmp	r3, #16
 8007ae8:	d970      	bls.n	8007bcc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007aee:	e06d      	b.n	8007bcc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007af0:	2303      	movs	r3, #3
 8007af2:	75fb      	strb	r3, [r7, #23]
 8007af4:	e06b      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d13c      	bne.n	8007b7a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	78db      	ldrb	r3, [r3, #3]
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d005      	beq.n	8007b18 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	78db      	ldrb	r3, [r3, #3]
 8007b10:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d106      	bne.n	8007b26 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	889b      	ldrh	r3, [r3, #4]
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d956      	bls.n	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007b20:	2303      	movs	r3, #3
 8007b22:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b24:	e053      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10e      	bne.n	8007b50 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	799b      	ldrb	r3, [r3, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d803      	bhi.n	8007b4a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d941      	bls.n	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	75fb      	strb	r3, [r7, #23]
 8007b4e:	e03e      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d10b      	bne.n	8007b74 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	799b      	ldrb	r3, [r3, #6]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d004      	beq.n	8007b6e <USBH_ParseEPDesc+0x164>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	889b      	ldrh	r3, [r3, #4]
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6c:	d32f      	bcc.n	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	75fb      	strb	r3, [r7, #23]
 8007b72:	e02c      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b74:	2303      	movs	r3, #3
 8007b76:	75fb      	strb	r3, [r7, #23]
 8007b78:	e029      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d120      	bne.n	8007bc6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	78db      	ldrb	r3, [r3, #3]
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	889b      	ldrh	r3, [r3, #4]
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d01a      	beq.n	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	75fb      	strb	r3, [r7, #23]
 8007b9c:	e017      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d10a      	bne.n	8007bc0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	799b      	ldrb	r3, [r3, #6]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <USBH_ParseEPDesc+0x1b0>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	889b      	ldrh	r3, [r3, #4]
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d909      	bls.n	8007bce <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	75fb      	strb	r3, [r7, #23]
 8007bbe:	e006      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	75fb      	strb	r3, [r7, #23]
 8007bc4:	e003      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	75fb      	strb	r3, [r7, #23]
 8007bca:	e000      	b.n	8007bce <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bcc:	bf00      	nop
  }

  return status;
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d120      	bne.n	8007c36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	1e9a      	subs	r2, r3, #2
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bf28      	it	cs
 8007c00:	4613      	movcs	r3, r2
 8007c02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3302      	adds	r3, #2
 8007c08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	82fb      	strh	r3, [r7, #22]
 8007c0e:	e00b      	b.n	8007c28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c10:	8afb      	ldrh	r3, [r7, #22]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c22:	8afb      	ldrh	r3, [r7, #22]
 8007c24:	3302      	adds	r3, #2
 8007c26:	82fb      	strh	r3, [r7, #22]
 8007c28:	8afa      	ldrh	r2, [r7, #22]
 8007c2a:	8abb      	ldrh	r3, [r7, #20]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d3ef      	bcc.n	8007c10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
  }
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	881a      	ldrh	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4413      	add	r3, r2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d002      	beq.n	8007c98 <USBH_CtlReq+0x20>
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d00f      	beq.n	8007cb6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c96:	e027      	b.n	8007ce8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	88fa      	ldrh	r2, [r7, #6]
 8007ca2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb4:	e018      	b.n	8007ce8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f81c 	bl	8007cf4 <USBH_HandleControl>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <USBH_CtlReq+0x54>
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d106      	bne.n	8007cda <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	761a      	strb	r2, [r3, #24]
      break;
 8007cd8:	e005      	b.n	8007ce6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d102      	bne.n	8007ce6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	709a      	strb	r2, [r3, #2]
      break;
 8007ce6:	bf00      	nop
  }
  return status;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7e1b      	ldrb	r3, [r3, #24]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	2b0a      	cmp	r3, #10
 8007d0c:	f200 8156 	bhi.w	8007fbc <USBH_HandleControl+0x2c8>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBH_HandleControl+0x24>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d45 	.word	0x08007d45
 8007d1c:	08007d5f 	.word	0x08007d5f
 8007d20:	08007dc9 	.word	0x08007dc9
 8007d24:	08007def 	.word	0x08007def
 8007d28:	08007e27 	.word	0x08007e27
 8007d2c:	08007e51 	.word	0x08007e51
 8007d30:	08007ea3 	.word	0x08007ea3
 8007d34:	08007ec5 	.word	0x08007ec5
 8007d38:	08007f01 	.word	0x08007f01
 8007d3c:	08007f27 	.word	0x08007f27
 8007d40:	08007f65 	.word	0x08007f65
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f103 0110 	add.w	r1, r3, #16
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	795b      	ldrb	r3, [r3, #5]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f943 	bl	8007fdc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	761a      	strb	r2, [r3, #24]
      break;
 8007d5c:	e139      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	795b      	ldrb	r3, [r3, #5]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fcb7 	bl	80086d8 <USBH_LL_GetURBState>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d11e      	bne.n	8007db2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7c1b      	ldrb	r3, [r3, #16]
 8007d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8adb      	ldrh	r3, [r3, #22]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d86:	7b7b      	ldrb	r3, [r7, #13]
 8007d88:	2b80      	cmp	r3, #128	; 0x80
 8007d8a:	d103      	bne.n	8007d94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d92:	e115      	b.n	8007fc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2205      	movs	r2, #5
 8007d98:	761a      	strb	r2, [r3, #24]
      break;
 8007d9a:	e111      	b.n	8007fc0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d9c:	7b7b      	ldrb	r3, [r7, #13]
 8007d9e:	2b80      	cmp	r3, #128	; 0x80
 8007da0:	d103      	bne.n	8007daa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2209      	movs	r2, #9
 8007da6:	761a      	strb	r2, [r3, #24]
      break;
 8007da8:	e10a      	b.n	8007fc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2207      	movs	r2, #7
 8007dae:	761a      	strb	r2, [r3, #24]
      break;
 8007db0:	e106      	b.n	8007fc0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d003      	beq.n	8007dc0 <USBH_HandleControl+0xcc>
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	f040 8100 	bne.w	8007fc0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	220b      	movs	r2, #11
 8007dc4:	761a      	strb	r2, [r3, #24]
      break;
 8007dc6:	e0fb      	b.n	8007fc0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6899      	ldr	r1, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	899a      	ldrh	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	791b      	ldrb	r3, [r3, #4]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f93a 	bl	800805a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2204      	movs	r2, #4
 8007dea:	761a      	strb	r2, [r3, #24]
      break;
 8007dec:	e0f1      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	791b      	ldrb	r3, [r3, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fc6f 	bl	80086d8 <USBH_LL_GetURBState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d102      	bne.n	8007e0a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2209      	movs	r2, #9
 8007e08:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d102      	bne.n	8007e16 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e10:	2303      	movs	r3, #3
 8007e12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e14:	e0d6      	b.n	8007fc4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	f040 80d3 	bne.w	8007fc4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	220b      	movs	r2, #11
 8007e22:	761a      	strb	r2, [r3, #24]
      break;
 8007e24:	e0ce      	b.n	8007fc4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6899      	ldr	r1, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	899a      	ldrh	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	2001      	movs	r0, #1
 8007e34:	9000      	str	r0, [sp, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8ea 	bl	8008010 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	761a      	strb	r2, [r3, #24]
      break;
 8007e4e:	e0c0      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	795b      	ldrb	r3, [r3, #5]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc3e 	bl	80086d8 <USBH_LL_GetURBState>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d103      	bne.n	8007e6e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2207      	movs	r2, #7
 8007e6a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e6c:	e0ac      	b.n	8007fc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	d105      	bne.n	8007e80 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	220c      	movs	r2, #12
 8007e78:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7e:	e0a3      	b.n	8007fc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d103      	bne.n	8007e8e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	761a      	strb	r2, [r3, #24]
      break;
 8007e8c:	e09c      	b.n	8007fc8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	f040 8099 	bne.w	8007fc8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	220b      	movs	r2, #11
 8007e9a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea0:	e092      	b.n	8007fc8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8d5 	bl	800805a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	761a      	strb	r2, [r3, #24]

      break;
 8007ec2:	e086      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fc04 	bl	80086d8 <USBH_LL_GetURBState>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d105      	bne.n	8007ee6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	220d      	movs	r2, #13
 8007ede:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ee4:	e072      	b.n	8007fcc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b04      	cmp	r3, #4
 8007eea:	d103      	bne.n	8007ef4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220b      	movs	r2, #11
 8007ef0:	761a      	strb	r2, [r3, #24]
      break;
 8007ef2:	e06b      	b.n	8007fcc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d168      	bne.n	8007fcc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007efa:	2303      	movs	r3, #3
 8007efc:	73fb      	strb	r3, [r7, #15]
      break;
 8007efe:	e065      	b.n	8007fcc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	795b      	ldrb	r3, [r3, #5]
 8007f04:	2201      	movs	r2, #1
 8007f06:	9200      	str	r2, [sp, #0]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f87f 	bl	8008010 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220a      	movs	r2, #10
 8007f22:	761a      	strb	r2, [r3, #24]
      break;
 8007f24:	e055      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbd3 	bl	80086d8 <USBH_LL_GetURBState>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d105      	bne.n	8007f48 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220d      	movs	r2, #13
 8007f44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f46:	e043      	b.n	8007fd0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d103      	bne.n	8007f56 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2209      	movs	r2, #9
 8007f52:	761a      	strb	r2, [r3, #24]
      break;
 8007f54:	e03c      	b.n	8007fd0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d139      	bne.n	8007fd0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	220b      	movs	r2, #11
 8007f60:	761a      	strb	r2, [r3, #24]
      break;
 8007f62:	e035      	b.n	8007fd0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7e5b      	ldrb	r3, [r3, #25]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	765a      	strb	r2, [r3, #25]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7e5b      	ldrb	r3, [r3, #25]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d806      	bhi.n	8007f86 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f84:	e025      	b.n	8007fd2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f8c:	2106      	movs	r1, #6
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	795b      	ldrb	r3, [r3, #5]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f90c 	bl	80081bc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	791b      	ldrb	r3, [r3, #4]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f906 	bl	80081bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fba:	e00a      	b.n	8007fd2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e008      	b.n	8007fd2 <USBH_HandleControl+0x2de>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e006      	b.n	8007fd2 <USBH_HandleControl+0x2de>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e004      	b.n	8007fd2 <USBH_HandleControl+0x2de>
      break;
 8007fc8:	bf00      	nop
 8007fca:	e002      	b.n	8007fd2 <USBH_HandleControl+0x2de>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <USBH_HandleControl+0x2de>
      break;
 8007fd0:	bf00      	nop
  }

  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fea:	79f9      	ldrb	r1, [r7, #7]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2200      	movs	r2, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fb38 	bl	8008676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af04      	add	r7, sp, #16
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	460b      	mov	r3, r1
 8008020:	80fb      	strh	r3, [r7, #6]
 8008022:	4613      	mov	r3, r2
 8008024:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008034:	7979      	ldrb	r1, [r7, #5]
 8008036:	7e3b      	ldrb	r3, [r7, #24]
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	9302      	str	r3, [sp, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	2301      	movs	r3, #1
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2300      	movs	r3, #0
 8008048:	2200      	movs	r2, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fb13 	bl	8008676 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b088      	sub	sp, #32
 800805e:	af04      	add	r7, sp, #16
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	4611      	mov	r1, r2
 8008066:	461a      	mov	r2, r3
 8008068:	460b      	mov	r3, r1
 800806a:	80fb      	strh	r3, [r7, #6]
 800806c:	4613      	mov	r3, r2
 800806e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008070:	7979      	ldrb	r1, [r7, #5]
 8008072:	2300      	movs	r3, #0
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	9302      	str	r3, [sp, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	2301      	movs	r3, #1
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	2300      	movs	r3, #0
 8008084:	2201      	movs	r2, #1
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 faf5 	bl	8008676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800808c:	2300      	movs	r3, #0

}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b088      	sub	sp, #32
 800809a:	af04      	add	r7, sp, #16
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	4611      	mov	r1, r2
 80080a2:	461a      	mov	r2, r3
 80080a4:	460b      	mov	r3, r1
 80080a6:	80fb      	strh	r3, [r7, #6]
 80080a8:	4613      	mov	r3, r2
 80080aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ba:	7979      	ldrb	r1, [r7, #5]
 80080bc:	7e3b      	ldrb	r3, [r7, #24]
 80080be:	9303      	str	r3, [sp, #12]
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	9302      	str	r3, [sp, #8]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	2301      	movs	r3, #1
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	2302      	movs	r3, #2
 80080ce:	2200      	movs	r2, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fad0 	bl	8008676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af04      	add	r7, sp, #16
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4611      	mov	r1, r2
 80080ec:	461a      	mov	r2, r3
 80080ee:	460b      	mov	r3, r1
 80080f0:	80fb      	strh	r3, [r7, #6]
 80080f2:	4613      	mov	r3, r2
 80080f4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080f6:	7979      	ldrb	r1, [r7, #5]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	2301      	movs	r3, #1
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	2302      	movs	r3, #2
 800810a:	2201      	movs	r2, #1
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fab2 	bl	8008676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af04      	add	r7, sp, #16
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	4608      	mov	r0, r1
 8008126:	4611      	mov	r1, r2
 8008128:	461a      	mov	r2, r3
 800812a:	4603      	mov	r3, r0
 800812c:	70fb      	strb	r3, [r7, #3]
 800812e:	460b      	mov	r3, r1
 8008130:	70bb      	strb	r3, [r7, #2]
 8008132:	4613      	mov	r3, r2
 8008134:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008136:	7878      	ldrb	r0, [r7, #1]
 8008138:	78ba      	ldrb	r2, [r7, #2]
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	8b3b      	ldrh	r3, [r7, #24]
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	7d3b      	ldrb	r3, [r7, #20]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	7c3b      	ldrb	r3, [r7, #16]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	4603      	mov	r3, r0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa45 	bl	80085da <USBH_LL_OpenPipe>

  return USBH_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa64 	bl	8008638 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f836 	bl	80081f8 <USBH_GetFreePipe>
 800818c:	4603      	mov	r3, r0
 800818e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008196:	4293      	cmp	r3, r2
 8008198:	d00a      	beq.n	80081b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	33e0      	adds	r3, #224	; 0xe0
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081b0:	89fb      	ldrh	r3, [r7, #14]
 80081b2:	b2db      	uxtb	r3, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	2b0f      	cmp	r3, #15
 80081cc:	d80d      	bhi.n	80081ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	33e0      	adds	r3, #224	; 0xe0
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	33e0      	adds	r3, #224	; 0xe0
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	e00f      	b.n	800822a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	33e0      	adds	r3, #224	; 0xe0
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	b29b      	uxth	r3, r3
 8008222:	e007      	b.n	8008234 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	3301      	adds	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b0f      	cmp	r3, #15
 800822e:	d9ec      	bls.n	800820a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008230:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008244:	2201      	movs	r2, #1
 8008246:	490e      	ldr	r1, [pc, #56]	; (8008280 <MX_USB_HOST_Init+0x40>)
 8008248:	480e      	ldr	r0, [pc, #56]	; (8008284 <MX_USB_HOST_Init+0x44>)
 800824a:	f7fe fb05 	bl	8006858 <USBH_Init>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008254:	f7f8 fee6 	bl	8001024 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008258:	490b      	ldr	r1, [pc, #44]	; (8008288 <MX_USB_HOST_Init+0x48>)
 800825a:	480a      	ldr	r0, [pc, #40]	; (8008284 <MX_USB_HOST_Init+0x44>)
 800825c:	f7fe fba9 	bl	80069b2 <USBH_RegisterClass>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008266:	f7f8 fedd 	bl	8001024 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800826a:	4806      	ldr	r0, [pc, #24]	; (8008284 <MX_USB_HOST_Init+0x44>)
 800826c:	f7fe fc2d 	bl	8006aca <USBH_Start>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008276:	f7f8 fed5 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800827a:	bf00      	nop
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	080082a1 	.word	0x080082a1
 8008284:	20000190 	.word	0x20000190
 8008288:	20000020 	.word	0x20000020

0800828c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008290:	4802      	ldr	r0, [pc, #8]	; (800829c <MX_USB_HOST_Process+0x10>)
 8008292:	f7fe fc2b 	bl	8006aec <USBH_Process>
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000190 	.word	0x20000190

080082a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d819      	bhi.n	80082e8 <USBH_UserProcess+0x48>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <USBH_UserProcess+0x1c>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082e9 	.word	0x080082e9
 80082c0:	080082d9 	.word	0x080082d9
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	080082d1 	.word	0x080082d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <USBH_UserProcess+0x58>)
 80082d2:	2203      	movs	r2, #3
 80082d4:	701a      	strb	r2, [r3, #0]
  break;
 80082d6:	e008      	b.n	80082ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082d8:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <USBH_UserProcess+0x58>)
 80082da:	2202      	movs	r2, #2
 80082dc:	701a      	strb	r2, [r3, #0]
  break;
 80082de:	e004      	b.n	80082ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <USBH_UserProcess+0x58>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	701a      	strb	r2, [r3, #0]
  break;
 80082e6:	e000      	b.n	80082ea <USBH_UserProcess+0x4a>

  default:
  break;
 80082e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000568 	.word	0x20000568

080082fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	; 0x28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	609a      	str	r2, [r3, #8]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831c:	d13a      	bne.n	8008394 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800831e:	2300      	movs	r3, #0
 8008320:	613b      	str	r3, [r7, #16]
 8008322:	4b1e      	ldr	r3, [pc, #120]	; (800839c <HAL_HCD_MspInit+0xa0>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	4a1d      	ldr	r2, [pc, #116]	; (800839c <HAL_HCD_MspInit+0xa0>)
 8008328:	f043 0301 	orr.w	r3, r3, #1
 800832c:	6313      	str	r3, [r2, #48]	; 0x30
 800832e:	4b1b      	ldr	r3, [pc, #108]	; (800839c <HAL_HCD_MspInit+0xa0>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	613b      	str	r3, [r7, #16]
 8008338:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800833a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800833e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008340:	2302      	movs	r3, #2
 8008342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008348:	2300      	movs	r3, #0
 800834a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800834c:	230a      	movs	r3, #10
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4619      	mov	r1, r3
 8008356:	4812      	ldr	r0, [pc, #72]	; (80083a0 <HAL_HCD_MspInit+0xa4>)
 8008358:	f7f9 f970 	bl	800163c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <HAL_HCD_MspInit+0xa0>)
 800835e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008360:	4a0e      	ldr	r2, [pc, #56]	; (800839c <HAL_HCD_MspInit+0xa0>)
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	6353      	str	r3, [r2, #52]	; 0x34
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <HAL_HCD_MspInit+0xa0>)
 800836e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <HAL_HCD_MspInit+0xa0>)
 8008372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008376:	6453      	str	r3, [r2, #68]	; 0x44
 8008378:	4b08      	ldr	r3, [pc, #32]	; (800839c <HAL_HCD_MspInit+0xa0>)
 800837a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008384:	2200      	movs	r2, #0
 8008386:	2100      	movs	r1, #0
 8008388:	2043      	movs	r0, #67	; 0x43
 800838a:	f7f9 f920 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800838e:	2043      	movs	r0, #67	; 0x43
 8008390:	f7f9 f939 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008394:	bf00      	nop
 8008396:	3728      	adds	r7, #40	; 0x28
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40023800 	.word	0x40023800
 80083a0:	40020000 	.word	0x40020000

080083a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe ff79 	bl	80072aa <USBH_LL_IncTimer>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe ffb1 	bl	8007336 <USBH_LL_Connect>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe ffba 	bl	8007364 <USBH_LL_Disconnect>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
 8008404:	4613      	mov	r3, r2
 8008406:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe ff6b 	bl	80072fe <USBH_LL_PortEnabled>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe ff6b 	bl	800731a <USBH_LL_PortDisabled>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800845a:	2b01      	cmp	r3, #1
 800845c:	d12a      	bne.n	80084b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <USBH_LL_Init+0x74>)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <USBH_LL_Init+0x74>)
 800846a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <USBH_LL_Init+0x74>)
 8008470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008474:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008476:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <USBH_LL_Init+0x74>)
 8008478:	2208      	movs	r2, #8
 800847a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <USBH_LL_Init+0x74>)
 800847e:	2201      	movs	r2, #1
 8008480:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <USBH_LL_Init+0x74>)
 8008484:	2200      	movs	r2, #0
 8008486:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <USBH_LL_Init+0x74>)
 800848a:	2202      	movs	r2, #2
 800848c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <USBH_LL_Init+0x74>)
 8008490:	2200      	movs	r2, #0
 8008492:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008494:	480a      	ldr	r0, [pc, #40]	; (80084c0 <USBH_LL_Init+0x74>)
 8008496:	f7f9 fa86 	bl	80019a6 <HAL_HCD_Init>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084a0:	f7f8 fdc0 	bl	8001024 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084a4:	4806      	ldr	r0, [pc, #24]	; (80084c0 <USBH_LL_Init+0x74>)
 80084a6:	f7f9 fee7 	bl	8002278 <HAL_HCD_GetCurrentFrame>
 80084aa:	4603      	mov	r3, r0
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fe feec 	bl	800728c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2000056c 	.word	0x2000056c

080084c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f9 fe54 	bl	8002188 <HAL_HCD_Start>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f95e 	bl	80087a8 <USBH_Get_USB_Status>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008510:	4618      	mov	r0, r3
 8008512:	f7f9 fe5c 	bl	80021ce <HAL_HCD_Stop>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f943 	bl	80087a8 <USBH_Get_USB_Status>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008526:	7bbb      	ldrb	r3, [r7, #14]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008542:	4618      	mov	r0, r3
 8008544:	f7f9 fea6 	bl	8002294 <HAL_HCD_GetCurrentSpeed>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d00c      	beq.n	8008568 <USBH_LL_GetSpeed+0x38>
 800854e:	2b02      	cmp	r3, #2
 8008550:	d80d      	bhi.n	800856e <USBH_LL_GetSpeed+0x3e>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <USBH_LL_GetSpeed+0x2c>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d003      	beq.n	8008562 <USBH_LL_GetSpeed+0x32>
 800855a:	e008      	b.n	800856e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
    break;
 8008560:	e008      	b.n	8008574 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]
    break;
 8008566:	e005      	b.n	8008574 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008568:	2302      	movs	r3, #2
 800856a:	73fb      	strb	r3, [r7, #15]
    break;
 800856c:	e002      	b.n	8008574 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
    break;
 8008572:	bf00      	nop
  }
  return  speed;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008594:	4618      	mov	r0, r3
 8008596:	f7f9 fe37 	bl	8002208 <HAL_HCD_ResetPort>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f901 	bl	80087a8 <USBH_Get_USB_Status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f9 fe3f 	bl	800224e <HAL_HCD_HC_GetXferCount>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085da:	b590      	push	{r4, r7, lr}
 80085dc:	b089      	sub	sp, #36	; 0x24
 80085de:	af04      	add	r7, sp, #16
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	4608      	mov	r0, r1
 80085e4:	4611      	mov	r1, r2
 80085e6:	461a      	mov	r2, r3
 80085e8:	4603      	mov	r3, r0
 80085ea:	70fb      	strb	r3, [r7, #3]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70bb      	strb	r3, [r7, #2]
 80085f0:	4613      	mov	r3, r2
 80085f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008602:	787c      	ldrb	r4, [r7, #1]
 8008604:	78ba      	ldrb	r2, [r7, #2]
 8008606:	78f9      	ldrb	r1, [r7, #3]
 8008608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800860a:	9302      	str	r3, [sp, #8]
 800860c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	4623      	mov	r3, r4
 800861a:	f7f9 fa2b 	bl	8001a74 <HAL_HCD_HC_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f8bf 	bl	80087a8 <USBH_Get_USB_Status>
 800862a:	4603      	mov	r3, r0
 800862c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bd90      	pop	{r4, r7, pc}

08008638 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7f9 fac4 	bl	8001be4 <HAL_HCD_HC_Halt>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f8a0 	bl	80087a8 <USBH_Get_USB_Status>
 8008668:	4603      	mov	r3, r0
 800866a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800866c:	7bbb      	ldrb	r3, [r7, #14]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008676:	b590      	push	{r4, r7, lr}
 8008678:	b089      	sub	sp, #36	; 0x24
 800867a:	af04      	add	r7, sp, #16
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	4608      	mov	r0, r1
 8008680:	4611      	mov	r1, r2
 8008682:	461a      	mov	r2, r3
 8008684:	4603      	mov	r3, r0
 8008686:	70fb      	strb	r3, [r7, #3]
 8008688:	460b      	mov	r3, r1
 800868a:	70bb      	strb	r3, [r7, #2]
 800868c:	4613      	mov	r3, r2
 800868e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800869e:	787c      	ldrb	r4, [r7, #1]
 80086a0:	78ba      	ldrb	r2, [r7, #2]
 80086a2:	78f9      	ldrb	r1, [r7, #3]
 80086a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086a8:	9303      	str	r3, [sp, #12]
 80086aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4623      	mov	r3, r4
 80086ba:	f7f9 fab7 	bl	8001c2c <HAL_HCD_HC_SubmitRequest>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f86f 	bl	80087a8 <USBH_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}

080086d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f9 fd98 	bl	8002224 <HAL_HCD_HC_GetURBState>
 80086f4:	4603      	mov	r3, r0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008710:	2b01      	cmp	r3, #1
 8008712:	d103      	bne.n	800871c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f872 	bl	8008800 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800871c:	20c8      	movs	r0, #200	; 0xc8
 800871e:	f7f8 fe57 	bl	80013d0 <HAL_Delay>
  return USBH_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
 8008738:	4613      	mov	r3, r2
 800873a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008742:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	4613      	mov	r3, r2
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	3317      	adds	r3, #23
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	4613      	mov	r3, r2
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	333c      	adds	r3, #60	; 0x3c
 800876a:	78ba      	ldrb	r2, [r7, #2]
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e009      	b.n	8008784 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	333d      	adds	r3, #61	; 0x3d
 8008780:	78ba      	ldrb	r2, [r7, #2]
 8008782:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7f8 fe18 	bl	80013d0 <HAL_Delay>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d817      	bhi.n	80087ec <USBH_Get_USB_Status+0x44>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <USBH_Get_USB_Status+0x1c>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087d5 	.word	0x080087d5
 80087c8:	080087db 	.word	0x080087db
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087e7 	.word	0x080087e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
    break;
 80087d8:	e00b      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087da:	2302      	movs	r3, #2
 80087dc:	73fb      	strb	r3, [r7, #15]
    break;
 80087de:	e008      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
    break;
 80087e4:	e005      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087e6:	2302      	movs	r3, #2
 80087e8:	73fb      	strb	r3, [r7, #15]
    break;
 80087ea:	e002      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087ec:	2302      	movs	r3, #2
 80087ee:	73fb      	strb	r3, [r7, #15]
    break;
 80087f0:	bf00      	nop
  }
  return usb_status;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	e001      	b.n	800881e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	461a      	mov	r2, r3
 8008822:	2101      	movs	r1, #1
 8008824:	4803      	ldr	r0, [pc, #12]	; (8008834 <MX_DriverVbusFS+0x34>)
 8008826:	f7f9 f8a5 	bl	8001974 <HAL_GPIO_WritePin>
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40020800 	.word	0x40020800

08008838 <malloc>:
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <malloc+0xc>)
 800883a:	4601      	mov	r1, r0
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	f000 b82b 	b.w	8008898 <_malloc_r>
 8008842:	bf00      	nop
 8008844:	2000008c 	.word	0x2000008c

08008848 <free>:
 8008848:	4b02      	ldr	r3, [pc, #8]	; (8008854 <free+0xc>)
 800884a:	4601      	mov	r1, r0
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f000 b8f3 	b.w	8008a38 <_free_r>
 8008852:	bf00      	nop
 8008854:	2000008c 	.word	0x2000008c

08008858 <sbrk_aligned>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4e0e      	ldr	r6, [pc, #56]	; (8008894 <sbrk_aligned+0x3c>)
 800885c:	460c      	mov	r4, r1
 800885e:	6831      	ldr	r1, [r6, #0]
 8008860:	4605      	mov	r5, r0
 8008862:	b911      	cbnz	r1, 800886a <sbrk_aligned+0x12>
 8008864:	f000 f8ac 	bl	80089c0 <_sbrk_r>
 8008868:	6030      	str	r0, [r6, #0]
 800886a:	4621      	mov	r1, r4
 800886c:	4628      	mov	r0, r5
 800886e:	f000 f8a7 	bl	80089c0 <_sbrk_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d00a      	beq.n	800888c <sbrk_aligned+0x34>
 8008876:	1cc4      	adds	r4, r0, #3
 8008878:	f024 0403 	bic.w	r4, r4, #3
 800887c:	42a0      	cmp	r0, r4
 800887e:	d007      	beq.n	8008890 <sbrk_aligned+0x38>
 8008880:	1a21      	subs	r1, r4, r0
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f89c 	bl	80089c0 <_sbrk_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d101      	bne.n	8008890 <sbrk_aligned+0x38>
 800888c:	f04f 34ff 	mov.w	r4, #4294967295
 8008890:	4620      	mov	r0, r4
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	20000950 	.word	0x20000950

08008898 <_malloc_r>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	1ccd      	adds	r5, r1, #3
 800889e:	f025 0503 	bic.w	r5, r5, #3
 80088a2:	3508      	adds	r5, #8
 80088a4:	2d0c      	cmp	r5, #12
 80088a6:	bf38      	it	cc
 80088a8:	250c      	movcc	r5, #12
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	4607      	mov	r7, r0
 80088ae:	db01      	blt.n	80088b4 <_malloc_r+0x1c>
 80088b0:	42a9      	cmp	r1, r5
 80088b2:	d905      	bls.n	80088c0 <_malloc_r+0x28>
 80088b4:	230c      	movs	r3, #12
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	2600      	movs	r6, #0
 80088ba:	4630      	mov	r0, r6
 80088bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008994 <_malloc_r+0xfc>
 80088c4:	f000 f868 	bl	8008998 <__malloc_lock>
 80088c8:	f8d8 3000 	ldr.w	r3, [r8]
 80088cc:	461c      	mov	r4, r3
 80088ce:	bb5c      	cbnz	r4, 8008928 <_malloc_r+0x90>
 80088d0:	4629      	mov	r1, r5
 80088d2:	4638      	mov	r0, r7
 80088d4:	f7ff ffc0 	bl	8008858 <sbrk_aligned>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	4604      	mov	r4, r0
 80088dc:	d155      	bne.n	800898a <_malloc_r+0xf2>
 80088de:	f8d8 4000 	ldr.w	r4, [r8]
 80088e2:	4626      	mov	r6, r4
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	d145      	bne.n	8008974 <_malloc_r+0xdc>
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	d048      	beq.n	800897e <_malloc_r+0xe6>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	4631      	mov	r1, r6
 80088f0:	4638      	mov	r0, r7
 80088f2:	eb04 0903 	add.w	r9, r4, r3
 80088f6:	f000 f863 	bl	80089c0 <_sbrk_r>
 80088fa:	4581      	cmp	r9, r0
 80088fc:	d13f      	bne.n	800897e <_malloc_r+0xe6>
 80088fe:	6821      	ldr	r1, [r4, #0]
 8008900:	1a6d      	subs	r5, r5, r1
 8008902:	4629      	mov	r1, r5
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ffa7 	bl	8008858 <sbrk_aligned>
 800890a:	3001      	adds	r0, #1
 800890c:	d037      	beq.n	800897e <_malloc_r+0xe6>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	442b      	add	r3, r5
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	f8d8 3000 	ldr.w	r3, [r8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d038      	beq.n	800898e <_malloc_r+0xf6>
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	42a2      	cmp	r2, r4
 8008920:	d12b      	bne.n	800897a <_malloc_r+0xe2>
 8008922:	2200      	movs	r2, #0
 8008924:	605a      	str	r2, [r3, #4]
 8008926:	e00f      	b.n	8008948 <_malloc_r+0xb0>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	1b52      	subs	r2, r2, r5
 800892c:	d41f      	bmi.n	800896e <_malloc_r+0xd6>
 800892e:	2a0b      	cmp	r2, #11
 8008930:	d917      	bls.n	8008962 <_malloc_r+0xca>
 8008932:	1961      	adds	r1, r4, r5
 8008934:	42a3      	cmp	r3, r4
 8008936:	6025      	str	r5, [r4, #0]
 8008938:	bf18      	it	ne
 800893a:	6059      	strne	r1, [r3, #4]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	bf08      	it	eq
 8008940:	f8c8 1000 	streq.w	r1, [r8]
 8008944:	5162      	str	r2, [r4, r5]
 8008946:	604b      	str	r3, [r1, #4]
 8008948:	4638      	mov	r0, r7
 800894a:	f104 060b 	add.w	r6, r4, #11
 800894e:	f000 f829 	bl	80089a4 <__malloc_unlock>
 8008952:	f026 0607 	bic.w	r6, r6, #7
 8008956:	1d23      	adds	r3, r4, #4
 8008958:	1af2      	subs	r2, r6, r3
 800895a:	d0ae      	beq.n	80088ba <_malloc_r+0x22>
 800895c:	1b9b      	subs	r3, r3, r6
 800895e:	50a3      	str	r3, [r4, r2]
 8008960:	e7ab      	b.n	80088ba <_malloc_r+0x22>
 8008962:	42a3      	cmp	r3, r4
 8008964:	6862      	ldr	r2, [r4, #4]
 8008966:	d1dd      	bne.n	8008924 <_malloc_r+0x8c>
 8008968:	f8c8 2000 	str.w	r2, [r8]
 800896c:	e7ec      	b.n	8008948 <_malloc_r+0xb0>
 800896e:	4623      	mov	r3, r4
 8008970:	6864      	ldr	r4, [r4, #4]
 8008972:	e7ac      	b.n	80088ce <_malloc_r+0x36>
 8008974:	4634      	mov	r4, r6
 8008976:	6876      	ldr	r6, [r6, #4]
 8008978:	e7b4      	b.n	80088e4 <_malloc_r+0x4c>
 800897a:	4613      	mov	r3, r2
 800897c:	e7cc      	b.n	8008918 <_malloc_r+0x80>
 800897e:	230c      	movs	r3, #12
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4638      	mov	r0, r7
 8008984:	f000 f80e 	bl	80089a4 <__malloc_unlock>
 8008988:	e797      	b.n	80088ba <_malloc_r+0x22>
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	e7dc      	b.n	8008948 <_malloc_r+0xb0>
 800898e:	605b      	str	r3, [r3, #4]
 8008990:	deff      	udf	#255	; 0xff
 8008992:	bf00      	nop
 8008994:	2000094c 	.word	0x2000094c

08008998 <__malloc_lock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_lock+0x8>)
 800899a:	f000 b84b 	b.w	8008a34 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20000a90 	.word	0x20000a90

080089a4 <__malloc_unlock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__malloc_unlock+0x8>)
 80089a6:	f000 b846 	b.w	8008a36 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000a90 	.word	0x20000a90

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_sbrk_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f8 fc1c 	bl	8001208 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20000a8c 	.word	0x20000a8c

080089e0 <__errno>:
 80089e0:	4b01      	ldr	r3, [pc, #4]	; (80089e8 <__errno+0x8>)
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000008c 	.word	0x2000008c

080089ec <__libc_init_array>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4d0d      	ldr	r5, [pc, #52]	; (8008a24 <__libc_init_array+0x38>)
 80089f0:	4c0d      	ldr	r4, [pc, #52]	; (8008a28 <__libc_init_array+0x3c>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	2600      	movs	r6, #0
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	d109      	bne.n	8008a10 <__libc_init_array+0x24>
 80089fc:	4d0b      	ldr	r5, [pc, #44]	; (8008a2c <__libc_init_array+0x40>)
 80089fe:	4c0c      	ldr	r4, [pc, #48]	; (8008a30 <__libc_init_array+0x44>)
 8008a00:	f000 fb38 	bl	8009074 <_init>
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	2600      	movs	r6, #0
 8008a0a:	42a6      	cmp	r6, r4
 8008a0c:	d105      	bne.n	8008a1a <__libc_init_array+0x2e>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a14:	4798      	blx	r3
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7ee      	b.n	80089f8 <__libc_init_array+0xc>
 8008a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1e:	4798      	blx	r3
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7f2      	b.n	8008a0a <__libc_init_array+0x1e>
 8008a24:	0800916c 	.word	0x0800916c
 8008a28:	0800916c 	.word	0x0800916c
 8008a2c:	0800916c 	.word	0x0800916c
 8008a30:	08009170 	.word	0x08009170

08008a34 <__retarget_lock_acquire_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <__retarget_lock_release_recursive>:
 8008a36:	4770      	bx	lr

08008a38 <_free_r>:
 8008a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	d044      	beq.n	8008ac8 <_free_r+0x90>
 8008a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a42:	9001      	str	r0, [sp, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4a:	bfb8      	it	lt
 8008a4c:	18e4      	addlt	r4, r4, r3
 8008a4e:	f7ff ffa3 	bl	8008998 <__malloc_lock>
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <_free_r+0x94>)
 8008a54:	9801      	ldr	r0, [sp, #4]
 8008a56:	6813      	ldr	r3, [r2, #0]
 8008a58:	b933      	cbnz	r3, 8008a68 <_free_r+0x30>
 8008a5a:	6063      	str	r3, [r4, #4]
 8008a5c:	6014      	str	r4, [r2, #0]
 8008a5e:	b003      	add	sp, #12
 8008a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a64:	f7ff bf9e 	b.w	80089a4 <__malloc_unlock>
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	d908      	bls.n	8008a7e <_free_r+0x46>
 8008a6c:	6825      	ldr	r5, [r4, #0]
 8008a6e:	1961      	adds	r1, r4, r5
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf01      	itttt	eq
 8008a74:	6819      	ldreq	r1, [r3, #0]
 8008a76:	685b      	ldreq	r3, [r3, #4]
 8008a78:	1949      	addeq	r1, r1, r5
 8008a7a:	6021      	streq	r1, [r4, #0]
 8008a7c:	e7ed      	b.n	8008a5a <_free_r+0x22>
 8008a7e:	461a      	mov	r2, r3
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b10b      	cbz	r3, 8008a88 <_free_r+0x50>
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	d9fa      	bls.n	8008a7e <_free_r+0x46>
 8008a88:	6811      	ldr	r1, [r2, #0]
 8008a8a:	1855      	adds	r5, r2, r1
 8008a8c:	42a5      	cmp	r5, r4
 8008a8e:	d10b      	bne.n	8008aa8 <_free_r+0x70>
 8008a90:	6824      	ldr	r4, [r4, #0]
 8008a92:	4421      	add	r1, r4
 8008a94:	1854      	adds	r4, r2, r1
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	6011      	str	r1, [r2, #0]
 8008a9a:	d1e0      	bne.n	8008a5e <_free_r+0x26>
 8008a9c:	681c      	ldr	r4, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	6053      	str	r3, [r2, #4]
 8008aa2:	440c      	add	r4, r1
 8008aa4:	6014      	str	r4, [r2, #0]
 8008aa6:	e7da      	b.n	8008a5e <_free_r+0x26>
 8008aa8:	d902      	bls.n	8008ab0 <_free_r+0x78>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	6003      	str	r3, [r0, #0]
 8008aae:	e7d6      	b.n	8008a5e <_free_r+0x26>
 8008ab0:	6825      	ldr	r5, [r4, #0]
 8008ab2:	1961      	adds	r1, r4, r5
 8008ab4:	428b      	cmp	r3, r1
 8008ab6:	bf04      	itt	eq
 8008ab8:	6819      	ldreq	r1, [r3, #0]
 8008aba:	685b      	ldreq	r3, [r3, #4]
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	bf04      	itt	eq
 8008ac0:	1949      	addeq	r1, r1, r5
 8008ac2:	6021      	streq	r1, [r4, #0]
 8008ac4:	6054      	str	r4, [r2, #4]
 8008ac6:	e7ca      	b.n	8008a5e <_free_r+0x26>
 8008ac8:	b003      	add	sp, #12
 8008aca:	bd30      	pop	{r4, r5, pc}
 8008acc:	2000094c 	.word	0x2000094c

08008ad0 <atan2f>:
 8008ad0:	f000 b864 	b.w	8008b9c <__ieee754_atan2f>

08008ad4 <expf>:
 8008ad4:	b508      	push	{r3, lr}
 8008ad6:	ed2d 8b02 	vpush	{d8}
 8008ada:	eef0 8a40 	vmov.f32	s17, s0
 8008ade:	f000 f8fd 	bl	8008cdc <__ieee754_expf>
 8008ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ae6:	eeb0 0a68 	vmov.f32	s0, s17
 8008aea:	f000 f847 	bl	8008b7c <finitef>
 8008aee:	b160      	cbz	r0, 8008b0a <expf+0x36>
 8008af0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008b30 <expf+0x5c>
 8008af4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afc:	dd0a      	ble.n	8008b14 <expf+0x40>
 8008afe:	f7ff ff6f 	bl	80089e0 <__errno>
 8008b02:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008b34 <expf+0x60>
 8008b06:	2322      	movs	r3, #34	; 0x22
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8008b0e:	ecbd 8b02 	vpop	{d8}
 8008b12:	bd08      	pop	{r3, pc}
 8008b14:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b38 <expf+0x64>
 8008b18:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b20:	d5f3      	bpl.n	8008b0a <expf+0x36>
 8008b22:	f7ff ff5d 	bl	80089e0 <__errno>
 8008b26:	2322      	movs	r3, #34	; 0x22
 8008b28:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008b3c <expf+0x68>
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	e7ec      	b.n	8008b0a <expf+0x36>
 8008b30:	42b17217 	.word	0x42b17217
 8008b34:	7f800000 	.word	0x7f800000
 8008b38:	c2cff1b5 	.word	0xc2cff1b5
 8008b3c:	00000000 	.word	0x00000000

08008b40 <sqrtf>:
 8008b40:	b508      	push	{r3, lr}
 8008b42:	ed2d 8b02 	vpush	{d8}
 8008b46:	eeb0 8a40 	vmov.f32	s16, s0
 8008b4a:	f000 f824 	bl	8008b96 <__ieee754_sqrtf>
 8008b4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b56:	d60c      	bvs.n	8008b72 <sqrtf+0x32>
 8008b58:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008b78 <sqrtf+0x38>
 8008b5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b64:	d505      	bpl.n	8008b72 <sqrtf+0x32>
 8008b66:	f7ff ff3b 	bl	80089e0 <__errno>
 8008b6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008b6e:	2321      	movs	r3, #33	; 0x21
 8008b70:	6003      	str	r3, [r0, #0]
 8008b72:	ecbd 8b02 	vpop	{d8}
 8008b76:	bd08      	pop	{r3, pc}
 8008b78:	00000000 	.word	0x00000000

08008b7c <finitef>:
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008b82:	9801      	ldr	r0, [sp, #4]
 8008b84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008b88:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008b8c:	bfac      	ite	ge
 8008b8e:	2000      	movge	r0, #0
 8008b90:	2001      	movlt	r0, #1
 8008b92:	b002      	add	sp, #8
 8008b94:	4770      	bx	lr

08008b96 <__ieee754_sqrtf>:
 8008b96:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008b9a:	4770      	bx	lr

08008b9c <__ieee754_atan2f>:
 8008b9c:	ee10 2a90 	vmov	r2, s1
 8008ba0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008ba4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	eef0 7a40 	vmov.f32	s15, s0
 8008bae:	dc06      	bgt.n	8008bbe <__ieee754_atan2f+0x22>
 8008bb0:	ee10 0a10 	vmov	r0, s0
 8008bb4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008bb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008bbc:	dd04      	ble.n	8008bc8 <__ieee754_atan2f+0x2c>
 8008bbe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc6:	bd10      	pop	{r4, pc}
 8008bc8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008bcc:	d103      	bne.n	8008bd6 <__ieee754_atan2f+0x3a>
 8008bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd2:	f000 b951 	b.w	8008e78 <atanf>
 8008bd6:	1794      	asrs	r4, r2, #30
 8008bd8:	f004 0402 	and.w	r4, r4, #2
 8008bdc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008be0:	b943      	cbnz	r3, 8008bf4 <__ieee754_atan2f+0x58>
 8008be2:	2c02      	cmp	r4, #2
 8008be4:	d05e      	beq.n	8008ca4 <__ieee754_atan2f+0x108>
 8008be6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008cb8 <__ieee754_atan2f+0x11c>
 8008bea:	2c03      	cmp	r4, #3
 8008bec:	bf08      	it	eq
 8008bee:	eef0 7a47 	vmoveq.f32	s15, s14
 8008bf2:	e7e6      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008bf4:	b941      	cbnz	r1, 8008c08 <__ieee754_atan2f+0x6c>
 8008bf6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008cbc <__ieee754_atan2f+0x120>
 8008bfa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008cc0 <__ieee754_atan2f+0x124>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	bfb8      	it	lt
 8008c02:	eef0 7a47 	vmovlt.f32	s15, s14
 8008c06:	e7dc      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008c08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008c0c:	d110      	bne.n	8008c30 <__ieee754_atan2f+0x94>
 8008c0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c12:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c16:	d107      	bne.n	8008c28 <__ieee754_atan2f+0x8c>
 8008c18:	2c02      	cmp	r4, #2
 8008c1a:	d846      	bhi.n	8008caa <__ieee754_atan2f+0x10e>
 8008c1c:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <__ieee754_atan2f+0x128>)
 8008c1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c22:	edd3 7a00 	vldr	s15, [r3]
 8008c26:	e7cc      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008c28:	2c02      	cmp	r4, #2
 8008c2a:	d841      	bhi.n	8008cb0 <__ieee754_atan2f+0x114>
 8008c2c:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <__ieee754_atan2f+0x12c>)
 8008c2e:	e7f6      	b.n	8008c1e <__ieee754_atan2f+0x82>
 8008c30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c34:	d0df      	beq.n	8008bf6 <__ieee754_atan2f+0x5a>
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008c3c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008c40:	da1a      	bge.n	8008c78 <__ieee754_atan2f+0xdc>
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	da01      	bge.n	8008c4a <__ieee754_atan2f+0xae>
 8008c46:	313c      	adds	r1, #60	; 0x3c
 8008c48:	db19      	blt.n	8008c7e <__ieee754_atan2f+0xe2>
 8008c4a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008c4e:	f000 f9e7 	bl	8009020 <fabsf>
 8008c52:	f000 f911 	bl	8008e78 <atanf>
 8008c56:	eef0 7a40 	vmov.f32	s15, s0
 8008c5a:	2c01      	cmp	r4, #1
 8008c5c:	d012      	beq.n	8008c84 <__ieee754_atan2f+0xe8>
 8008c5e:	2c02      	cmp	r4, #2
 8008c60:	d017      	beq.n	8008c92 <__ieee754_atan2f+0xf6>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	d0ad      	beq.n	8008bc2 <__ieee754_atan2f+0x26>
 8008c66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008ccc <__ieee754_atan2f+0x130>
 8008c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c6e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008cd0 <__ieee754_atan2f+0x134>
 8008c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c76:	e7a4      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008c78:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008cbc <__ieee754_atan2f+0x120>
 8008c7c:	e7ed      	b.n	8008c5a <__ieee754_atan2f+0xbe>
 8008c7e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008cd4 <__ieee754_atan2f+0x138>
 8008c82:	e7ea      	b.n	8008c5a <__ieee754_atan2f+0xbe>
 8008c84:	ee17 3a90 	vmov	r3, s15
 8008c88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	e797      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008c92:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008ccc <__ieee754_atan2f+0x130>
 8008c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008cd0 <__ieee754_atan2f+0x134>
 8008c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ca2:	e78e      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008ca4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008cd0 <__ieee754_atan2f+0x134>
 8008ca8:	e78b      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008caa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008cd8 <__ieee754_atan2f+0x13c>
 8008cae:	e788      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008cb0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008cd4 <__ieee754_atan2f+0x138>
 8008cb4:	e785      	b.n	8008bc2 <__ieee754_atan2f+0x26>
 8008cb6:	bf00      	nop
 8008cb8:	c0490fdb 	.word	0xc0490fdb
 8008cbc:	3fc90fdb 	.word	0x3fc90fdb
 8008cc0:	bfc90fdb 	.word	0xbfc90fdb
 8008cc4:	08009114 	.word	0x08009114
 8008cc8:	08009120 	.word	0x08009120
 8008ccc:	33bbbd2e 	.word	0x33bbbd2e
 8008cd0:	40490fdb 	.word	0x40490fdb
 8008cd4:	00000000 	.word	0x00000000
 8008cd8:	3f490fdb 	.word	0x3f490fdb

08008cdc <__ieee754_expf>:
 8008cdc:	ee10 2a10 	vmov	r2, s0
 8008ce0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008ce4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ce8:	d902      	bls.n	8008cf0 <__ieee754_expf+0x14>
 8008cea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008cee:	4770      	bx	lr
 8008cf0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8008cf4:	d106      	bne.n	8008d04 <__ieee754_expf+0x28>
 8008cf6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008e30 <__ieee754_expf+0x154>
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	bf18      	it	ne
 8008cfe:	eeb0 0a67 	vmovne.f32	s0, s15
 8008d02:	4770      	bx	lr
 8008d04:	484b      	ldr	r0, [pc, #300]	; (8008e34 <__ieee754_expf+0x158>)
 8008d06:	4282      	cmp	r2, r0
 8008d08:	dd02      	ble.n	8008d10 <__ieee754_expf+0x34>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f000 b9ac 	b.w	8009068 <__math_oflowf>
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	da05      	bge.n	8008d20 <__ieee754_expf+0x44>
 8008d14:	4a48      	ldr	r2, [pc, #288]	; (8008e38 <__ieee754_expf+0x15c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d902      	bls.n	8008d20 <__ieee754_expf+0x44>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	f000 b99e 	b.w	800905c <__math_uflowf>
 8008d20:	4a46      	ldr	r2, [pc, #280]	; (8008e3c <__ieee754_expf+0x160>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008d28:	d952      	bls.n	8008dd0 <__ieee754_expf+0xf4>
 8008d2a:	4a45      	ldr	r2, [pc, #276]	; (8008e40 <__ieee754_expf+0x164>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008d32:	d834      	bhi.n	8008d9e <__ieee754_expf+0xc2>
 8008d34:	4b43      	ldr	r3, [pc, #268]	; (8008e44 <__ieee754_expf+0x168>)
 8008d36:	4413      	add	r3, r2
 8008d38:	ed93 7a00 	vldr	s14, [r3]
 8008d3c:	4b42      	ldr	r3, [pc, #264]	; (8008e48 <__ieee754_expf+0x16c>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008d44:	f1c1 0201 	rsb	r2, r1, #1
 8008d48:	edd3 7a00 	vldr	s15, [r3]
 8008d4c:	1a52      	subs	r2, r2, r1
 8008d4e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008d52:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008d56:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8008e4c <__ieee754_expf+0x170>
 8008d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e50 <__ieee754_expf+0x174>
 8008d5e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008d62:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8008e54 <__ieee754_expf+0x178>
 8008d66:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008d6a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e58 <__ieee754_expf+0x17c>
 8008d6e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008d72:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008e5c <__ieee754_expf+0x180>
 8008d76:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008d7a:	eef0 6a40 	vmov.f32	s13, s0
 8008d7e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008d82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008d86:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008d8a:	bb92      	cbnz	r2, 8008df2 <__ieee754_expf+0x116>
 8008d8c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008d90:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008d94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008d98:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008d9c:	4770      	bx	lr
 8008d9e:	4b30      	ldr	r3, [pc, #192]	; (8008e60 <__ieee754_expf+0x184>)
 8008da0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008e64 <__ieee754_expf+0x188>
 8008da4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008e68 <__ieee754_expf+0x18c>
 8008da8:	4413      	add	r3, r2
 8008daa:	edd3 7a00 	vldr	s15, [r3]
 8008dae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008db2:	eeb0 7a40 	vmov.f32	s14, s0
 8008db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dba:	ee17 2a90 	vmov	r2, s15
 8008dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008dc6:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008e6c <__ieee754_expf+0x190>
 8008dca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008dce:	e7be      	b.n	8008d4e <__ieee754_expf+0x72>
 8008dd0:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8008dd4:	d20b      	bcs.n	8008dee <__ieee754_expf+0x112>
 8008dd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e70 <__ieee754_expf+0x194>
 8008dda:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008dde:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de6:	dd02      	ble.n	8008dee <__ieee754_expf+0x112>
 8008de8:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008dec:	4770      	bx	lr
 8008dee:	2200      	movs	r2, #0
 8008df0:	e7af      	b.n	8008d52 <__ieee754_expf+0x76>
 8008df2:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008df6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008dfa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8008dfe:	bfb8      	it	lt
 8008e00:	3264      	addlt	r2, #100	; 0x64
 8008e02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e0a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008e0e:	ee17 3a90 	vmov	r3, s15
 8008e12:	bfab      	itete	ge
 8008e14:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008e18:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008e1c:	ee00 3a10 	vmovge	s0, r3
 8008e20:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8008e74 <__ieee754_expf+0x198>
 8008e24:	bfbc      	itt	lt
 8008e26:	ee00 3a10 	vmovlt	s0, r3
 8008e2a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8008e2e:	4770      	bx	lr
 8008e30:	00000000 	.word	0x00000000
 8008e34:	42b17217 	.word	0x42b17217
 8008e38:	42cff1b5 	.word	0x42cff1b5
 8008e3c:	3eb17218 	.word	0x3eb17218
 8008e40:	3f851591 	.word	0x3f851591
 8008e44:	08009134 	.word	0x08009134
 8008e48:	0800913c 	.word	0x0800913c
 8008e4c:	3331bb4c 	.word	0x3331bb4c
 8008e50:	b5ddea0e 	.word	0xb5ddea0e
 8008e54:	388ab355 	.word	0x388ab355
 8008e58:	bb360b61 	.word	0xbb360b61
 8008e5c:	3e2aaaab 	.word	0x3e2aaaab
 8008e60:	0800912c 	.word	0x0800912c
 8008e64:	3fb8aa3b 	.word	0x3fb8aa3b
 8008e68:	3f317180 	.word	0x3f317180
 8008e6c:	3717f7d1 	.word	0x3717f7d1
 8008e70:	7149f2ca 	.word	0x7149f2ca
 8008e74:	0d800000 	.word	0x0d800000

08008e78 <atanf>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	ee10 5a10 	vmov	r5, s0
 8008e7e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008e82:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008e86:	eef0 7a40 	vmov.f32	s15, s0
 8008e8a:	db10      	blt.n	8008eae <atanf+0x36>
 8008e8c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008e90:	dd04      	ble.n	8008e9c <atanf+0x24>
 8008e92:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008e96:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008fd4 <atanf+0x15c>
 8008ea0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008fd8 <atanf+0x160>
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	bfd8      	it	le
 8008ea8:	eef0 7a47 	vmovle.f32	s15, s14
 8008eac:	e7f3      	b.n	8008e96 <atanf+0x1e>
 8008eae:	4b4b      	ldr	r3, [pc, #300]	; (8008fdc <atanf+0x164>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	dc10      	bgt.n	8008ed6 <atanf+0x5e>
 8008eb4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008eb8:	da0a      	bge.n	8008ed0 <atanf+0x58>
 8008eba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008fe0 <atanf+0x168>
 8008ebe:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	dce2      	bgt.n	8008e96 <atanf+0x1e>
 8008ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed4:	e013      	b.n	8008efe <atanf+0x86>
 8008ed6:	f000 f8a3 	bl	8009020 <fabsf>
 8008eda:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <atanf+0x16c>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	dc4f      	bgt.n	8008f80 <atanf+0x108>
 8008ee0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	dc41      	bgt.n	8008f6c <atanf+0xf4>
 8008ee8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008eec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ef0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008efa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008f04:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008fe8 <atanf+0x170>
 8008f08:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008fec <atanf+0x174>
 8008f0c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008ff0 <atanf+0x178>
 8008f10:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008f14:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008f18:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008ff4 <atanf+0x17c>
 8008f1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f20:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008ff8 <atanf+0x180>
 8008f24:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f28:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008ffc <atanf+0x184>
 8008f2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009000 <atanf+0x188>
 8008f34:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f38:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009004 <atanf+0x18c>
 8008f3c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008f40:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009008 <atanf+0x190>
 8008f44:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f48:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800900c <atanf+0x194>
 8008f4c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008f50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009010 <atanf+0x198>
 8008f54:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008f5c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f64:	d121      	bne.n	8008faa <atanf+0x132>
 8008f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f6a:	e794      	b.n	8008e96 <atanf+0x1e>
 8008f6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f70:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008f74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f78:	2301      	movs	r3, #1
 8008f7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f7e:	e7be      	b.n	8008efe <atanf+0x86>
 8008f80:	4b24      	ldr	r3, [pc, #144]	; (8009014 <atanf+0x19c>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	dc0b      	bgt.n	8008f9e <atanf+0x126>
 8008f86:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f8e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008f92:	2302      	movs	r3, #2
 8008f94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f9c:	e7af      	b.n	8008efe <atanf+0x86>
 8008f9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008fa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e7a9      	b.n	8008efe <atanf+0x86>
 8008faa:	4a1b      	ldr	r2, [pc, #108]	; (8009018 <atanf+0x1a0>)
 8008fac:	491b      	ldr	r1, [pc, #108]	; (800901c <atanf+0x1a4>)
 8008fae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008fb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008fb6:	edd3 6a00 	vldr	s13, [r3]
 8008fba:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fc4:	edd2 7a00 	vldr	s15, [r2]
 8008fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fcc:	bfb8      	it	lt
 8008fce:	eef1 7a67 	vneglt.f32	s15, s15
 8008fd2:	e760      	b.n	8008e96 <atanf+0x1e>
 8008fd4:	3fc90fdb 	.word	0x3fc90fdb
 8008fd8:	bfc90fdb 	.word	0xbfc90fdb
 8008fdc:	3edfffff 	.word	0x3edfffff
 8008fe0:	7149f2ca 	.word	0x7149f2ca
 8008fe4:	3f97ffff 	.word	0x3f97ffff
 8008fe8:	3c8569d7 	.word	0x3c8569d7
 8008fec:	3d4bda59 	.word	0x3d4bda59
 8008ff0:	bd6ef16b 	.word	0xbd6ef16b
 8008ff4:	3d886b35 	.word	0x3d886b35
 8008ff8:	3dba2e6e 	.word	0x3dba2e6e
 8008ffc:	3e124925 	.word	0x3e124925
 8009000:	3eaaaaab 	.word	0x3eaaaaab
 8009004:	bd15a221 	.word	0xbd15a221
 8009008:	bd9d8795 	.word	0xbd9d8795
 800900c:	bde38e38 	.word	0xbde38e38
 8009010:	be4ccccd 	.word	0xbe4ccccd
 8009014:	401bffff 	.word	0x401bffff
 8009018:	08009144 	.word	0x08009144
 800901c:	08009154 	.word	0x08009154

08009020 <fabsf>:
 8009020:	ee10 3a10 	vmov	r3, s0
 8009024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009028:	ee00 3a10 	vmov	s0, r3
 800902c:	4770      	bx	lr

0800902e <with_errnof>:
 800902e:	b513      	push	{r0, r1, r4, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009036:	f7ff fcd3 	bl	80089e0 <__errno>
 800903a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800903e:	6004      	str	r4, [r0, #0]
 8009040:	b002      	add	sp, #8
 8009042:	bd10      	pop	{r4, pc}

08009044 <xflowf>:
 8009044:	b130      	cbz	r0, 8009054 <xflowf+0x10>
 8009046:	eef1 7a40 	vneg.f32	s15, s0
 800904a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800904e:	2022      	movs	r0, #34	; 0x22
 8009050:	f7ff bfed 	b.w	800902e <with_errnof>
 8009054:	eef0 7a40 	vmov.f32	s15, s0
 8009058:	e7f7      	b.n	800904a <xflowf+0x6>
	...

0800905c <__math_uflowf>:
 800905c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009064 <__math_uflowf+0x8>
 8009060:	f7ff bff0 	b.w	8009044 <xflowf>
 8009064:	10000000 	.word	0x10000000

08009068 <__math_oflowf>:
 8009068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009070 <__math_oflowf+0x8>
 800906c:	f7ff bfea 	b.w	8009044 <xflowf>
 8009070:	70000000 	.word	0x70000000

08009074 <_init>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr

08009080 <_fini>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr
