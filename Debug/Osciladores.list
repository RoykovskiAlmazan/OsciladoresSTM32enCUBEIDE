
Osciladores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a504  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a794  0800a794  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a794  0800a794  0001a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a79c  0800a79c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800a7a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000af0  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b98  20000b98  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014ca5  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034ff  00000000  00000000  00034dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f88  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bcb  00000000  00000000  00039248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000233f9  00000000  00000000  00039e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e1f  00000000  00000000  0005d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca844  00000000  00000000  0007202b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000458c  00000000  00000000  0013c870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00140dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a674 	.word	0x0800a674

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	0800a674 	.word	0x0800a674

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <calcular_z3_z4>:
float atractores8 = 0.0f;
float sumatoria7 = 0.0f;
float sumatoria8 = 0.0f;
float x_new, y_new, z3_new, z4_new,z1_new, z2_new, z5_new, z6_new, z7_new, z8_new;

void calcular_z3_z4() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	ed2d 8b02 	vpush	{d8}
 80004ca:	b09a      	sub	sp, #104	; 0x68
 80004cc:	af00      	add	r7, sp, #0
	theta = atan2f(y, x);
 80004ce:	4bb8      	ldr	r3, [pc, #736]	; (80007b0 <calcular_z3_z4+0x2ec>)
 80004d0:	edd3 7a00 	vldr	s15, [r3]
 80004d4:	4bb7      	ldr	r3, [pc, #732]	; (80007b4 <calcular_z3_z4+0x2f0>)
 80004d6:	ed93 7a00 	vldr	s14, [r3]
 80004da:	eef0 0a47 	vmov.f32	s1, s14
 80004de:	eeb0 0a67 	vmov.f32	s0, s15
 80004e2:	f009 fd53 	bl	8009f8c <atan2f>
 80004e6:	eef0 7a40 	vmov.f32	s15, s0
 80004ea:	4bb3      	ldr	r3, [pc, #716]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80004ec:	edc3 7a00 	vstr	s15, [r3]
	        if (theta < 0.0f) { //Calculo de tyheta
 80004f0:	4bb1      	ldr	r3, [pc, #708]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80004f2:	edd3 7a00 	vldr	s15, [r3]
 80004f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fe:	d509      	bpl.n	8000514 <calcular_z3_z4+0x50>
	            theta += 2.0f * PI;
 8000500:	4bad      	ldr	r3, [pc, #692]	; (80007b8 <calcular_z3_z4+0x2f4>)
 8000502:	edd3 7a00 	vldr	s15, [r3]
 8000506:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80007bc <calcular_z3_z4+0x2f8>
 800050a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800050e:	4baa      	ldr	r3, [pc, #680]	; (80007b8 <calcular_z3_z4+0x2f4>)
 8000510:	edc3 7a00 	vstr	s15, [r3]
 __       ___          __   ___                ___  ___  __            __  __          ___  __   __
|__)  /\   |   /\     |  \ |__  |     /\  |\ |  |  |__  |__)  /\     |  / /  \ |  | | |__  |__) |  \  /\
|    /~~\  |  /~~\    |__/ |___ |___ /~~\ | \|  |  |___ |  \ /~~\    | /_ \__X \__/ | |___ |  \ |__/ /~~\
	        	 *
	        	 * */
	        	atractores3 = 0.0f;
 8000514:	4baa      	ldr	r3, [pc, #680]	; (80007c0 <calcular_z3_z4+0x2fc>)
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N1; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	667b      	str	r3, [r7, #100]	; 0x64
 8000520:	e02f      	b.n	8000582 <calcular_z3_z4+0xbe>
	            	atractores3 += a1[i] * expf(-b1[i] * fabsf(theta - deltaTheta1[i]));
 8000522:	4aa8      	ldr	r2, [pc, #672]	; (80007c4 <calcular_z3_z4+0x300>)
 8000524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	ed93 8a00 	vldr	s16, [r3]
 800052e:	4aa6      	ldr	r2, [pc, #664]	; (80007c8 <calcular_z3_z4+0x304>)
 8000530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	edd3 7a00 	vldr	s15, [r3]
 800053a:	eeb1 7a67 	vneg.f32	s14, s15
 800053e:	4b9e      	ldr	r3, [pc, #632]	; (80007b8 <calcular_z3_z4+0x2f4>)
 8000540:	edd3 6a00 	vldr	s13, [r3]
 8000544:	4aa1      	ldr	r2, [pc, #644]	; (80007cc <calcular_z3_z4+0x308>)
 8000546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	edd3 7a00 	vldr	s15, [r3]
 8000550:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000554:	eef0 7ae7 	vabs.f32	s15, s15
 8000558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800055c:	eeb0 0a67 	vmov.f32	s0, s15
 8000560:	f009 fd16 	bl	8009f90 <expf>
 8000564:	eef0 7a40 	vmov.f32	s15, s0
 8000568:	ee28 7a27 	vmul.f32	s14, s16, s15
 800056c:	4b94      	ldr	r3, [pc, #592]	; (80007c0 <calcular_z3_z4+0x2fc>)
 800056e:	edd3 7a00 	vldr	s15, [r3]
 8000572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000576:	4b92      	ldr	r3, [pc, #584]	; (80007c0 <calcular_z3_z4+0x2fc>)
 8000578:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N1; i++) {
 800057c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800057e:	3301      	adds	r3, #1
 8000580:	667b      	str	r3, [r7, #100]	; 0x64
 8000582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000584:	2b02      	cmp	r3, #2
 8000586:	ddcc      	ble.n	8000522 <calcular_z3_z4+0x5e>
	            }

	            atractores4 = 0.0f;
 8000588:	4b91      	ldr	r3, [pc, #580]	; (80007d0 <calcular_z3_z4+0x30c>)
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N4; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	663b      	str	r3, [r7, #96]	; 0x60
 8000594:	e02f      	b.n	80005f6 <calcular_z3_z4+0x132>
	            	atractores4 += a4[i] * expf(-b4[i] * fabsf(theta - deltaTheta4[i]));
 8000596:	4a8f      	ldr	r2, [pc, #572]	; (80007d4 <calcular_z3_z4+0x310>)
 8000598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	ed93 8a00 	vldr	s16, [r3]
 80005a2:	4a8d      	ldr	r2, [pc, #564]	; (80007d8 <calcular_z3_z4+0x314>)
 80005a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	eeb1 7a67 	vneg.f32	s14, s15
 80005b2:	4b81      	ldr	r3, [pc, #516]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80005b4:	edd3 6a00 	vldr	s13, [r3]
 80005b8:	4a88      	ldr	r2, [pc, #544]	; (80007dc <calcular_z3_z4+0x318>)
 80005ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	edd3 7a00 	vldr	s15, [r3]
 80005c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005c8:	eef0 7ae7 	vabs.f32	s15, s15
 80005cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	f009 fcdc 	bl	8009f90 <expf>
 80005d8:	eef0 7a40 	vmov.f32	s15, s0
 80005dc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80005e0:	4b7b      	ldr	r3, [pc, #492]	; (80007d0 <calcular_z3_z4+0x30c>)
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ea:	4b79      	ldr	r3, [pc, #484]	; (80007d0 <calcular_z3_z4+0x30c>)
 80005ec:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N4; i++) {
 80005f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005f2:	3301      	adds	r3, #1
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
 80005f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	ddcc      	ble.n	8000596 <calcular_z3_z4+0xd2>
|__)  /\   |   /\      |  |__)  /\  /__` |__  |__)  /\     |  / /  \ |  | | |__  |__) |  \  /\
|    /~~\  |  /~~\     |  |  \ /~~\ .__/ |___ |  \ /~~\    | /_ \__X \__/ | |___ |  \ |__/ /~~\
	             *
	             * */

	            atractores1 = 0.0f;
 80005fc:	4b78      	ldr	r3, [pc, #480]	; (80007e0 <calcular_z3_z4+0x31c>)
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000608:	e03b      	b.n	8000682 <calcular_z3_z4+0x1be>
					atractores1 += a1[i] * expf(-b1[i] * fabsf(fmodf(theta + PI / 2, 2 * PI) - deltaTheta1[i]));
 800060a:	4a6e      	ldr	r2, [pc, #440]	; (80007c4 <calcular_z3_z4+0x300>)
 800060c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	ed93 8a00 	vldr	s16, [r3]
 8000616:	4a6c      	ldr	r2, [pc, #432]	; (80007c8 <calcular_z3_z4+0x304>)
 8000618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	eef1 8a67 	vneg.f32	s17, s15
 8000626:	4b64      	ldr	r3, [pc, #400]	; (80007b8 <calcular_z3_z4+0x2f4>)
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80007e4 <calcular_z3_z4+0x320>
 8000630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000634:	eddf 0a61 	vldr	s1, [pc, #388]	; 80007bc <calcular_z3_z4+0x2f8>
 8000638:	eeb0 0a67 	vmov.f32	s0, s15
 800063c:	f009 fcde 	bl	8009ffc <fmodf>
 8000640:	eeb0 7a40 	vmov.f32	s14, s0
 8000644:	4a61      	ldr	r2, [pc, #388]	; (80007cc <calcular_z3_z4+0x308>)
 8000646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	edd3 7a00 	vldr	s15, [r3]
 8000650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000654:	eef0 7ae7 	vabs.f32	s15, s15
 8000658:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800065c:	eeb0 0a67 	vmov.f32	s0, s15
 8000660:	f009 fc96 	bl	8009f90 <expf>
 8000664:	eef0 7a40 	vmov.f32	s15, s0
 8000668:	ee28 7a27 	vmul.f32	s14, s16, s15
 800066c:	4b5c      	ldr	r3, [pc, #368]	; (80007e0 <calcular_z3_z4+0x31c>)
 800066e:	edd3 7a00 	vldr	s15, [r3]
 8000672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000676:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <calcular_z3_z4+0x31c>)
 8000678:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 800067c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800067e:	3301      	adds	r3, #1
 8000680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000684:	2b02      	cmp	r3, #2
 8000686:	ddc0      	ble.n	800060a <calcular_z3_z4+0x146>
				}

				// C�?LCULO DE ATRACTORES PARA OSCILADOR 4
				atractores2 = 0.0f;
 8000688:	4b57      	ldr	r3, [pc, #348]	; (80007e8 <calcular_z3_z4+0x324>)
 800068a:	f04f 0200 	mov.w	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 8000690:	2300      	movs	r3, #0
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
 8000694:	e03b      	b.n	800070e <calcular_z3_z4+0x24a>
					atractores2 += a4[i] * expf(-b4[i] * fabsf(fmodf(theta + PI / 2, 2 * PI) - deltaTheta4[i]));
 8000696:	4a4f      	ldr	r2, [pc, #316]	; (80007d4 <calcular_z3_z4+0x310>)
 8000698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	ed93 8a00 	vldr	s16, [r3]
 80006a2:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <calcular_z3_z4+0x314>)
 80006a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eef1 8a67 	vneg.f32	s17, s15
 80006b2:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80007e4 <calcular_z3_z4+0x320>
 80006bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c0:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80007bc <calcular_z3_z4+0x2f8>
 80006c4:	eeb0 0a67 	vmov.f32	s0, s15
 80006c8:	f009 fc98 	bl	8009ffc <fmodf>
 80006cc:	eeb0 7a40 	vmov.f32	s14, s0
 80006d0:	4a42      	ldr	r2, [pc, #264]	; (80007dc <calcular_z3_z4+0x318>)
 80006d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	edd3 7a00 	vldr	s15, [r3]
 80006dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e0:	eef0 7ae7 	vabs.f32	s15, s15
 80006e4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80006e8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ec:	f009 fc50 	bl	8009f90 <expf>
 80006f0:	eef0 7a40 	vmov.f32	s15, s0
 80006f4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <calcular_z3_z4+0x324>)
 80006fa:	edd3 7a00 	vldr	s15, [r3]
 80006fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <calcular_z3_z4+0x324>)
 8000704:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 8000708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800070a:	3301      	adds	r3, #1
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
 800070e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000710:	2b03      	cmp	r3, #3
 8000712:	ddc0      	ble.n	8000696 <calcular_z3_z4+0x1d2>
 *
 * */



				atractores7 = 0.0f;
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <calcular_z3_z4+0x328>)
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 800071c:	2300      	movs	r3, #0
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
 8000720:	e03b      	b.n	800079a <calcular_z3_z4+0x2d6>
					atractores7 += a1[i] * expf(-b1[i] * fabsf(fmodf(theta + PI, 2 * PI) - deltaTheta1[i]));
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <calcular_z3_z4+0x300>)
 8000724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	ed93 8a00 	vldr	s16, [r3]
 800072e:	4a26      	ldr	r2, [pc, #152]	; (80007c8 <calcular_z3_z4+0x304>)
 8000730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	edd3 7a00 	vldr	s15, [r3]
 800073a:	eef1 8a67 	vneg.f32	s17, s15
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <calcular_z3_z4+0x2f4>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80007f0 <calcular_z3_z4+0x32c>
 8000748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800074c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80007bc <calcular_z3_z4+0x2f8>
 8000750:	eeb0 0a67 	vmov.f32	s0, s15
 8000754:	f009 fc52 	bl	8009ffc <fmodf>
 8000758:	eeb0 7a40 	vmov.f32	s14, s0
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <calcular_z3_z4+0x308>)
 800075e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076c:	eef0 7ae7 	vabs.f32	s15, s15
 8000770:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000774:	eeb0 0a67 	vmov.f32	s0, s15
 8000778:	f009 fc0a 	bl	8009f90 <expf>
 800077c:	eef0 7a40 	vmov.f32	s15, s0
 8000780:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <calcular_z3_z4+0x328>)
 8000786:	edd3 7a00 	vldr	s15, [r3]
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <calcular_z3_z4+0x328>)
 8000790:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 8000794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000796:	3301      	adds	r3, #1
 8000798:	657b      	str	r3, [r7, #84]	; 0x54
 800079a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800079c:	2b02      	cmp	r3, #2
 800079e:	ddc0      	ble.n	8000722 <calcular_z3_z4+0x25e>
				}

				// C�?LCULO DE ATRACTORES PARA OSCILADOR 4
				atractores8 = 0.0f;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <calcular_z3_z4+0x330>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	653b      	str	r3, [r7, #80]	; 0x50
 80007ac:	e060      	b.n	8000870 <calcular_z3_z4+0x3ac>
 80007ae:	bf00      	nop
 80007b0:	20000200 	.word	0x20000200
 80007b4:	20000000 	.word	0x20000000
 80007b8:	200001f8 	.word	0x200001f8
 80007bc:	40c90fdb 	.word	0x40c90fdb
 80007c0:	20000244 	.word	0x20000244
 80007c4:	0800a6d0 	.word	0x0800a6d0
 80007c8:	0800a6dc 	.word	0x0800a6dc
 80007cc:	0800a6e8 	.word	0x0800a6e8
 80007d0:	20000248 	.word	0x20000248
 80007d4:	0800a6f4 	.word	0x0800a6f4
 80007d8:	0800a704 	.word	0x0800a704
 80007dc:	0800a714 	.word	0x0800a714
 80007e0:	2000024c 	.word	0x2000024c
 80007e4:	3fc90fdb 	.word	0x3fc90fdb
 80007e8:	20000250 	.word	0x20000250
 80007ec:	2000025c 	.word	0x2000025c
 80007f0:	40490fdb 	.word	0x40490fdb
 80007f4:	20000260 	.word	0x20000260
					atractores8 += a4[i] * expf(-b4[i] * fabsf(fmodf(theta + PI, 2 * PI) - deltaTheta4[i]));
 80007f8:	4a46      	ldr	r2, [pc, #280]	; (8000914 <calcular_z3_z4+0x450>)
 80007fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	ed93 8a00 	vldr	s16, [r3]
 8000804:	4a44      	ldr	r2, [pc, #272]	; (8000918 <calcular_z3_z4+0x454>)
 8000806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	edd3 7a00 	vldr	s15, [r3]
 8000810:	eef1 8a67 	vneg.f32	s17, s15
 8000814:	4b41      	ldr	r3, [pc, #260]	; (800091c <calcular_z3_z4+0x458>)
 8000816:	edd3 7a00 	vldr	s15, [r3]
 800081a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000920 <calcular_z3_z4+0x45c>
 800081e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000822:	eddf 0a40 	vldr	s1, [pc, #256]	; 8000924 <calcular_z3_z4+0x460>
 8000826:	eeb0 0a67 	vmov.f32	s0, s15
 800082a:	f009 fbe7 	bl	8009ffc <fmodf>
 800082e:	eeb0 7a40 	vmov.f32	s14, s0
 8000832:	4a3d      	ldr	r2, [pc, #244]	; (8000928 <calcular_z3_z4+0x464>)
 8000834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000842:	eef0 7ae7 	vabs.f32	s15, s15
 8000846:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800084a:	eeb0 0a67 	vmov.f32	s0, s15
 800084e:	f009 fb9f 	bl	8009f90 <expf>
 8000852:	eef0 7a40 	vmov.f32	s15, s0
 8000856:	ee28 7a27 	vmul.f32	s14, s16, s15
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <calcular_z3_z4+0x468>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <calcular_z3_z4+0x468>)
 8000866:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 800086a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800086c:	3301      	adds	r3, #1
 800086e:	653b      	str	r3, [r7, #80]	; 0x50
 8000870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000872:	2b03      	cmp	r3, #3
 8000874:	ddc0      	ble.n	80007f8 <calcular_z3_z4+0x334>
 __       ___         ___  __        __   ___  __           __   ___  __   ___  __
|__)  /\   |   /\      |  |__)  /\  /__` |__  |__)  /\     |  \ |__  |__) |__  /  ` |__|  /\
|    /~~\  |  /~~\     |  |  \ /~~\ .__/ |___ |  \ /~~\    |__/ |___ |  \ |___ \__, |  | /~~\
				 *
				 * */
				float theta_desfasado = fmodf(theta + 3 * PI / 2, 2 * PI);
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <calcular_z3_z4+0x458>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000930 <calcular_z3_z4+0x46c>
 8000880:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000884:	eddf 0a27 	vldr	s1, [pc, #156]	; 8000924 <calcular_z3_z4+0x460>
 8000888:	eeb0 0a67 	vmov.f32	s0, s15
 800088c:	f009 fbb6 	bl	8009ffc <fmodf>
 8000890:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44


				 atractores5 = 0.0f;
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <calcular_z3_z4+0x470>)
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008a0:	e02e      	b.n	8000900 <calcular_z3_z4+0x43c>
					atractores5 += a1[i] * expf(-b1[i] * fabsf(theta_desfasado - deltaTheta1[i]));
 80008a2:	4a25      	ldr	r2, [pc, #148]	; (8000938 <calcular_z3_z4+0x474>)
 80008a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	ed93 8a00 	vldr	s16, [r3]
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <calcular_z3_z4+0x478>)
 80008b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	eeb1 7a67 	vneg.f32	s14, s15
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <calcular_z3_z4+0x47c>)
 80008c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	edd3 7a00 	vldr	s15, [r3]
 80008ca:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80008ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008d2:	eef0 7ae7 	vabs.f32	s15, s15
 80008d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	f009 fb57 	bl	8009f90 <expf>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	ee28 7a27 	vmul.f32	s14, s16, s15
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <calcular_z3_z4+0x470>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <calcular_z3_z4+0x470>)
 80008f6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 80008fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008fc:	3301      	adds	r3, #1
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000902:	2b02      	cmp	r3, #2
 8000904:	ddcd      	ble.n	80008a2 <calcular_z3_z4+0x3de>
				}

				// C�?LCULO DE ATRACTORES PARA OSCILADOR 4
				atractores6 = 0.0f;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <calcular_z3_z4+0x480>)
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
 8000912:	e048      	b.n	80009a6 <calcular_z3_z4+0x4e2>
 8000914:	0800a6f4 	.word	0x0800a6f4
 8000918:	0800a704 	.word	0x0800a704
 800091c:	200001f8 	.word	0x200001f8
 8000920:	40490fdb 	.word	0x40490fdb
 8000924:	40c90fdb 	.word	0x40c90fdb
 8000928:	0800a714 	.word	0x0800a714
 800092c:	20000260 	.word	0x20000260
 8000930:	4096cbe4 	.word	0x4096cbe4
 8000934:	20000254 	.word	0x20000254
 8000938:	0800a6d0 	.word	0x0800a6d0
 800093c:	0800a6dc 	.word	0x0800a6dc
 8000940:	0800a6e8 	.word	0x0800a6e8
 8000944:	20000258 	.word	0x20000258
					atractores6 += a4[i] * expf(-b4[i] * fabsf(theta_desfasado - deltaTheta4[i]));
 8000948:	4adb      	ldr	r2, [pc, #876]	; (8000cb8 <calcular_z3_z4+0x7f4>)
 800094a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	ed93 8a00 	vldr	s16, [r3]
 8000954:	4ad9      	ldr	r2, [pc, #868]	; (8000cbc <calcular_z3_z4+0x7f8>)
 8000956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	eeb1 7a67 	vneg.f32	s14, s15
 8000964:	4ad6      	ldr	r2, [pc, #856]	; (8000cc0 <calcular_z3_z4+0x7fc>)
 8000966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000974:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000978:	eef0 7ae7 	vabs.f32	s15, s15
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f009 fb04 	bl	8009f90 <expf>
 8000988:	eef0 7a40 	vmov.f32	s15, s0
 800098c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000990:	4bcc      	ldr	r3, [pc, #816]	; (8000cc4 <calcular_z3_z4+0x800>)
 8000992:	edd3 7a00 	vldr	s15, [r3]
 8000996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800099a:	4bca      	ldr	r3, [pc, #808]	; (8000cc4 <calcular_z3_z4+0x800>)
 800099c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 80009a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a2:	3301      	adds	r3, #1
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80009a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	ddcd      	ble.n	8000948 <calcular_z3_z4+0x484>


	            // DIN�?MICA DE OSCILADORES (MÉTODO DE EULER)

	            // Cálculo de alpha
	            alpha = 1.0f - sqrtf(x * x + y * y);
 80009ac:	4bc6      	ldr	r3, [pc, #792]	; (8000cc8 <calcular_z3_z4+0x804>)
 80009ae:	ed93 7a00 	vldr	s14, [r3]
 80009b2:	4bc5      	ldr	r3, [pc, #788]	; (8000cc8 <calcular_z3_z4+0x804>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009bc:	4bc3      	ldr	r3, [pc, #780]	; (8000ccc <calcular_z3_z4+0x808>)
 80009be:	edd3 6a00 	vldr	s13, [r3]
 80009c2:	4bc2      	ldr	r3, [pc, #776]	; (8000ccc <calcular_z3_z4+0x808>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d0:	eeb0 0a67 	vmov.f32	s0, s15
 80009d4:	f009 fb32 	bl	800a03c <sqrtf>
 80009d8:	eef0 7a40 	vmov.f32	s15, s0
 80009dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e4:	4bba      	ldr	r3, [pc, #744]	; (8000cd0 <calcular_z3_z4+0x80c>)
 80009e6:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador base (x, y)
	            x_new = x + dt * (alpha * x - omega * y);
 80009ea:	4bb9      	ldr	r3, [pc, #740]	; (8000cd0 <calcular_z3_z4+0x80c>)
 80009ec:	ed93 7a00 	vldr	s14, [r3]
 80009f0:	4bb5      	ldr	r3, [pc, #724]	; (8000cc8 <calcular_z3_z4+0x804>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009fa:	4bb6      	ldr	r3, [pc, #728]	; (8000cd4 <calcular_z3_z4+0x810>)
 80009fc:	edd3 6a00 	vldr	s13, [r3]
 8000a00:	4bb2      	ldr	r3, [pc, #712]	; (8000ccc <calcular_z3_z4+0x808>)
 8000a02:	edd3 7a00 	vldr	s15, [r3]
 8000a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a0e:	4bb2      	ldr	r3, [pc, #712]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a18:	4bab      	ldr	r3, [pc, #684]	; (8000cc8 <calcular_z3_z4+0x804>)
 8000a1a:	edd3 7a00 	vldr	s15, [r3]
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	4bae      	ldr	r3, [pc, #696]	; (8000cdc <calcular_z3_z4+0x818>)
 8000a24:	edc3 7a00 	vstr	s15, [r3]
	            y_new = y + dt * (alpha * y + omega * x);
 8000a28:	4ba9      	ldr	r3, [pc, #676]	; (8000cd0 <calcular_z3_z4+0x80c>)
 8000a2a:	ed93 7a00 	vldr	s14, [r3]
 8000a2e:	4ba7      	ldr	r3, [pc, #668]	; (8000ccc <calcular_z3_z4+0x808>)
 8000a30:	edd3 7a00 	vldr	s15, [r3]
 8000a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a38:	4ba6      	ldr	r3, [pc, #664]	; (8000cd4 <calcular_z3_z4+0x810>)
 8000a3a:	edd3 6a00 	vldr	s13, [r3]
 8000a3e:	4ba2      	ldr	r3, [pc, #648]	; (8000cc8 <calcular_z3_z4+0x804>)
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a4c:	4ba2      	ldr	r3, [pc, #648]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000a4e:	edd3 7a00 	vldr	s15, [r3]
 8000a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a56:	4b9d      	ldr	r3, [pc, #628]	; (8000ccc <calcular_z3_z4+0x808>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a60:	4b9f      	ldr	r3, [pc, #636]	; (8000ce0 <calcular_z3_z4+0x81c>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 3
	            float primerTermino3 = -beta3 * (z3 - z0_1);
 8000a66:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8000ce4 <calcular_z3_z4+0x820>
 8000a6a:	eeb1 7a67 	vneg.f32	s14, s15
 8000a6e:	4b9e      	ldr	r3, [pc, #632]	; (8000ce8 <calcular_z3_z4+0x824>)
 8000a70:	edd3 7a00 	vldr	s15, [r3]
 8000a74:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000cec <calcular_z3_z4+0x828>
 8000a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	            float dzdt3 = -primerTermino3 + atractores3;
 8000a84:	4b9a      	ldr	r3, [pc, #616]	; (8000cf0 <calcular_z3_z4+0x82c>)
 8000a86:	ed93 7a00 	vldr	s14, [r3]
 8000a8a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	            z3_new = z3 + dzdt3 * dt;
 8000a96:	4b90      	ldr	r3, [pc, #576]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000a98:	ed93 7a00 	vldr	s14, [r3]
 8000a9c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aa4:	4b90      	ldr	r3, [pc, #576]	; (8000ce8 <calcular_z3_z4+0x824>)
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	4b91      	ldr	r3, [pc, #580]	; (8000cf4 <calcular_z3_z4+0x830>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 4
	            float primerTermino4 = -beta4 * (z4 - z0_4);
 8000ab4:	eddf 7a90 	vldr	s15, [pc, #576]	; 8000cf8 <calcular_z3_z4+0x834>
 8000ab8:	eeb1 7a67 	vneg.f32	s14, s15
 8000abc:	4b8f      	ldr	r3, [pc, #572]	; (8000cfc <calcular_z3_z4+0x838>)
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8000d00 <calcular_z3_z4+0x83c>
 8000ac6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ace:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	            float dzdt4 = -primerTermino4 + atractores4;
 8000ad2:	4b8c      	ldr	r3, [pc, #560]	; (8000d04 <calcular_z3_z4+0x840>)
 8000ad4:	ed93 7a00 	vldr	s14, [r3]
 8000ad8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	            z4_new = z4 + dzdt4 * dt;
 8000ae4:	4b7c      	ldr	r3, [pc, #496]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000ae6:	ed93 7a00 	vldr	s14, [r3]
 8000aea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000af2:	4b82      	ldr	r3, [pc, #520]	; (8000cfc <calcular_z3_z4+0x838>)
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afc:	4b82      	ldr	r3, [pc, #520]	; (8000d08 <calcular_z3_z4+0x844>)
 8000afe:	edc3 7a00 	vstr	s15, [r3]


	            // Oscilador 3
				float primerTermino1 = -beta3 * (z1 - z0_1);
 8000b02:	eddf 7a78 	vldr	s15, [pc, #480]	; 8000ce4 <calcular_z3_z4+0x820>
 8000b06:	eeb1 7a67 	vneg.f32	s14, s15
 8000b0a:	4b80      	ldr	r3, [pc, #512]	; (8000d0c <calcular_z3_z4+0x848>)
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	eddf 6a76 	vldr	s13, [pc, #472]	; 8000cec <calcular_z3_z4+0x828>
 8000b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				float dzdt1 = -primerTermino1 + atractores1;
 8000b20:	4b7b      	ldr	r3, [pc, #492]	; (8000d10 <calcular_z3_z4+0x84c>)
 8000b22:	ed93 7a00 	vldr	s14, [r3]
 8000b26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				z1_new = z1 + dzdt1 * dt;
 8000b32:	4b69      	ldr	r3, [pc, #420]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000b34:	ed93 7a00 	vldr	s14, [r3]
 8000b38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b40:	4b72      	ldr	r3, [pc, #456]	; (8000d0c <calcular_z3_z4+0x848>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4a:	4b72      	ldr	r3, [pc, #456]	; (8000d14 <calcular_z3_z4+0x850>)
 8000b4c:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino2 = -beta4 * (z2 - z0_4);
 8000b50:	eddf 7a69 	vldr	s15, [pc, #420]	; 8000cf8 <calcular_z3_z4+0x834>
 8000b54:	eeb1 7a67 	vneg.f32	s14, s15
 8000b58:	4b6f      	ldr	r3, [pc, #444]	; (8000d18 <calcular_z3_z4+0x854>)
 8000b5a:	edd3 7a00 	vldr	s15, [r3]
 8000b5e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8000d00 <calcular_z3_z4+0x83c>
 8000b62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				float dzdt2 = -primerTermino2 + atractores2;
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <calcular_z3_z4+0x858>)
 8000b70:	ed93 7a00 	vldr	s14, [r3]
 8000b74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b7c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				z2_new = z2 + dzdt2 * dt;
 8000b80:	4b55      	ldr	r3, [pc, #340]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000b82:	ed93 7a00 	vldr	s14, [r3]
 8000b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8e:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <calcular_z3_z4+0x854>)
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <calcular_z3_z4+0x85c>)
 8000b9a:	edc3 7a00 	vstr	s15, [r3]

				float primerTermino5 = -beta3 * (z5 - z0_1);
 8000b9e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000ce4 <calcular_z3_z4+0x820>
 8000ba2:	eeb1 7a67 	vneg.f32	s14, s15
 8000ba6:	4b5f      	ldr	r3, [pc, #380]	; (8000d24 <calcular_z3_z4+0x860>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8000cec <calcular_z3_z4+0x828>
 8000bb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	edc7 7a08 	vstr	s15, [r7, #32]
				float dzdt5 = -primerTermino5 + atractores5;
 8000bbc:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <calcular_z3_z4+0x864>)
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bca:	edc7 7a07 	vstr	s15, [r7, #28]
				z5_new = z5 + dzdt5 * dt;
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000bd0:	ed93 7a00 	vldr	s14, [r3]
 8000bd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bdc:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <calcular_z3_z4+0x860>)
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be6:	4b51      	ldr	r3, [pc, #324]	; (8000d2c <calcular_z3_z4+0x868>)
 8000be8:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino6 = -beta4 * (z6 - z0_4);
 8000bec:	eddf 7a42 	vldr	s15, [pc, #264]	; 8000cf8 <calcular_z3_z4+0x834>
 8000bf0:	eeb1 7a67 	vneg.f32	s14, s15
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <calcular_z3_z4+0x86c>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000d00 <calcular_z3_z4+0x83c>
 8000bfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c06:	edc7 7a06 	vstr	s15, [r7, #24]
				float dzdt6 = -primerTermino6 + atractores6;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <calcular_z3_z4+0x800>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c18:	edc7 7a05 	vstr	s15, [r7, #20]
				z6_new = z6 + dzdt6 * dt;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000c1e:	ed93 7a00 	vldr	s14, [r3]
 8000c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c2a:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <calcular_z3_z4+0x86c>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <calcular_z3_z4+0x870>)
 8000c36:	edc3 7a00 	vstr	s15, [r3]


				// Oscilador 3
				float primerTermino7 = -beta3 * (z7 - z0_1);
 8000c3a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8000ce4 <calcular_z3_z4+0x820>
 8000c3e:	eeb1 7a67 	vneg.f32	s14, s15
 8000c42:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <calcular_z3_z4+0x874>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000cec <calcular_z3_z4+0x828>
 8000c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c54:	edc7 7a04 	vstr	s15, [r7, #16]
				float dzdt7 = -primerTermino7 + atractores7;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <calcular_z3_z4+0x878>)
 8000c5a:	ed93 7a00 	vldr	s14, [r3]
 8000c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c66:	edc7 7a03 	vstr	s15, [r7, #12]
				z7_new = z7 + dzdt7 * dt;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <calcular_z3_z4+0x874>)
 8000c7a:	edd3 7a00 	vldr	s15, [r3]
 8000c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <calcular_z3_z4+0x87c>)
 8000c84:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino8 = -beta4 * (z8 - z0_4);
 8000c88:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000cf8 <calcular_z3_z4+0x834>
 8000c8c:	eeb1 7a67 	vneg.f32	s14, s15
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <calcular_z3_z4+0x880>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000d00 <calcular_z3_z4+0x83c>
 8000c9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	edc7 7a02 	vstr	s15, [r7, #8]
				float dzdt8 = -primerTermino8 + atractores8;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <calcular_z3_z4+0x884>)
 8000ca8:	ed93 7a00 	vldr	s14, [r3]
 8000cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb4:	e04a      	b.n	8000d4c <calcular_z3_z4+0x888>
 8000cb6:	bf00      	nop
 8000cb8:	0800a6f4 	.word	0x0800a6f4
 8000cbc:	0800a704 	.word	0x0800a704
 8000cc0:	0800a714 	.word	0x0800a714
 8000cc4:	20000258 	.word	0x20000258
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000200 	.word	0x20000200
 8000cd0:	200001f4 	.word	0x200001f4
 8000cd4:	20000028 	.word	0x20000028
 8000cd8:	20000024 	.word	0x20000024
 8000cdc:	20000264 	.word	0x20000264
 8000ce0:	20000268 	.word	0x20000268
 8000ce4:	c285f190 	.word	0xc285f190
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	3f19999a 	.word	0x3f19999a
 8000cf0:	20000244 	.word	0x20000244
 8000cf4:	2000026c 	.word	0x2000026c
 8000cf8:	c0594af5 	.word	0xc0594af5
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	3edc28f6 	.word	0x3edc28f6
 8000d04:	20000248 	.word	0x20000248
 8000d08:	20000270 	.word	0x20000270
 8000d0c:	2000000c 	.word	0x2000000c
 8000d10:	2000024c 	.word	0x2000024c
 8000d14:	20000274 	.word	0x20000274
 8000d18:	20000010 	.word	0x20000010
 8000d1c:	20000250 	.word	0x20000250
 8000d20:	20000278 	.word	0x20000278
 8000d24:	20000014 	.word	0x20000014
 8000d28:	20000254 	.word	0x20000254
 8000d2c:	2000027c 	.word	0x2000027c
 8000d30:	20000018 	.word	0x20000018
 8000d34:	20000280 	.word	0x20000280
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	2000025c 	.word	0x2000025c
 8000d40:	20000284 	.word	0x20000284
 8000d44:	20000020 	.word	0x20000020
 8000d48:	20000260 	.word	0x20000260
 8000d4c:	edc7 7a01 	vstr	s15, [r7, #4]
				z8_new = z8 + dzdt8 * dt;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <calcular_z3_z4+0x908>)
 8000d52:	ed93 7a00 	vldr	s14, [r3]
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <calcular_z3_z4+0x90c>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <calcular_z3_z4+0x910>)
 8000d6a:	edc3 7a00 	vstr	s15, [r3]

	                // ACTUALIZAR ESTADO
	            x = x_new;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <calcular_z3_z4+0x914>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <calcular_z3_z4+0x918>)
 8000d74:	6013      	str	r3, [r2, #0]
	            y = y_new;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <calcular_z3_z4+0x91c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <calcular_z3_z4+0x920>)
 8000d7c:	6013      	str	r3, [r2, #0]

	            z3 = z3_new;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <calcular_z3_z4+0x924>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <calcular_z3_z4+0x928>)
 8000d84:	6013      	str	r3, [r2, #0]
	            z4 = z4_new;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <calcular_z3_z4+0x92c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <calcular_z3_z4+0x930>)
 8000d8c:	6013      	str	r3, [r2, #0]

	            z1 = z1_new;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <calcular_z3_z4+0x934>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <calcular_z3_z4+0x938>)
 8000d94:	6013      	str	r3, [r2, #0]
	            z2 = z2_new;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <calcular_z3_z4+0x93c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <calcular_z3_z4+0x940>)
 8000d9c:	6013      	str	r3, [r2, #0]

	            z5 = z5_new;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <calcular_z3_z4+0x944>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <calcular_z3_z4+0x948>)
 8000da4:	6013      	str	r3, [r2, #0]
				z6 = z6_new;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <calcular_z3_z4+0x94c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <calcular_z3_z4+0x950>)
 8000dac:	6013      	str	r3, [r2, #0]

				z7 = z7_new;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <calcular_z3_z4+0x954>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <calcular_z3_z4+0x958>)
 8000db4:	6013      	str	r3, [r2, #0]
				z8 = z8_new;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <calcular_z3_z4+0x910>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <calcular_z3_z4+0x90c>)
 8000dbc:	6013      	str	r3, [r2, #0]

}
 8000dbe:	bf00      	nop
 8000dc0:	3768      	adds	r7, #104	; 0x68
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	ecbd 8b02 	vpop	{d8}
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000024 	.word	0x20000024
 8000dd0:	20000020 	.word	0x20000020
 8000dd4:	20000288 	.word	0x20000288
 8000dd8:	20000264 	.word	0x20000264
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000268 	.word	0x20000268
 8000de4:	20000200 	.word	0x20000200
 8000de8:	2000026c 	.word	0x2000026c
 8000dec:	20000004 	.word	0x20000004
 8000df0:	20000270 	.word	0x20000270
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000274 	.word	0x20000274
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000278 	.word	0x20000278
 8000e04:	20000010 	.word	0x20000010
 8000e08:	2000027c 	.word	0x2000027c
 8000e0c:	20000014 	.word	0x20000014
 8000e10:	20000280 	.word	0x20000280
 8000e14:	20000018 	.word	0x20000018
 8000e18:	20000284 	.word	0x20000284
 8000e1c:	2000001c 	.word	0x2000001c

08000e20 <enviar_dato>:


void enviar_dato(uint8_t* dato, uint8_t size ){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart2, dato, size, HAL_MAX_DELAY);
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <enviar_dato+0x24>)
 8000e38:	f004 fa5b 	bl	80052f2 <HAL_UART_Transmit>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000164 	.word	0x20000164

08000e48 <datos_bluetooth>:
void datos_bluetooth(uint8_t* dato, uint8_t size){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, dato, size, HAL_MAX_DELAY);
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <datos_bluetooth+0x24>)
 8000e60:	f004 fa47 	bl	80052f2 <HAL_UART_Transmit>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001ac 	.word	0x200001ac

08000e70 <syncwrite_mover_servos>:

void syncwrite_mover_servos(uint8_t *ids, uint16_t *posiciones, uint8_t cantidad){
 8000e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e74:	b08d      	sub	sp, #52	; 0x34
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	466b      	mov	r3, sp
 8000e82:	461e      	mov	r6, r3
	const uint8_t INSTRUCCION = 0x83; //FUNCION SYNWRITE EN HEZADECIMAL UWU
 8000e84:	2383      	movs	r3, #131	; 0x83
 8000e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	const uint8_t ID_BROADCAST = 0xFE;
 8000e8a:	23fe      	movs	r3, #254	; 0xfe
 8000e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	const uint8_t START_ADDR = GOAL_POSITION_L;
 8000e90:	231e      	movs	r3, #30
 8000e92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	const uint8_t BYTES_POR_SERVO = 3; //es el id + 2 bytes de posicion
 8000e96:	2303      	movs	r3, #3
 8000e98:	f887 3020 	strb.w	r3, [r7, #32]
	// algo como 4 headers + N *3(id + 2 bytes) + 1 byte de cheksum

	uint8_t longitud = 4+ cantidad*BYTES_POR_SERVO;
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ea2:	fb12 f303 	smulbb	r3, r2, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	77fb      	strb	r3, [r7, #31]
	uint8_t paquete[6 + cantidad * BYTES_POR_SERVO];
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	1d99      	adds	r1, r3, #6
 8000eb8:	1e4b      	subs	r3, r1, #1
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ed0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ed4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ed8:	460a      	mov	r2, r1
 8000eda:	2300      	movs	r3, #0
 8000edc:	4614      	mov	r4, r2
 8000ede:	461d      	mov	r5, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	00eb      	lsls	r3, r5, #3
 8000eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000eee:	00e2      	lsls	r2, r4, #3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	3307      	adds	r3, #7
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	ebad 0d03 	sub.w	sp, sp, r3
 8000efc:	466b      	mov	r3, sp
 8000efe:	3300      	adds	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]

	int i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	    paquete[i++] = 0xFF;
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	21ff      	movs	r1, #255	; 0xff
 8000f10:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 0xFF;
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	21ff      	movs	r1, #255	; 0xff
 8000f1c:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = ID_BROADCAST;
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8000f2a:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = longitud;
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	7ff9      	ldrb	r1, [r7, #31]
 8000f36:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = INSTRUCCION;
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000f44:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = START_ADDR;
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000f52:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 2; // 2 bytes por dato (posición)
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	54d1      	strb	r1, [r2, r3]

	    for (uint8_t j = 0; j < cantidad; j++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f66:	e025      	b.n	8000fb4 <syncwrite_mover_servos+0x144>
	            uint16_t pos = posiciones[j];
 8000f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	827b      	strh	r3, [r7, #18]
	            paquete[i++] = ids[j];         // ID del servo
 8000f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	1c59      	adds	r1, r3, #1
 8000f82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000f84:	7811      	ldrb	r1, [r2, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = pos & 0xFF;     // LSB
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f90:	8a7a      	ldrh	r2, [r7, #18]
 8000f92:	b2d1      	uxtb	r1, r2
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = (pos >> 8) & 0xFF; // MSB
 8000f98:	8a7b      	ldrh	r3, [r7, #18]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000fa4:	b2c9      	uxtb	r1, r1
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	54d1      	strb	r1, [r2, r3]
	    for (uint8_t j = 0; j < cantidad; j++) {
 8000faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000fb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3d4      	bcc.n	8000f68 <syncwrite_mover_servos+0xf8>
	        }
	    //cheksum

	    uint8_t checksum = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	e00b      	b.n	8000fe2 <syncwrite_mover_servos+0x172>
	           checksum += paquete[j];
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	4413      	add	r3, r2
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3301      	adds	r3, #1
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dbef      	blt.n	8000fca <syncwrite_mover_servos+0x15a>
	       }
	       checksum = ~checksum;
 8000fea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       paquete[i++] = checksum;
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8001000:	54d1      	strb	r1, [r2, r3]

	       // Enviar por UART
	       enviar_dato(paquete, i);
 8001002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f7ff ff09 	bl	8000e20 <enviar_dato>
 800100e:	46b5      	mov	sp, r6
}
 8001010:	bf00      	nop
 8001012:	3734      	adds	r7, #52	; 0x34
 8001014:	46bd      	mov	sp, r7
 8001016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800101c <grados_a_posicion>:

uint16_t grados_a_posicion(float grados) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
    if (grados < 0.0f) grados = 0.0f;
 8001026:	edd7 7a01 	vldr	s15, [r7, #4]
 800102a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	d502      	bpl.n	800103a <grados_a_posicion+0x1e>
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
    if (grados > 300.0f) grados = 300.0f;
 800103a:	edd7 7a01 	vldr	s15, [r7, #4]
 800103e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001074 <grados_a_posicion+0x58>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd01      	ble.n	8001050 <grados_a_posicion+0x34>
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <grados_a_posicion+0x5c>)
 800104e:	607b      	str	r3, [r7, #4]
    return (uint16_t)(grados * (1023.0f / 300.0f));
 8001050:	edd7 7a01 	vldr	s15, [r7, #4]
 8001054:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800107c <grados_a_posicion+0x60>
 8001058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001060:	ee17 3a90 	vmov	r3, s15
 8001064:	b29b      	uxth	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	43960000 	.word	0x43960000
 8001078:	43960000 	.word	0x43960000
 800107c:	405a3d71 	.word	0x405a3d71

08001080 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_UART_RxCpltCallback+0x24>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d104      	bne.n	800109c <HAL_UART_RxCpltCallback+0x1c>
    {

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart3, &rxdata, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	4904      	ldr	r1, [pc, #16]	; (80010a8 <HAL_UART_RxCpltCallback+0x28>)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_RxCpltCallback+0x2c>)
 8001098:	f004 f9b6 	bl	8005408 <HAL_UART_Receive_IT>
    }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004800 	.word	0x40004800
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	200001ac 	.word	0x200001ac

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fe49 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f9d3 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 faef 	bl	80016a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010c2:	f000 fa39 	bl	8001538 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010c6:	f008 fb19 	bl	80096fc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80010ca:	f000 fa95 	bl	80015f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010ce:	f000 fa69 	bl	80015a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80010d2:	f000 fabb 	bl	800164c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rxdata, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	49c1      	ldr	r1, [pc, #772]	; (80013e0 <main+0x330>)
 80010da:	48c2      	ldr	r0, [pc, #776]	; (80013e4 <main+0x334>)
 80010dc:	f004 f994 	bl	8005408 <HAL_UART_Receive_IT>

  uint8_t id[] = {0, 1, 2,3,4,5,6,7,8,9,10,11};
 80010e0:	4ac1      	ldr	r2, [pc, #772]	; (80013e8 <main+0x338>)
 80010e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint16_t posicion[] = {512, 512, 410,512, 512, 410,512, 512, 410,512, 512, 410};
 80010ec:	4bbf      	ldr	r3, [pc, #764]	; (80013ec <main+0x33c>)
 80010ee:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80010f2:	461d      	mov	r5, r3
 80010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010fc:	e884 0003 	stmia.w	r4, {r0, r1}


  syncwrite_mover_servos(id, posicion, 12);
 8001100:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001108:	220c      	movs	r2, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff feb0 	bl	8000e70 <syncwrite_mover_servos>

  HAL_Delay(3000);
 8001110:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001114:	f000 fe8c 	bl	8001e30 <HAL_Delay>

  uint8_t mensaje[] = "Dato enviado por bluetooth";
 8001118:	4bb5      	ldr	r3, [pc, #724]	; (80013f0 <main+0x340>)
 800111a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800111e:	461d      	mov	r5, r3
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001128:	c403      	stmia	r4!, {r0, r1}
 800112a:	8022      	strh	r2, [r4, #0]
 800112c:	3402      	adds	r4, #2
 800112e:	0c13      	lsrs	r3, r2, #16
 8001130:	7023      	strb	r3, [r4, #0]

  datos_bluetooth(mensaje,sizeof(mensaje)-1);
 8001132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001136:	211a      	movs	r1, #26
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fe85 	bl	8000e48 <datos_bluetooth>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800113e:	f008 fb03 	bl	8009748 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    MX_USB_HOST_Process();
 8001142:	f008 fb01 	bl	8009748 <MX_USB_HOST_Process>
    calcular_z3_z4();
 8001146:	f7ff f9bd 	bl	80004c4 <calcular_z3_z4>

        z3_grados = (z3 * 40 + 135);		//24 +48 funciona decente
 800114a:	4baa      	ldr	r3, [pc, #680]	; (80013f4 <main+0x344>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013f8 <main+0x348>
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80013fc <main+0x34c>
 800115c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <main+0x350>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
        z4_grados = z4 * 38  + 98;				//DI 38 + 98 funciona descente
 8001166:	4ba7      	ldr	r3, [pc, #668]	; (8001404 <main+0x354>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001408 <main+0x358>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800140c <main+0x35c>
 8001178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800117c:	4ba4      	ldr	r3, [pc, #656]	; (8001410 <main+0x360>)
 800117e:	edc3 7a00 	vstr	s15, [r3]

        z7_grados = (z7 * 40 + 135);
 8001182:	4ba4      	ldr	r3, [pc, #656]	; (8001414 <main+0x364>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80013f8 <main+0x348>
 800118c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001190:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80013fc <main+0x34c>
 8001194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001198:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <main+0x368>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
        z8_grados = z8 * 38 + 98;				//DD
 800119e:	4b9f      	ldr	r3, [pc, #636]	; (800141c <main+0x36c>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001408 <main+0x358>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800140c <main+0x35c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	4b9a      	ldr	r3, [pc, #616]	; (8001420 <main+0x370>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]

        z1_grados = (z1 * 40 + 135);
 80011ba:	4b9a      	ldr	r3, [pc, #616]	; (8001424 <main+0x374>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80013f8 <main+0x348>
 80011c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80013fc <main+0x34c>
 80011cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d0:	4b95      	ldr	r3, [pc, #596]	; (8001428 <main+0x378>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
        z2_grados = z2 * 38  + 98;				//TI
 80011d6:	4b95      	ldr	r3, [pc, #596]	; (800142c <main+0x37c>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001408 <main+0x358>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800140c <main+0x35c>
 80011e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ec:	4b90      	ldr	r3, [pc, #576]	; (8001430 <main+0x380>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]

        z5_grados = (z5 * 40 + 135);			//TD
 80011f2:	4b90      	ldr	r3, [pc, #576]	; (8001434 <main+0x384>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80013f8 <main+0x348>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80013fc <main+0x34c>
 8001204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001208:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <main+0x388>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
        z6_grados = z6 * 38  + 98;
 800120e:	4b8b      	ldr	r3, [pc, #556]	; (800143c <main+0x38c>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001408 <main+0x358>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800140c <main+0x35c>
 8001220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <main+0x390>)
 8001226:	edc3 7a00 	vstr	s15, [r3]



        z3_posicion = grados_a_posicion(z3_grados);
 800122a:	4b75      	ldr	r3, [pc, #468]	; (8001400 <main+0x350>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	f7ff fef2 	bl	800101c <grados_a_posicion>
 8001238:	4603      	mov	r3, r0
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001242:	4b80      	ldr	r3, [pc, #512]	; (8001444 <main+0x394>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
        z4_posicion = grados_a_posicion(z4_grados);
 8001248:	4b71      	ldr	r3, [pc, #452]	; (8001410 <main+0x360>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	f7ff fee3 	bl	800101c <grados_a_posicion>
 8001256:	4603      	mov	r3, r0
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001260:	4b79      	ldr	r3, [pc, #484]	; (8001448 <main+0x398>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
        z1_posicion = grados_a_posicion(z1_grados);
 8001266:	4b70      	ldr	r3, [pc, #448]	; (8001428 <main+0x378>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	f7ff fed4 	bl	800101c <grados_a_posicion>
 8001274:	4603      	mov	r3, r0
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <main+0x39c>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
        z2_posicion = grados_a_posicion(z2_grados);
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <main+0x380>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f7ff fec5 	bl	800101c <grados_a_posicion>
 8001292:	4603      	mov	r3, r0
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129c:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <main+0x3a0>)
 800129e:	edc3 7a00 	vstr	s15, [r3]

        z5_posicion = grados_a_posicion(z5_grados);
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <main+0x388>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	f7ff feb6 	bl	800101c <grados_a_posicion>
 80012b0:	4603      	mov	r3, r0
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ba:	4b66      	ldr	r3, [pc, #408]	; (8001454 <main+0x3a4>)
 80012bc:	edc3 7a00 	vstr	s15, [r3]
        z6_posicion = grados_a_posicion(z6_grados);
 80012c0:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <main+0x390>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	f7ff fea7 	bl	800101c <grados_a_posicion>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <main+0x3a8>)
 80012da:	edc3 7a00 	vstr	s15, [r3]
        z7_posicion = grados_a_posicion(z7_grados);
 80012de:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <main+0x368>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	f7ff fe98 	bl	800101c <grados_a_posicion>
 80012ec:	4603      	mov	r3, r0
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <main+0x3ac>)
 80012f8:	edc3 7a00 	vstr	s15, [r3]
        z8_posicion = grados_a_posicion(z8_grados);
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <main+0x370>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	f7ff fe89 	bl	800101c <grados_a_posicion>
 800130a:	4603      	mov	r3, r0
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <main+0x3b0>)
 8001316:	edc3 7a00 	vstr	s15, [r3]

        uint8_t ids[] = {0, 1, 2,
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <main+0x338>)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	ca07      	ldmia	r2, {r0, r1, r2}
 8001322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        				3, 4, 5,
    					6, 7, 8,
    					9, 10, 11};

        uint16_t posiciones[] = {512, z3_posicion, z4_posicion,
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	80bb      	strh	r3, [r7, #4]
 800132c:	4b45      	ldr	r3, [pc, #276]	; (8001444 <main+0x394>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
 800133a:	b29b      	uxth	r3, r3
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <main+0x398>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 3a90 	vmov	r3, s15
 800134c:	b29b      	uxth	r3, r3
 800134e:	813b      	strh	r3, [r7, #8]
 8001350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <main+0x39c>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	b29b      	uxth	r3, r3
 8001366:	81bb      	strh	r3, [r7, #12]
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <main+0x3a0>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	b29b      	uxth	r3, r3
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	823b      	strh	r3, [r7, #16]
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <main+0x3a4>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	b29b      	uxth	r3, r3
 8001390:	827b      	strh	r3, [r7, #18]
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <main+0x3a8>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	82bb      	strh	r3, [r7, #20]
 80013a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a8:	82fb      	strh	r3, [r7, #22]
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <main+0x3ac>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b4:	ee17 3a90 	vmov	r3, s15
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	833b      	strh	r3, [r7, #24]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <main+0x3b0>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c6:	ee17 3a90 	vmov	r3, s15
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	837b      	strh	r3, [r7, #26]
        						512, z1_posicion, z2_posicion,
    							512, z5_posicion, z6_posicion,
    							512, z7_posicion, z8_posicion};


        syncwrite_mover_servos(ids, posiciones, 12);
 80013ce:	1d39      	adds	r1, r7, #4
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	220c      	movs	r2, #12
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd4a 	bl	8000e70 <syncwrite_mover_servos>
  {
 80013dc:	e6af      	b.n	800113e <main+0x8e>
 80013de:	bf00      	nop
 80013e0:	200001fc 	.word	0x200001fc
 80013e4:	200001ac 	.word	0x200001ac
 80013e8:	0800a68c 	.word	0x0800a68c
 80013ec:	0800a698 	.word	0x0800a698
 80013f0:	0800a6b0 	.word	0x0800a6b0
 80013f4:	20000004 	.word	0x20000004
 80013f8:	42200000 	.word	0x42200000
 80013fc:	43070000 	.word	0x43070000
 8001400:	20000204 	.word	0x20000204
 8001404:	20000008 	.word	0x20000008
 8001408:	42180000 	.word	0x42180000
 800140c:	42c40000 	.word	0x42c40000
 8001410:	20000208 	.word	0x20000208
 8001414:	2000001c 	.word	0x2000001c
 8001418:	2000021c 	.word	0x2000021c
 800141c:	20000020 	.word	0x20000020
 8001420:	20000220 	.word	0x20000220
 8001424:	2000000c 	.word	0x2000000c
 8001428:	2000020c 	.word	0x2000020c
 800142c:	20000010 	.word	0x20000010
 8001430:	20000210 	.word	0x20000210
 8001434:	20000014 	.word	0x20000014
 8001438:	20000214 	.word	0x20000214
 800143c:	20000018 	.word	0x20000018
 8001440:	20000218 	.word	0x20000218
 8001444:	20000224 	.word	0x20000224
 8001448:	20000228 	.word	0x20000228
 800144c:	2000022c 	.word	0x2000022c
 8001450:	20000230 	.word	0x20000230
 8001454:	20000234 	.word	0x20000234
 8001458:	20000238 	.word	0x20000238
 800145c:	2000023c 	.word	0x2000023c
 8001460:	20000240 	.word	0x20000240

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f008 fcfa 	bl	8009e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <SystemClock_Config+0xcc>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <SystemClock_Config+0xcc>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <SystemClock_Config+0xcc>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <SystemClock_Config+0xd0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <SystemClock_Config+0xd0>)
 80014ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <SystemClock_Config+0xd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e2:	2307      	movs	r3, #7
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 f938 	bl	8004760 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014f6:	f000 fa03 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fe:	2302      	movs	r3, #2
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001506:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2105      	movs	r1, #5
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fb99 	bl	8004c50 <HAL_RCC_ClockConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001524:	f000 f9ec 	bl	8001900 <Error_Handler>
  }
}
 8001528:	bf00      	nop
 800152a:	3750      	adds	r7, #80	; 0x50
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_SPI1_Init+0x64>)
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <MX_SPI1_Init+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_SPI1_Init+0x64>)
 8001544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_SPI1_Init+0x64>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SPI1_Init+0x64>)
 8001584:	220a      	movs	r2, #10
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_SPI1_Init+0x64>)
 800158a:	f003 fd81 	bl	8005090 <HAL_SPI_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001594:	f000 f9b4 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200000c4 	.word	0x200000c4
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_USART1_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART1_UART_Init+0x4c>)
 80015dc:	f003 fde1 	bl	80051a2 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f000 f98b 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000011c 	.word	0x2000011c
 80015f4:	40011000 	.word	0x40011000

080015f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x48>)
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_USART2_UART_Init+0x48>)
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <MX_USART2_UART_Init+0x50>)
 8001606:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_USART2_UART_Init+0x48>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x48>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_USART2_UART_Init+0x48>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x48>)
 800161c:	220c      	movs	r2, #12
 800161e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_USART2_UART_Init+0x48>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x48>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_USART2_UART_Init+0x48>)
 800162e:	f003 fe08 	bl	8005242 <HAL_HalfDuplex_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001638:	f000 f962 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000164 	.word	0x20000164
 8001644:	40004400 	.word	0x40004400
 8001648:	000f4240 	.word	0x000f4240

0800164c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART3_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001658:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800165c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART3_UART_Init+0x4c>)
 8001684:	f003 fd8d 	bl	80051a2 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f000 f937 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001ac 	.word	0x200001ac
 800169c:	40004800 	.word	0x40004800

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a8a      	ldr	r2, [pc, #552]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a83      	ldr	r2, [pc, #524]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a7c      	ldr	r2, [pc, #496]	; (80018e8 <MX_GPIO_Init+0x248>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <MX_GPIO_Init+0x248>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <MX_GPIO_Init+0x248>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a67      	ldr	r2, [pc, #412]	; (80018e8 <MX_GPIO_Init+0x248>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <MX_GPIO_Init+0x248>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2108      	movs	r1, #8
 8001762:	4862      	ldr	r0, [pc, #392]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001764:	f000 fec8 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2101      	movs	r1, #1
 800176c:	4860      	ldr	r0, [pc, #384]	; (80018f0 <MX_GPIO_Init+0x250>)
 800176e:	f000 fec3 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001772:	2200      	movs	r2, #0
 8001774:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001778:	485e      	ldr	r0, [pc, #376]	; (80018f4 <MX_GPIO_Init+0x254>)
 800177a:	f000 febd 	bl	80024f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800177e:	2308      	movs	r3, #8
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001796:	f000 fd13 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <MX_GPIO_Init+0x250>)
 80017b2:	f000 fd05 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017b6:	2308      	movs	r3, #8
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c6:	2305      	movs	r3, #5
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4847      	ldr	r0, [pc, #284]	; (80018f0 <MX_GPIO_Init+0x250>)
 80017d2:	f000 fcf5 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4843      	ldr	r0, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x258>)
 80017ec:	f000 fce8 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017f0:	2310      	movs	r3, #16
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	483b      	ldr	r0, [pc, #236]	; (80018f8 <MX_GPIO_Init+0x258>)
 800180c:	f000 fcd8 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001810:	2304      	movs	r3, #4
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4836      	ldr	r0, [pc, #216]	; (80018fc <MX_GPIO_Init+0x25c>)
 8001824:	f000 fccc 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183a:	2305      	movs	r3, #5
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	482d      	ldr	r0, [pc, #180]	; (80018fc <MX_GPIO_Init+0x25c>)
 8001846:	f000 fcbb 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800184a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800184e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <MX_GPIO_Init+0x254>)
 8001864:	f000 fcac 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 8001868:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800187a:	2306      	movs	r3, #6
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	481a      	ldr	r0, [pc, #104]	; (80018f0 <MX_GPIO_Init+0x250>)
 8001886:	f000 fc9b 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800188a:	2320      	movs	r3, #32
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4815      	ldr	r0, [pc, #84]	; (80018f4 <MX_GPIO_Init+0x254>)
 800189e:	f000 fc8f 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b4:	2304      	movs	r3, #4
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	480f      	ldr	r0, [pc, #60]	; (80018fc <MX_GPIO_Init+0x25c>)
 80018c0:	f000 fc7e 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_GPIO_Init+0x24c>)
 80018da:	f000 fc71 	bl	80021c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	; 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>
	...

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_MspInit+0x4c>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x4c>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800194a:	2007      	movs	r0, #7
 800194c:	f000 fb64 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_SPI_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12b      	bne.n	80019d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_SPI_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019b6:	23e0      	movs	r3, #224	; 0xe0
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c6:	2305      	movs	r3, #5
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_SPI_MspInit+0x8c>)
 80019d2:	f000 fbf5 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40013000 	.word	0x40013000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a67      	ldr	r2, [pc, #412]	; (8001ba8 <HAL_UART_MspInit+0x1bc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d135      	bne.n	8001a7a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a65      	ldr	r2, [pc, #404]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4853      	ldr	r0, [pc, #332]	; (8001bb0 <HAL_UART_MspInit+0x1c4>)
 8001a64:	f000 fbac 	bl	80021c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2025      	movs	r0, #37	; 0x25
 8001a6e:	f000 fade 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a72:	2025      	movs	r0, #37	; 0x25
 8001a74:	f000 faf7 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a78:	e092      	b.n	8001ba0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4d      	ldr	r2, [pc, #308]	; (8001bb4 <HAL_UART_MspInit+0x1c8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d134      	bne.n	8001aee <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b45      	ldr	r3, [pc, #276]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a40      	ldr	r2, [pc, #256]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001abc:	2304      	movs	r3, #4
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001acc:	2307      	movs	r3, #7
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4836      	ldr	r0, [pc, #216]	; (8001bb0 <HAL_UART_MspInit+0x1c4>)
 8001ad8:	f000 fb72 	bl	80021c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2026      	movs	r0, #38	; 0x26
 8001ae2:	f000 faa4 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f000 fabd 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 8001aec:	e058      	b.n	8001ba0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_UART_MspInit+0x1cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d153      	bne.n	8001ba0 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_UART_MspInit+0x1c0>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <HAL_UART_MspInit+0x1d0>)
 8001b6a:	f000 fb29 	bl	80021c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b80:	2307      	movs	r3, #7
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <HAL_UART_MspInit+0x1d4>)
 8001b8c:	f000 fb18 	bl	80021c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2027      	movs	r0, #39	; 0x27
 8001b96:	f000 fa4a 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b9a:	2027      	movs	r0, #39	; 0x27
 8001b9c:	f000 fa63 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3738      	adds	r7, #56	; 0x38
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40004800 	.word	0x40004800
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020c00 	.word	0x40020c00

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f8ee 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART1_IRQHandler+0x10>)
 8001c1e:	f003 fc19 	bl	8005454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000011c 	.word	0x2000011c

08001c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART2_IRQHandler+0x10>)
 8001c32:	f003 fc0f 	bl	8005454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000164 	.word	0x20000164

08001c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART3_IRQHandler+0x10>)
 8001c46:	f003 fc05 	bl	8005454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001ac 	.word	0x200001ac

08001c54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <OTG_FS_IRQHandler+0x10>)
 8001c5a:	f000 ff47 	bl	8002aec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000670 	.word	0x20000670

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f008 f900 	bl	8009e9c <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	2000028c 	.word	0x2000028c
 8001cd0:	20000b98 	.word	0x20000b98

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cfc:	f7ff ffea 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	; (8001d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	; (8001d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f008 f8bf 	bl	8009ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff f9c1 	bl	80010b0 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001d3c:	0800a7a4 	.word	0x0800a7a4
  ldr r2, =_sbss
 8001d40:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001d44:	20000b98 	.word	0x20000b98

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 f94f 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fdc4 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f967 	bl	8002082 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 f92f 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000002c 	.word	0x2000002c
 8001de8:	20000034 	.word	0x20000034
 8001dec:	20000030 	.word	0x20000030

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000034 	.word	0x20000034
 8001e14:	20000290 	.word	0x20000290

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000290 	.word	0x20000290

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000034 	.word	0x20000034

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff feb6 	bl	8001e18 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e052      	b.n	8002172 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0216 	bic.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <HAL_DMA_Abort+0x62>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	e013      	b.n	8002146 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211e:	f7ff fe7b 	bl	8001e18 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b05      	cmp	r3, #5
 800212a:	d90c      	bls.n	8002146 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e015      	b.n	8002172 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e4      	bne.n	800211e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	223f      	movs	r2, #63	; 0x3f
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d004      	beq.n	8002198 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00c      	b.n	80021b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2205      	movs	r2, #5
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e16b      	b.n	80024b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 815a 	bne.w	80024ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80b4 	beq.w	80024ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_GPIO_Init+0x30c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x310>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x314>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02b      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x318>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_GPIO_Init+0x31c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_GPIO_Init+0x320>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_GPIO_Init+0x324>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_GPIO_Init+0x328>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x20e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x20a>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ca:	2308      	movs	r3, #8
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x310>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_GPIO_Init+0x334>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae90 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af02      	add	r7, sp, #8
 8002530:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e059      	b.n	80025f0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f007 f92e 	bl	80097b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2203      	movs	r2, #3
 8002560:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256a:	d102      	bne.n	8002572 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 ff37 	bl	80063ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7c1a      	ldrb	r2, [r3, #16]
 8002584:	f88d 2000 	strb.w	r2, [sp]
 8002588:	3304      	adds	r3, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	f003 feb8 	bl	8006300 <USB_CoreInit>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e026      	b.n	80025f0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 ff2f 	bl	800640c <USB_SetCurrentMode>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e017      	b.n	80025f0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7c1a      	ldrb	r2, [r3, #16]
 80025c8:	f88d 2000 	strb.w	r2, [sp]
 80025cc:	3304      	adds	r3, #4
 80025ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d0:	f004 f8d2 	bl	8006778 <USB_HostInit>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e004      	b.n	80025f0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af04      	add	r7, sp, #16
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	70fb      	strb	r3, [r7, #3]
 800260a:	460b      	mov	r3, r1
 800260c:	70bb      	strb	r3, [r7, #2]
 800260e:	4613      	mov	r3, r2
 8002610:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002612:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002614:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_HCD_HC_Init+0x2c>
 8002620:	2302      	movs	r3, #2
 8002622:	e09d      	b.n	8002760 <HAL_HCD_HC_Init+0x168>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3319      	adds	r3, #25
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3314      	adds	r3, #20
 8002650:	787a      	ldrb	r2, [r7, #1]
 8002652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3315      	adds	r3, #21
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3326      	adds	r3, #38	; 0x26
 8002678:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800267c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	78bb      	ldrb	r3, [r7, #2]
 8002682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3316      	adds	r3, #22
 8002696:	4602      	mov	r2, r0
 8002698:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fbc8 	bl	8002e34 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0a      	bge.n	80026c2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3317      	adds	r3, #23
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e009      	b.n	80026d6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3317      	adds	r3, #23
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f9b0 	bl	8006a40 <USB_GetHostSpeed>
 80026e0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80026e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10b      	bne.n	8002702 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80026ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_HCD_HC_Init+0x10a>
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2bbc      	cmp	r3, #188	; 0xbc
 80026fc:	d901      	bls.n	8002702 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80026fe:	23bc      	movs	r3, #188	; 0xbc
 8002700:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3318      	adds	r3, #24
 8002712:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	b298      	uxth	r0, r3
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3328      	adds	r3, #40	; 0x28
 800272c:	4602      	mov	r2, r0
 800272e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	b29b      	uxth	r3, r3
 8002738:	787c      	ldrb	r4, [r7, #1]
 800273a:	78ba      	ldrb	r2, [r7, #2]
 800273c:	78f9      	ldrb	r1, [r7, #3]
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4623      	mov	r3, r4
 800274e:	f004 f99f 	bl	8006a90 <USB_HC_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}

08002768 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_HCD_HC_Halt+0x1e>
 8002782:	2302      	movs	r3, #2
 8002784:	e00f      	b.n	80027a6 <HAL_HCD_HC_Halt+0x3e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fd31 	bl	80071fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70bb      	strb	r3, [r7, #2]
 80027c6:	4613      	mov	r3, r2
 80027c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3317      	adds	r3, #23
 80027da:	78ba      	ldrb	r2, [r7, #2]
 80027dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3326      	adds	r3, #38	; 0x26
 80027ee:	787a      	ldrb	r2, [r7, #1]
 80027f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80027f2:	7c3b      	ldrb	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d114      	bne.n	8002822 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	332a      	adds	r3, #42	; 0x2a
 8002808:	2203      	movs	r2, #3
 800280a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3319      	adds	r3, #25
 800281c:	7f3a      	ldrb	r2, [r7, #28]
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e009      	b.n	8002836 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	332a      	adds	r3, #42	; 0x2a
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002836:	787b      	ldrb	r3, [r7, #1]
 8002838:	2b03      	cmp	r3, #3
 800283a:	f200 8102 	bhi.w	8002a42 <HAL_HCD_HC_SubmitRequest+0x292>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002855 	.word	0x08002855
 8002848:	08002a2d 	.word	0x08002a2d
 800284c:	08002919 	.word	0x08002919
 8002850:	080029a3 	.word	0x080029a3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002854:	7c3b      	ldrb	r3, [r7, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 80f5 	bne.w	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800285c:	78bb      	ldrb	r3, [r7, #2]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12d      	bne.n	80028be <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002862:	8b3b      	ldrh	r3, [r7, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	333d      	adds	r3, #61	; 0x3d
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	333d      	adds	r3, #61	; 0x3d
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	332a      	adds	r3, #42	; 0x2a
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028a6:	e0ce      	b.n	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	332a      	adds	r3, #42	; 0x2a
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
      break;
 80028bc:	e0c3      	b.n	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	331a      	adds	r3, #26
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 80b8 	bne.w	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	333c      	adds	r3, #60	; 0x3c
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
      break;
 8002900:	e0a1      	b.n	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	332a      	adds	r3, #42	; 0x2a
 8002912:	2202      	movs	r2, #2
 8002914:	701a      	strb	r2, [r3, #0]
      break;
 8002916:	e096      	b.n	8002a46 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002918:	78bb      	ldrb	r3, [r7, #2]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d120      	bne.n	8002960 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	332a      	adds	r3, #42	; 0x2a
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002948:	e07e      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332a      	adds	r3, #42	; 0x2a
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e073      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	333c      	adds	r3, #60	; 0x3c
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	332a      	adds	r3, #42	; 0x2a
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
      break;
 800298a:	e05d      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	332a      	adds	r3, #42	; 0x2a
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
      break;
 80029a0:	e052      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029a2:	78bb      	ldrb	r3, [r7, #2]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d120      	bne.n	80029ea <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333d      	adds	r3, #61	; 0x3d
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	332a      	adds	r3, #42	; 0x2a
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029d2:	e039      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	332a      	adds	r3, #42	; 0x2a
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e02e      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	333c      	adds	r3, #60	; 0x3c
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	332a      	adds	r3, #42	; 0x2a
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
      break;
 8002a14:	e018      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	332a      	adds	r3, #42	; 0x2a
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
      break;
 8002a2a:	e00d      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	332a      	adds	r3, #42	; 0x2a
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
      break;
 8002a40:	e002      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a46:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	332c      	adds	r3, #44	; 0x2c
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	8b39      	ldrh	r1, [r7, #24]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4403      	add	r3, r0
 8002a6c:	3334      	adds	r3, #52	; 0x34
 8002a6e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334c      	adds	r3, #76	; 0x4c
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3338      	adds	r3, #56	; 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3315      	adds	r3, #21
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334d      	adds	r3, #77	; 0x4d
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	3310      	adds	r3, #16
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	1d19      	adds	r1, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f004 f904 	bl	8006ce8 <USB_HC_StartXfer>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fdf8 	bl	80066f8 <USB_GetMode>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 80fb 	bne.w	8002d06 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fdbb 	bl	8006690 <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80f1 	beq.w	8002d04 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fdb2 	bl	8006690 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b36:	d104      	bne.n	8002b42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fda2 	bl	8006690 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b56:	d104      	bne.n	8002b62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fd92 	bl	8006690 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b76:	d104      	bne.n	8002b82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fd82 	bl	8006690 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fd74 	bl	8006690 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb2:	d120      	bne.n	8002bf6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d113      	bne.n	8002bf6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bce:	2110      	movs	r1, #16
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f003 fc67 	bl	80064a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bd6:	6938      	ldr	r0, [r7, #16]
 8002bd8:	f003 fc96 	bl	8006508 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7a5b      	ldrb	r3, [r3, #9]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d105      	bne.n	8002bf0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fe88 	bl	8006900 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f006 fe51 	bl	8009898 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fd48 	bl	8006690 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0a:	d102      	bne.n	8002c12 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f001 fd33 	bl	8004678 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fd3a 	bl	8006690 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d106      	bne.n	8002c34 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 fe1a 	bl	8009860 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fd29 	bl	8006690 <USB_ReadInterrupts>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c48:	d139      	bne.n	8002cbe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fac4 	bl	80071dc <USB_HC_ReadInterrupt>
 8002c54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e025      	b.n	8002ca8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d018      	beq.n	8002ca2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d106      	bne.n	8002c96 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f905 	bl	8002e9e <HCD_HC_IN_IRQHandler>
 8002c94:	e005      	b.n	8002ca2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 ff67 	bl	8003b70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	795b      	ldrb	r3, [r3, #5]
 8002cac:	461a      	mov	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d3d3      	bcc.n	8002c5c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fce4 	bl	8006690 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d101      	bne.n	8002cd6 <HAL_HCD_IRQHandler+0x1ea>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_HCD_IRQHandler+0x1ec>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d014      	beq.n	8002d06 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0210 	bic.w	r2, r2, #16
 8002cea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f001 fbe4 	bl	80044ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0210 	orr.w	r2, r2, #16
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	e000      	b.n	8002d06 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d04:	bf00      	nop
    }
  }
}
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_HCD_Start+0x16>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e013      	b.n	8002d4a <HAL_HCD_Start+0x3e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fe4c 	bl	80069ce <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 fb44 	bl	80063c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_HCD_Stop+0x16>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e00d      	b.n	8002d84 <HAL_HCD_Stop+0x32>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 fb9f 	bl	80074b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fdee 	bl	800697a <USB_ResetPort>
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	781b      	ldrb	r3, [r3, #0]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	3338      	adds	r3, #56	; 0x38
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fe30 	bl	8006a6e <USB_GetCurrentFrame>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fe0b 	bl	8006a40 <USB_GetHostSpeed>
 8002e2a:	4603      	mov	r3, r0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	331a      	adds	r3, #26
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	331b      	adds	r3, #27
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3325      	adds	r3, #37	; 0x25
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fbfa 	bl	80066b6 <USB_ReadChInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11a      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2304      	movs	r3, #4
 8002edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	334d      	adds	r3, #77	; 0x4d
 8002eee:	2207      	movs	r2, #7
 8002ef0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 f97f 	bl	80071fe <USB_HC_Halt>
 8002f00:	e09e      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fbd3 	bl	80066b6 <USB_ReadChInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d11b      	bne.n	8002f54 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334d      	adds	r3, #77	; 0x4d
 8002f40:	2208      	movs	r2, #8
 8002f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 f956 	bl	80071fe <USB_HC_Halt>
 8002f52:	e075      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 fbaa 	bl	80066b6 <USB_ReadChInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d11a      	bne.n	8002fa2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334d      	adds	r3, #77	; 0x4d
 8002f8e:	2206      	movs	r2, #6
 8002f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 f92f 	bl	80071fe <USB_HC_Halt>
 8002fa0:	e04e      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fb83 	bl	80066b6 <USB_ReadChInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d11b      	bne.n	8002ff4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	334d      	adds	r3, #77	; 0x4d
 8002fe0:	2209      	movs	r2, #9
 8002fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 f906 	bl	80071fe <USB_HC_Halt>
 8002ff2:	e025      	b.n	8003040 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fb5a 	bl	80066b6 <USB_ReadChInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d119      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	; 0x4d
 800302e:	2207      	movs	r2, #7
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f8df 	bl	80071fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fb34 	bl	80066b6 <USB_ReadChInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d112      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f004 f8cb 	bl	80071fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	f000 bd75 	b.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fb14 	bl	80066b6 <USB_ReadChInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	f040 8128 	bne.w	80032ea <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2320      	movs	r3, #32
 80030aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	331b      	adds	r3, #27
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d119      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	331b      	adds	r3, #27
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	799b      	ldrb	r3, [r3, #6]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01b      	beq.n	8003136 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3330      	adds	r3, #48	; 0x30
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	1ac9      	subs	r1, r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	3338      	adds	r3, #56	; 0x38
 8003134:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334d      	adds	r3, #77	; 0x4d
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3344      	adds	r3, #68	; 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3326      	adds	r3, #38	; 0x26
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3326      	adds	r3, #38	; 0x26
 8003196:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003198:	2b02      	cmp	r3, #2
 800319a:	d110      	bne.n	80031be <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 f82a 	bl	80071fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	2310      	movs	r3, #16
 80031ba:	6093      	str	r3, [r2, #8]
 80031bc:	e03d      	b.n	800323a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3326      	adds	r3, #38	; 0x26
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d00a      	beq.n	80031ea <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3326      	adds	r3, #38	; 0x26
 80031e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d127      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003208:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334c      	adds	r3, #76	; 0x4c
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334c      	adds	r3, #76	; 0x4c
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f006 fb3d 	bl	80098b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	799b      	ldrb	r3, [r3, #6]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d13b      	bne.n	80032ba <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4403      	add	r3, r0
 8003262:	3328      	adds	r3, #40	; 0x28
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	440b      	add	r3, r1
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	3328      	adds	r3, #40	; 0x28
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8470 	beq.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	333c      	adds	r3, #60	; 0x3c
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	f083 0301 	eor.w	r3, r3, #1
 80032a2:	b2d8      	uxtb	r0, r3
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	333c      	adds	r3, #60	; 0x3c
 80032b2:	4602      	mov	r2, r0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	f000 bc58 	b.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	333c      	adds	r3, #60	; 0x3c
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2d8      	uxtb	r0, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333c      	adds	r3, #60	; 0x3c
 80032e2:	4602      	mov	r2, r0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	f000 bc40 	b.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f9df 	bl	80066b6 <USB_ReadChInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d131      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	2320      	movs	r3, #32
 8003312:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	331a      	adds	r3, #26
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 841f 	bne.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	331b      	adds	r3, #27
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334d      	adds	r3, #77	; 0x4d
 8003350:	2203      	movs	r2, #3
 8003352:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f003 ff4e 	bl	80071fe <USB_HC_Halt>
 8003362:	f000 bc02 	b.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f003 f9a1 	bl	80066b6 <USB_ReadChInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	f040 8305 	bne.w	800398a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	2302      	movs	r3, #2
 8003390:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	; 0x4d
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d114      	bne.n	80033d2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	; 0x4d
 80033b8:	2202      	movs	r2, #2
 80033ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334c      	adds	r3, #76	; 0x4c
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e2cc      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334d      	adds	r3, #77	; 0x4d
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d114      	bne.n	8003412 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	; 0x4d
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	; 0x4c
 800340c:	2205      	movs	r2, #5
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e2ac      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	; 0x4d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b07      	cmp	r3, #7
 8003426:	d00b      	beq.n	8003440 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334d      	adds	r3, #77	; 0x4d
 8003438:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800343a:	2b09      	cmp	r3, #9
 800343c:	f040 80a6 	bne.w	800358c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334d      	adds	r3, #77	; 0x4d
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3344      	adds	r3, #68	; 0x44
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4403      	add	r3, r0
 8003474:	3344      	adds	r3, #68	; 0x44
 8003476:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3344      	adds	r3, #68	; 0x44
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d943      	bls.n	8003516 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3344      	adds	r3, #68	; 0x44
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	331a      	adds	r3, #26
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d123      	bne.n	8003500 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	331b      	adds	r3, #27
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	331c      	adds	r3, #28
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	0151      	lsls	r1, r2, #5
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	440a      	add	r2, r1
 80034f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	; 0x4c
 8003510:	2204      	movs	r2, #4
 8003512:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003514:	e229      	b.n	800396a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334c      	adds	r3, #76	; 0x4c
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3326      	adds	r3, #38	; 0x26
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3326      	adds	r3, #38	; 0x26
 8003550:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 8209 	bne.w	800396a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800356e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003576:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800358a:	e1ee      	b.n	800396a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	; 0x4d
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	f040 80c8 	bne.w	8003734 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334d      	adds	r3, #77	; 0x4d
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	331b      	adds	r3, #27
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 81ce 	bne.w	800396c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3326      	adds	r3, #38	; 0x26
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d16b      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3348      	adds	r3, #72	; 0x48
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c59      	adds	r1, r3, #1
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	3348      	adds	r3, #72	; 0x48
 8003608:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3348      	adds	r3, #72	; 0x48
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d943      	bls.n	80036a8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3348      	adds	r3, #72	; 0x48
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	331b      	adds	r3, #27
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3344      	adds	r3, #68	; 0x44
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d809      	bhi.n	8003672 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	331c      	adds	r3, #28
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	440a      	add	r2, r1
 8003688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003690:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	; 0x4c
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e014      	b.n	80036d2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334c      	adds	r3, #76	; 0x4c
 80036b8:	2202      	movs	r2, #2
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e009      	b.n	80036d2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334c      	adds	r3, #76	; 0x4c
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3326      	adds	r3, #38	; 0x26
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3326      	adds	r3, #38	; 0x26
 80036f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f040 8136 	bne.w	800396c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003716:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e11b      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334d      	adds	r3, #77	; 0x4d
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	f040 8081 	bne.w	800384e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	; 0x4d
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	331b      	adds	r3, #27
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	f040 80fa 	bne.w	800396c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	; 0x4c
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	0151      	lsls	r1, r2, #5
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	440a      	add	r2, r1
 80037a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ca:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e6:	f023 0320 	bic.w	r3, r3, #32
 80037ea:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3326      	adds	r3, #38	; 0x26
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	; 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 80a9 	bne.w	800396c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003830:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003838:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e08e      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	334d      	adds	r3, #77	; 0x4d
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d143      	bne.n	80038ec <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	334d      	adds	r3, #77	; 0x4d
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334c      	adds	r3, #76	; 0x4c
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	3326      	adds	r3, #38	; 0x26
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3326      	adds	r3, #38	; 0x26
 80038b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d159      	bne.n	800396c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e03f      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334d      	adds	r3, #77	; 0x4d
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d126      	bne.n	8003950 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334d      	adds	r3, #77	; 0x4d
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3344      	adds	r3, #68	; 0x44
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1c59      	adds	r1, r3, #1
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	3344      	adds	r3, #68	; 0x44
 8003938:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	334c      	adds	r3, #76	; 0x4c
 800394a:	2204      	movs	r2, #4
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e00d      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	334d      	adds	r3, #77	; 0x4d
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b02      	cmp	r3, #2
 8003964:	f000 8100 	beq.w	8003b68 <HCD_HC_IN_IRQHandler+0xcca>
 8003968:	e000      	b.n	800396c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800396a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	334c      	adds	r3, #76	; 0x4c
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f005 ff96 	bl	80098b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003988:	e0ef      	b.n	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fe8f 	bl	80066b6 <USB_ReadChInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d12f      	bne.n	8003a02 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334d      	adds	r3, #77	; 0x4d
 80039c4:	2205      	movs	r2, #5
 80039c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	331a      	adds	r3, #26
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3344      	adds	r3, #68	; 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fbff 	bl	80071fe <USB_HC_Halt>
 8003a00:	e0b3      	b.n	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 fe53 	bl	80066b6 <USB_ReadChInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	f040 80a7 	bne.w	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3326      	adds	r3, #38	; 0x26
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d11b      	bne.n	8003a6a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3344      	adds	r3, #68	; 0x44
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334d      	adds	r3, #77	; 0x4d
 8003a56:	2204      	movs	r2, #4
 8003a58:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 fbcb 	bl	80071fe <USB_HC_Halt>
 8003a68:	e03f      	b.n	8003aea <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3326      	adds	r3, #38	; 0x26
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3326      	adds	r3, #38	; 0x26
 8003a90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d129      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3344      	adds	r3, #68	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	799b      	ldrb	r3, [r3, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HCD_HC_IN_IRQHandler+0xc2a>
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	331b      	adds	r3, #27
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d110      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	334d      	adds	r3, #77	; 0x4d
 8003ad8:	2204      	movs	r2, #4
 8003ada:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fb8a 	bl	80071fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	331b      	adds	r3, #27
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d129      	bne.n	8003b54 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	331b      	adds	r3, #27
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	0151      	lsls	r1, r2, #5
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	440a      	add	r2, r1
 8003b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4e:	f043 0320 	orr.w	r3, r3, #32
 8003b52:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	461a      	mov	r2, r3
 8003b62:	2310      	movs	r3, #16
 8003b64:	6093      	str	r3, [r2, #8]
 8003b66:	e000      	b.n	8003b6a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003b68:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f002 fd91 	bl	80066b6 <USB_ReadChInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d11b      	bne.n	8003bd6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	461a      	mov	r2, r3
 8003bac:	2304      	movs	r3, #4
 8003bae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334d      	adds	r3, #77	; 0x4d
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fb16 	bl	80071fe <USB_HC_Halt>
 8003bd2:	f000 bc6f 	b.w	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 fd69 	bl	80066b6 <USB_ReadChInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	f040 8082 	bne.w	8003cf4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2320      	movs	r3, #32
 8003c00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3319      	adds	r3, #25
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d124      	bne.n	8003c62 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3319      	adds	r3, #25
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334c      	adds	r3, #76	; 0x4c
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	334d      	adds	r3, #77	; 0x4d
 8003c50:	2203      	movs	r2, #3
 8003c52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 face 	bl	80071fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	331a      	adds	r3, #26
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 841d 	bne.w	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	331b      	adds	r3, #27
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 8411 	bne.w	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3326      	adds	r3, #38	; 0x26
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d009      	beq.n	8003cbc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	331b      	adds	r3, #27
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334d      	adds	r3, #77	; 0x4d
 8003ccc:	2203      	movs	r2, #3
 8003cce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 fa90 	bl	80071fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3344      	adds	r3, #68	; 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e3df      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 fcda 	bl	80066b6 <USB_ReadChInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d111      	bne.n	8003d32 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 fa67 	bl	80071fe <USB_HC_Halt>
 8003d30:	e3c0      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f002 fcbb 	bl	80066b6 <USB_ReadChInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d168      	bne.n	8003e1c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3344      	adds	r3, #68	; 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f002 fca5 	bl	80066b6 <USB_ReadChInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d112      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3319      	adds	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	461a      	mov	r2, r3
 8003d98:	2340      	movs	r3, #64	; 0x40
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	331b      	adds	r3, #27
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	331b      	adds	r3, #27
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df2:	461a      	mov	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	; 0x4d
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 f9f2 	bl	80071fe <USB_HC_Halt>
 8003e1a:	e34b      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 fc46 	bl	80066b6 <USB_ReadChInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d139      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	; 0x4d
 8003e44:	2205      	movs	r2, #5
 8003e46:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	331a      	adds	r3, #26
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3319      	adds	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3344      	adds	r3, #68	; 0x44
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 f9b5 	bl	80071fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	e305      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f002 fc00 	bl	80066b6 <USB_ReadChInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d11a      	bne.n	8003ef6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2308      	movs	r3, #8
 8003ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334d      	adds	r3, #77	; 0x4d
 8003ee2:	2206      	movs	r2, #6
 8003ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 f985 	bl	80071fe <USB_HC_Halt>
 8003ef4:	e2de      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f002 fbd9 	bl	80066b6 <USB_ReadChInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d144      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3344      	adds	r3, #68	; 0x44
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334d      	adds	r3, #77	; 0x4d
 8003f32:	2204      	movs	r2, #4
 8003f34:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3319      	adds	r3, #25
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d114      	bne.n	8003f76 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3319      	adds	r3, #25
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f003 f93d 	bl	80071fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	2310      	movs	r3, #16
 8003f94:	6093      	str	r3, [r2, #8]
 8003f96:	e28d      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 fb88 	bl	80066b6 <USB_ReadChInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d169      	bne.n	8004084 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	799b      	ldrb	r3, [r3, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d111      	bne.n	8003fdc <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334d      	adds	r3, #77	; 0x4d
 8003fc8:	2207      	movs	r2, #7
 8003fca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 f912 	bl	80071fe <USB_HC_Halt>
 8003fda:	e049      	b.n	8004070 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3344      	adds	r3, #68	; 0x44
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4403      	add	r3, r0
 8003ffc:	3344      	adds	r3, #68	; 0x44
 8003ffe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3344      	adds	r3, #68	; 0x44
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d922      	bls.n	800405c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3344      	adds	r3, #68	; 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	334c      	adds	r3, #76	; 0x4c
 800403a:	2204      	movs	r2, #4
 800403c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	334c      	adds	r3, #76	; 0x4c
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f005 fc2d 	bl	80098b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800405a:	e009      	b.n	8004070 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334c      	adds	r3, #76	; 0x4c
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	461a      	mov	r2, r3
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	6093      	str	r3, [r2, #8]
 8004082:	e217      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f002 fb12 	bl	80066b6 <USB_ReadChInterrupts>
 8004092:	4603      	mov	r3, r0
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d11b      	bne.n	80040d6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	334d      	adds	r3, #77	; 0x4d
 80040ae:	2209      	movs	r2, #9
 80040b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 f89f 	bl	80071fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	e1ee      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 fae9 	bl	80066b6 <USB_ReadChInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	f040 81df 	bne.w	80044ae <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	2302      	movs	r3, #2
 8004100:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	; 0x4d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 8093 	bne.w	8004240 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	334d      	adds	r3, #77	; 0x4d
 800412a:	2202      	movs	r2, #2
 800412c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334c      	adds	r3, #76	; 0x4c
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3326      	adds	r3, #38	; 0x26
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d00b      	beq.n	8004170 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3326      	adds	r3, #38	; 0x26
 8004168:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800416a:	2b03      	cmp	r3, #3
 800416c:	f040 8190 	bne.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	799b      	ldrb	r3, [r3, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d115      	bne.n	80041a4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	333d      	adds	r3, #61	; 0x3d
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2d8      	uxtb	r0, r3
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	333d      	adds	r3, #61	; 0x3d
 80041a0:	4602      	mov	r2, r0
 80041a2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	799b      	ldrb	r3, [r3, #6]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 8171 	bne.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3334      	adds	r3, #52	; 0x34
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8165 	beq.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3334      	adds	r3, #52	; 0x34
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4403      	add	r3, r0
 80041e6:	3328      	adds	r3, #40	; 0x28
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	440b      	add	r3, r1
 80041ec:	1e59      	subs	r1, r3, #1
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4403      	add	r3, r0
 80041fc:	3328      	adds	r3, #40	; 0x28
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	fbb1 f3f3 	udiv	r3, r1, r3
 8004204:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 813f 	beq.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	333d      	adds	r3, #61	; 0x3d
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	f083 0301 	eor.w	r3, r3, #1
 800422a:	b2d8      	uxtb	r0, r3
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	333d      	adds	r3, #61	; 0x3d
 800423a:	4602      	mov	r2, r0
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e127      	b.n	8004490 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334d      	adds	r3, #77	; 0x4d
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d120      	bne.n	8004298 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	334d      	adds	r3, #77	; 0x4d
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	331b      	adds	r3, #27
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	f040 8107 	bne.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334c      	adds	r3, #76	; 0x4c
 8004292:	2202      	movs	r2, #2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e0fb      	b.n	8004490 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	334d      	adds	r3, #77	; 0x4d
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d13a      	bne.n	8004324 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	; 0x4d
 80042be:	2202      	movs	r2, #2
 80042c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	334c      	adds	r3, #76	; 0x4c
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	331b      	adds	r3, #27
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 80d1 	bne.w	8004490 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	331b      	adds	r3, #27
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	440a      	add	r2, r1
 8004318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	e0b5      	b.n	8004490 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334d      	adds	r3, #77	; 0x4d
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d114      	bne.n	8004364 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	334d      	adds	r3, #77	; 0x4d
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	; 0x4c
 800435e:	2202      	movs	r2, #2
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e095      	b.n	8004490 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334d      	adds	r3, #77	; 0x4d
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d114      	bne.n	80043a4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	334d      	adds	r3, #77	; 0x4d
 800438a:	2202      	movs	r2, #2
 800438c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	334c      	adds	r3, #76	; 0x4c
 800439e:	2205      	movs	r2, #5
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e075      	b.n	8004490 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	334d      	adds	r3, #77	; 0x4d
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	d00a      	beq.n	80043d0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	334d      	adds	r3, #77	; 0x4d
 80043ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d170      	bne.n	80044b2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334d      	adds	r3, #77	; 0x4d
 80043e0:	2202      	movs	r2, #2
 80043e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	3344      	adds	r3, #68	; 0x44
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1c59      	adds	r1, r3, #1
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4403      	add	r3, r0
 8004404:	3344      	adds	r3, #68	; 0x44
 8004406:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	3344      	adds	r3, #68	; 0x44
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d914      	bls.n	8004448 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	3344      	adds	r3, #68	; 0x44
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334c      	adds	r3, #76	; 0x4c
 8004442:	2204      	movs	r2, #4
 8004444:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004446:	e022      	b.n	800448e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334c      	adds	r3, #76	; 0x4c
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004472:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800447a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800448e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	334c      	adds	r3, #76	; 0x4c
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f005 fa04 	bl	80098b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044ac:	e002      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80044b2:	bf00      	nop
  }
}
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	0c5b      	lsrs	r3, r3, #17
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d004      	beq.n	8004500 <HCD_RXQLVL_IRQHandler+0x46>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	f000 80b6 	beq.w	800466a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044fe:	e0b7      	b.n	8004670 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80b3 	beq.w	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	332c      	adds	r3, #44	; 0x2c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80a7 	beq.w	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3338      	adds	r3, #56	; 0x38
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	18d1      	adds	r1, r2, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4403      	add	r3, r0
 8004544:	3334      	adds	r3, #52	; 0x34
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4299      	cmp	r1, r3
 800454a:	f200 8083 	bhi.w	8004654 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	332c      	adds	r3, #44	; 0x2c
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	b292      	uxth	r2, r2
 8004568:	4619      	mov	r1, r3
 800456a:	f002 f839 	bl	80065e0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	332c      	adds	r3, #44	; 0x2c
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	18d1      	adds	r1, r2, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4403      	add	r3, r0
 8004592:	332c      	adds	r3, #44	; 0x2c
 8004594:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3338      	adds	r3, #56	; 0x38
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	18d1      	adds	r1, r2, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4403      	add	r3, r0
 80045ba:	3338      	adds	r3, #56	; 0x38
 80045bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	0cdb      	lsrs	r3, r3, #19
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3328      	adds	r3, #40	; 0x28
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d13f      	bne.n	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d03c      	beq.n	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004612:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	333c      	adds	r3, #60	; 0x3c
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f083 0301 	eor.w	r3, r3, #1
 800463c:	b2d8      	uxtb	r0, r3
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	333c      	adds	r3, #60	; 0x3c
 800464e:	4602      	mov	r2, r0
 8004650:	701a      	strb	r2, [r3, #0]
      break;
 8004652:	e00c      	b.n	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	334c      	adds	r3, #76	; 0x4c
 8004664:	2204      	movs	r2, #4
 8004666:	701a      	strb	r2, [r3, #0]
      break;
 8004668:	e001      	b.n	800466e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800466e:	bf00      	nop
  }
}
 8004670:	bf00      	nop
 8004672:	3728      	adds	r7, #40	; 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d10b      	bne.n	80046c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f005 f8de 	bl	800987c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d132      	bne.n	8004738 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d126      	bne.n	8004732 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7a5b      	ldrb	r3, [r3, #9]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d113      	bne.n	8004714 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f6:	d106      	bne.n	8004706 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f002 f8fe 	bl	8006900 <USB_InitFSLSPClkSel>
 8004704:	e011      	b.n	800472a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2101      	movs	r1, #1
 800470c:	4618      	mov	r0, r3
 800470e:	f002 f8f7 	bl	8006900 <USB_InitFSLSPClkSel>
 8004712:	e00a      	b.n	800472a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	79db      	ldrb	r3, [r3, #7]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004722:	461a      	mov	r2, r3
 8004724:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004728:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f005 f8d0 	bl	80098d0 <HAL_HCD_PortEnabled_Callback>
 8004730:	e002      	b.n	8004738 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f005 f8da 	bl	80098ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d103      	bne.n	800474a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f043 0320 	orr.w	r3, r3, #32
 8004748:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6013      	str	r3, [r2, #0]
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e267      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d075      	beq.n	800486a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00c      	beq.n	80047a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004792:	2b08      	cmp	r3, #8
 8004794:	d112      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004796:	4b82      	ldr	r3, [pc, #520]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b7e      	ldr	r3, [pc, #504]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05b      	beq.n	8004868 <HAL_RCC_OscConfig+0x108>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d157      	bne.n	8004868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e242      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x74>
 80047c6:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x98>
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6f      	ldr	r2, [pc, #444]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b6d      	ldr	r3, [pc, #436]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6c      	ldr	r2, [pc, #432]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a68      	ldr	r2, [pc, #416]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd fafe 	bl	8001e18 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fd fafa 	bl	8001e18 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e207      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0xc0>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fd faea 	bl	8001e18 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fd fae6 	bl	8001e18 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1f3      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0xe8>
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488a:	2b08      	cmp	r3, #8
 800488c:	d11c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b44      	ldr	r3, [pc, #272]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1c7      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4937      	ldr	r1, [pc, #220]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	e03a      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCC_OscConfig+0x244>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd fa9f 	bl	8001e18 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd fa9b 	bl	8001e18 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1a8      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4925      	ldr	r1, [pc, #148]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCC_OscConfig+0x244>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd fa7e 	bl	8001e18 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004920:	f7fd fa7a 	bl	8001e18 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e187      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d036      	beq.n	80049b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HAL_RCC_OscConfig+0x248>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd fa5e 	bl	8001e18 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004960:	f7fd fa5a 	bl	8001e18 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e167      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x200>
 800497e:	e01b      	b.n	80049b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCC_OscConfig+0x248>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fd fa47 	bl	8001e18 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	e00e      	b.n	80049ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800498e:	f7fd fa43 	bl	8001e18 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d907      	bls.n	80049ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e150      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	42470000 	.word	0x42470000
 80049a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ea      	bne.n	800498e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8097 	beq.w	8004af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ca:	4b81      	ldr	r3, [pc, #516]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4b7d      	ldr	r3, [pc, #500]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a7c      	ldr	r2, [pc, #496]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
 80049e6:	4b7a      	ldr	r3, [pc, #488]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	4b77      	ldr	r3, [pc, #476]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d118      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a02:	4b74      	ldr	r3, [pc, #464]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a73      	ldr	r2, [pc, #460]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0e:	f7fd fa03 	bl	8001e18 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fd f9ff 	bl	8001e18 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e10c      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x2ea>
 8004a3c:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4a63      	ldr	r2, [pc, #396]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	; 0x70
 8004a48:	e01c      	b.n	8004a84 <HAL_RCC_OscConfig+0x324>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x30c>
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a5b      	ldr	r2, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0x324>
 8004a6c:	4b58      	ldr	r3, [pc, #352]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a57      	ldr	r2, [pc, #348]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a54      	ldr	r2, [pc, #336]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fd f9c4 	bl	8001e18 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a94:	f7fd f9c0 	bl	8001e18 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0cb      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ee      	beq.n	8004a94 <HAL_RCC_OscConfig+0x334>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab8:	f7fd f9ae 	bl	8001e18 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd f9aa 	bl	8001e18 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e0b5      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ee      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a1 	beq.w	8004c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004afe:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d05c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d141      	bne.n	8004b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd f97e 	bl	8001e18 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd f97a 	bl	8001e18 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e087      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	491b      	ldr	r1, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fd f953 	bl	8001e18 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd f94f 	bl	8001e18 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e05c      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x416>
 8004b94:	e054      	b.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd f93c 	bl	8001e18 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd f938 	bl	8001e18 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e045      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x444>
 8004bc2:	e03d      	b.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e038      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x4ec>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d028      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d121      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d11a      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d111      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	3b01      	subs	r3, #1
 8004c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d90c      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b8      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	494d      	ldr	r1, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d044      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e067      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fd f86a 	bl	8001e18 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fd f866 	bl	8001e18 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20c      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e032      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd6:	f000 f821 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	490a      	ldr	r1, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	5ccb      	ldrb	r3, [r1, r3]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fc ffca 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	0800a724 	.word	0x0800a724
 8004e14:	2000002c 	.word	0x2000002c
 8004e18:	20000030 	.word	0x20000030

08004e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b094      	sub	sp, #80	; 0x50
 8004e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	647b      	str	r3, [r7, #68]	; 0x44
 8004e28:	2300      	movs	r3, #0
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e34:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d00d      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x40>
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	f200 80e1 	bhi.w	8005008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x34>
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e4e:	e0db      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b73      	ldr	r3, [pc, #460]	; (8005020 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e54:	e0db      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e56:	4b73      	ldr	r3, [pc, #460]	; (8005024 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e5a:	e0d8      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e5c:	4b6f      	ldr	r3, [pc, #444]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e66:	4b6d      	ldr	r3, [pc, #436]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	2200      	movs	r2, #0
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
 8004e86:	2300      	movs	r3, #0
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	0159      	lsls	r1, r3, #5
 8004e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea0:	0150      	lsls	r0, r2, #5
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	1a51      	subs	r1, r2, r1
 8004eaa:	6139      	str	r1, [r7, #16]
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	018b      	lsls	r3, r1, #6
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eca:	4651      	mov	r1, sl
 8004ecc:	018a      	lsls	r2, r1, #6
 8004ece:	4651      	mov	r1, sl
 8004ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eee:	4690      	mov	r8, r2
 8004ef0:	4699      	mov	r9, r3
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	eb18 0303 	adds.w	r3, r8, r3
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	462b      	mov	r3, r5
 8004efc:	eb49 0303 	adc.w	r3, r9, r3
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f0e:	4629      	mov	r1, r5
 8004f10:	024b      	lsls	r3, r1, #9
 8004f12:	4621      	mov	r1, r4
 8004f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f18:	4621      	mov	r1, r4
 8004f1a:	024a      	lsls	r2, r1, #9
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	2200      	movs	r2, #0
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2c:	f7fb f94c 	bl	80001c8 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	e058      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	099b      	lsrs	r3, r3, #6
 8004f40:	2200      	movs	r2, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	4611      	mov	r1, r2
 8004f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	f04f 0000 	mov.w	r0, #0
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	0159      	lsls	r1, r3, #5
 8004f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f66:	0150      	lsls	r0, r2, #5
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f90:	eb63 050b 	sbc.w	r5, r3, fp
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	00eb      	lsls	r3, r5, #3
 8004f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa2:	00e2      	lsls	r2, r4, #3
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	4643      	mov	r3, r8
 8004faa:	18e3      	adds	r3, r4, r3
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	464b      	mov	r3, r9
 8004fb0:	eb45 0303 	adc.w	r3, r5, r3
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	028b      	lsls	r3, r1, #10
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fcc:	4621      	mov	r1, r4
 8004fce:	028a      	lsls	r2, r1, #10
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	61fa      	str	r2, [r7, #28]
 8004fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe0:	f7fb f8f2 	bl	80001c8 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005006:	e002      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetSysClockFreq+0x204>)
 800500a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800500c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005010:	4618      	mov	r0, r3
 8005012:	3750      	adds	r7, #80	; 0x50
 8005014:	46bd      	mov	sp, r7
 8005016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	00f42400 	.word	0x00f42400
 8005024:	007a1200 	.word	0x007a1200

08005028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCC_GetHCLKFreq+0x14>)
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	2000002c 	.word	0x2000002c

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff0 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	0800a734 	.word	0x0800a734

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800506c:	f7ff ffdc 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0b5b      	lsrs	r3, r3, #13
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0800a734 	.word	0x0800a734

08005090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07b      	b.n	800519a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d108      	bne.n	80050bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b2:	d009      	beq.n	80050c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	61da      	str	r2, [r3, #28]
 80050ba:	e005      	b.n	80050c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fc fc3a 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	ea42 0103 	orr.w	r1, r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	f003 0104 	and.w	r1, r3, #4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0210 	and.w	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e042      	b.n	800523a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fc fc0f 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2224      	movs	r2, #36	; 0x24
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fe16 	bl	8005e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04a      	b.n	80052ea <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fc fbbf 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2224      	movs	r2, #36	; 0x24
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005284:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fdc6 	bl	8005e18 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80052aa:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b08a      	sub	sp, #40	; 0x28
 80052f6:	af02      	add	r7, sp, #8
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	d175      	bne.n	80053fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_UART_Transmit+0x2c>
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e06e      	b.n	8005400 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2221      	movs	r2, #33	; 0x21
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005330:	f7fc fd72 	bl	8001e18 <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d108      	bne.n	800535e <HAL_UART_Transmit+0x6c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e003      	b.n	8005366 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005366:	e02e      	b.n	80053c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2200      	movs	r2, #0
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fb20 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e03a      	b.n	8005400 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800539e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	3302      	adds	r3, #2
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	e007      	b.n	80053b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1cb      	bne.n	8005368 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	2140      	movs	r1, #64	; 0x40
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 faec 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e006      	b.n	8005400 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	d112      	bne.n	8005448 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_UART_Receive_IT+0x26>
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e00b      	b.n	800544a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	461a      	mov	r2, r3
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fb13 	bl	8005a6a <UART_Start_Receive_IT>
 8005444:	4603      	mov	r3, r0
 8005446:	e000      	b.n	800544a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005448:	2302      	movs	r3, #2
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b0ba      	sub	sp, #232	; 0xe8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <HAL_UART_IRQHandler+0x66>
 80054a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fbf2 	bl	8005c9c <UART_Receive_IT>
      return;
 80054b8:	e25b      	b.n	8005972 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80de 	beq.w	8005680 <HAL_UART_IRQHandler+0x22c>
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80d1 	beq.w	8005680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_UART_IRQHandler+0xae>
 80054ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_UART_IRQHandler+0xd2>
 800550e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f043 0202 	orr.w	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_UART_IRQHandler+0xf6>
 8005532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f043 0204 	orr.w	r2, r3, #4
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d011      	beq.n	800557a <HAL_UART_IRQHandler+0x126>
 8005556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f043 0208 	orr.w	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 81f2 	beq.w	8005968 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_UART_IRQHandler+0x14e>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb7d 	bl	8005c9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <HAL_UART_IRQHandler+0x17a>
 80055c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04f      	beq.n	800566e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa85 	bl	8005ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d141      	bne.n	8005666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3314      	adds	r3, #20
 800560a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800560e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800561a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1d9      	bne.n	80055e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d013      	beq.n	800565e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	4a7e      	ldr	r2, [pc, #504]	; (8005834 <HAL_UART_IRQHandler+0x3e0>)
 800563c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fd99 	bl	800217a <HAL_DMA_Abort_IT>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e00e      	b.n	800567c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f994 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e00a      	b.n	800567c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f990 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e006      	b.n	800567c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f98c 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800567a:	e175      	b.n	8005968 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	bf00      	nop
    return;
 800567e:	e173      	b.n	8005968 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 814f 	bne.w	8005928 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8148 	beq.w	8005928 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8141 	beq.w	8005928 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	f040 80b6 	bne.w	8005838 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8145 	beq.w	800596c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ea:	429a      	cmp	r2, r3
 80056ec:	f080 813e 	bcs.w	800596c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	f000 8088 	beq.w	8005816 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800571c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800573e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800574a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1d9      	bne.n	8005706 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005776:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800577a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800577e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e1      	bne.n	8005752 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3314      	adds	r3, #20
 8005794:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800579e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80057fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e3      	bne.n	80057d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	4618      	mov	r0, r3
 8005812:	f7fc fc42 	bl	800209a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8b7 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005832:	e09b      	b.n	800596c <HAL_UART_IRQHandler+0x518>
 8005834:	08005ba5 	.word	0x08005ba5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005840:	b29b      	uxth	r3, r3
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 808e 	beq.w	8005970 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8089 	beq.w	8005970 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005882:	647a      	str	r2, [r7, #68]	; 0x44
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	623b      	str	r3, [r7, #32]
   return(result);
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3314      	adds	r3, #20
 80058b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ba:	633a      	str	r2, [r7, #48]	; 0x30
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e3      	bne.n	8005896 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0310 	bic.w	r3, r3, #16
 80058f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005900:	61fa      	str	r2, [r7, #28]
 8005902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	617b      	str	r3, [r7, #20]
   return(result);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e3      	bne.n	80058dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800591a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f83d 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005926:	e023      	b.n	8005970 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_UART_IRQHandler+0x4f4>
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f943 	bl	8005bcc <UART_Transmit_IT>
    return;
 8005946:	e014      	b.n	8005972 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <HAL_UART_IRQHandler+0x51e>
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f983 	bl	8005c6c <UART_EndTransmit_IT>
    return;
 8005966:	e004      	b.n	8005972 <HAL_UART_IRQHandler+0x51e>
    return;
 8005968:	bf00      	nop
 800596a:	e002      	b.n	8005972 <HAL_UART_IRQHandler+0x51e>
      return;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_UART_IRQHandler+0x51e>
      return;
 8005970:	bf00      	nop
  }
}
 8005972:	37e8      	adds	r7, #232	; 0xe8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c8:	e03b      	b.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d037      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fc fa21 	bl	8001e18 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e03a      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d023      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d020      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d01d      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d116      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f857 	bl	8005ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2208      	movs	r2, #8
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00f      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d0b4      	beq.n	80059ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2222      	movs	r2, #34	; 0x22
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0220 	orr.w	r2, r2, #32
 8005ace:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b095      	sub	sp, #84	; 0x54
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b06:	643a      	str	r2, [r7, #64]	; 0x40
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b98:	bf00      	nop
 8005b9a:	3754      	adds	r7, #84	; 0x54
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fee4 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b21      	cmp	r3, #33	; 0x21
 8005bde:	d13e      	bne.n	8005c5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d114      	bne.n	8005c14 <UART_Transmit_IT+0x48>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d110      	bne.n	8005c14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]
 8005c12:	e008      	b.n	8005c26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6211      	str	r1, [r2, #32]
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4619      	mov	r1, r3
 8005c34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10f      	bne.n	8005c5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fe73 	bl	8005978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	; 0x30
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b22      	cmp	r3, #34	; 0x22
 8005cae:	f040 80ae 	bne.w	8005e0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	d117      	bne.n	8005cec <UART_Receive_IT+0x50>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d113      	bne.n	8005cec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8005cea:	e026      	b.n	8005d3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	d007      	beq.n	8005d10 <UART_Receive_IT+0x74>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <UART_Receive_IT+0x82>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e008      	b.n	8005d30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4619      	mov	r1, r3
 8005d48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d15d      	bne.n	8005e0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0220 	bic.w	r2, r2, #32
 8005d5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d135      	bne.n	8005e00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f023 0310 	bic.w	r3, r3, #16
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	623a      	str	r2, [r7, #32]
 8005dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e5      	bne.n	8005d9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d10a      	bne.n	8005df2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fdd1 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
 8005dfe:	e002      	b.n	8005e06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fb f93d 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e002      	b.n	8005e10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3730      	adds	r7, #48	; 0x30
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b0c0      	sub	sp, #256	; 0x100
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	68d9      	ldr	r1, [r3, #12]
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	ea40 0301 	orr.w	r3, r0, r1
 8005e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e70:	f021 010c 	bic.w	r1, r1, #12
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e92:	6999      	ldr	r1, [r3, #24]
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	ea40 0301 	orr.w	r3, r0, r1
 8005e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b8f      	ldr	r3, [pc, #572]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d005      	beq.n	8005eb8 <UART_SetConfig+0xa0>
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b8d      	ldr	r3, [pc, #564]	; (80060e8 <UART_SetConfig+0x2d0>)
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d104      	bne.n	8005ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7ff f8d6 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8005ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ec0:	e003      	b.n	8005eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7ff f8bd 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	f040 810c 	bne.w	80060f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eea:	4622      	mov	r2, r4
 8005eec:	462b      	mov	r3, r5
 8005eee:	1891      	adds	r1, r2, r2
 8005ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ef2:	415b      	adcs	r3, r3
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005efa:	4621      	mov	r1, r4
 8005efc:	eb12 0801 	adds.w	r8, r2, r1
 8005f00:	4629      	mov	r1, r5
 8005f02:	eb43 0901 	adc.w	r9, r3, r1
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f1a:	4690      	mov	r8, r2
 8005f1c:	4699      	mov	r9, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	eb18 0303 	adds.w	r3, r8, r3
 8005f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f28:	462b      	mov	r3, r5
 8005f2a:	eb49 0303 	adc.w	r3, r9, r3
 8005f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f46:	460b      	mov	r3, r1
 8005f48:	18db      	adds	r3, r3, r3
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	eb42 0303 	adc.w	r3, r2, r3
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f5c:	f7fa f934 	bl	80001c8 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b61      	ldr	r3, [pc, #388]	; (80060ec <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011c      	lsls	r4, r3, #4
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f90:	4641      	mov	r1, r8
 8005f92:	eb12 0a01 	adds.w	sl, r2, r1
 8005f96:	4649      	mov	r1, r9
 8005f98:	eb43 0b01 	adc.w	fp, r3, r1
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb0:	4692      	mov	sl, r2
 8005fb2:	469b      	mov	fp, r3
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	18db      	adds	r3, r3, r3
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ff2:	f7fa f8e9 	bl	80001c8 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <UART_SetConfig+0x2d4>)
 8005ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2264      	movs	r2, #100	; 0x64
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	1acb      	subs	r3, r1, r3
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <UART_SetConfig+0x2d4>)
 8006014:	fba3 2302 	umull	r2, r3, r3, r2
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006020:	441c      	add	r4, r3
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800602c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	63b9      	str	r1, [r7, #56]	; 0x38
 800603c:	415b      	adcs	r3, r3
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6339      	str	r1, [r7, #48]	; 0x30
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006098:	460b      	mov	r3, r1
 800609a:	18db      	adds	r3, r3, r3
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
 800609e:	4613      	mov	r3, r2
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ae:	f7fa f88b 	bl	80001c8 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <UART_SetConfig+0x2d4>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <UART_SetConfig+0x2d4>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 0207 	and.w	r2, r3, #7
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4422      	add	r2, r4
 80060de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e0:	e106      	b.n	80062f0 <UART_SetConfig+0x4d8>
 80060e2:	bf00      	nop
 80060e4:	40011000 	.word	0x40011000
 80060e8:	40011400 	.word	0x40011400
 80060ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006102:	4642      	mov	r2, r8
 8006104:	464b      	mov	r3, r9
 8006106:	1891      	adds	r1, r2, r2
 8006108:	6239      	str	r1, [r7, #32]
 800610a:	415b      	adcs	r3, r3
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
 800610e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006112:	4641      	mov	r1, r8
 8006114:	1854      	adds	r4, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb43 0501 	adc.w	r5, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	00eb      	lsls	r3, r5, #3
 8006126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612a:	00e2      	lsls	r2, r4, #3
 800612c:	4614      	mov	r4, r2
 800612e:	461d      	mov	r5, r3
 8006130:	4643      	mov	r3, r8
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006138:	464b      	mov	r3, r9
 800613a:	eb45 0303 	adc.w	r3, r5, r3
 800613e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800614e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800615e:	4629      	mov	r1, r5
 8006160:	008b      	lsls	r3, r1, #2
 8006162:	4621      	mov	r1, r4
 8006164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006168:	4621      	mov	r1, r4
 800616a:	008a      	lsls	r2, r1, #2
 800616c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006170:	f7fa f82a 	bl	80001c8 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4b60      	ldr	r3, [pc, #384]	; (80062fc <UART_SetConfig+0x4e4>)
 800617a:	fba3 2302 	umull	r2, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	011c      	lsls	r4, r3, #4
 8006182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	1891      	adds	r1, r2, r2
 800619a:	61b9      	str	r1, [r7, #24]
 800619c:	415b      	adcs	r3, r3
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a4:	4641      	mov	r1, r8
 80061a6:	1851      	adds	r1, r2, r1
 80061a8:	6139      	str	r1, [r7, #16]
 80061aa:	4649      	mov	r1, r9
 80061ac:	414b      	adcs	r3, r1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061bc:	4659      	mov	r1, fp
 80061be:	00cb      	lsls	r3, r1, #3
 80061c0:	4651      	mov	r1, sl
 80061c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c6:	4651      	mov	r1, sl
 80061c8:	00ca      	lsls	r2, r1, #3
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	4642      	mov	r2, r8
 80061d2:	189b      	adds	r3, r3, r2
 80061d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061d8:	464b      	mov	r3, r9
 80061da:	460a      	mov	r2, r1
 80061dc:	eb42 0303 	adc.w	r3, r2, r3
 80061e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061fc:	4649      	mov	r1, r9
 80061fe:	008b      	lsls	r3, r1, #2
 8006200:	4641      	mov	r1, r8
 8006202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006206:	4641      	mov	r1, r8
 8006208:	008a      	lsls	r2, r1, #2
 800620a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800620e:	f7f9 ffdb 	bl	80001c8 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4611      	mov	r1, r2
 8006218:	4b38      	ldr	r3, [pc, #224]	; (80062fc <UART_SetConfig+0x4e4>)
 800621a:	fba3 2301 	umull	r2, r3, r3, r1
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2264      	movs	r2, #100	; 0x64
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	1acb      	subs	r3, r1, r3
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	3332      	adds	r3, #50	; 0x32
 800622c:	4a33      	ldr	r2, [pc, #204]	; (80062fc <UART_SetConfig+0x4e4>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006238:	441c      	add	r4, r3
 800623a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623e:	2200      	movs	r2, #0
 8006240:	673b      	str	r3, [r7, #112]	; 0x70
 8006242:	677a      	str	r2, [r7, #116]	; 0x74
 8006244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	1891      	adds	r1, r2, r2
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	415b      	adcs	r3, r3
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006258:	4641      	mov	r1, r8
 800625a:	1851      	adds	r1, r2, r1
 800625c:	6039      	str	r1, [r7, #0]
 800625e:	4649      	mov	r1, r9
 8006260:	414b      	adcs	r3, r1
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006270:	4659      	mov	r1, fp
 8006272:	00cb      	lsls	r3, r1, #3
 8006274:	4651      	mov	r1, sl
 8006276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627a:	4651      	mov	r1, sl
 800627c:	00ca      	lsls	r2, r1, #3
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	4603      	mov	r3, r0
 8006284:	4642      	mov	r2, r8
 8006286:	189b      	adds	r3, r3, r2
 8006288:	66bb      	str	r3, [r7, #104]	; 0x68
 800628a:	464b      	mov	r3, r9
 800628c:	460a      	mov	r2, r1
 800628e:	eb42 0303 	adc.w	r3, r2, r3
 8006292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	663b      	str	r3, [r7, #96]	; 0x60
 800629e:	667a      	str	r2, [r7, #100]	; 0x64
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062ac:	4649      	mov	r1, r9
 80062ae:	008b      	lsls	r3, r1, #2
 80062b0:	4641      	mov	r1, r8
 80062b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b6:	4641      	mov	r1, r8
 80062b8:	008a      	lsls	r2, r1, #2
 80062ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062be:	f7f9 ff83 	bl	80001c8 <__aeabi_uldivmod>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <UART_SetConfig+0x4e4>)
 80062c8:	fba3 1302 	umull	r1, r3, r3, r2
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	2164      	movs	r1, #100	; 0x64
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	3332      	adds	r3, #50	; 0x32
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <UART_SetConfig+0x4e4>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f003 020f 	and.w	r2, r3, #15
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4422      	add	r2, r4
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062f6:	46bd      	mov	sp, r7
 80062f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fc:	51eb851f 	.word	0x51eb851f

08006300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006300:	b084      	sub	sp, #16
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	f107 001c 	add.w	r0, r7, #28
 800630e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006312:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006316:	2b01      	cmp	r3, #1
 8006318:	d123      	bne.n	8006362 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800632e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006342:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006346:	2b01      	cmp	r3, #1
 8006348:	d105      	bne.n	8006356 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9dc 	bl	8006714 <USB_CoreReset>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e01b      	b.n	800639a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9d0 	bl	8006714 <USB_CoreReset>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006378:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	; 0x38
 800638c:	e005      	b.n	800639a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800639a:	7fbb      	ldrb	r3, [r7, #30]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10b      	bne.n	80063b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f043 0206 	orr.w	r2, r3, #6
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f043 0220 	orr.w	r2, r3, #32
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c4:	b004      	add	sp, #16
 80063c6:	4770      	bx	lr

080063c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f043 0201 	orr.w	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d115      	bne.n	800645a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800643a:	200a      	movs	r0, #10
 800643c:	f7fb fcf8 	bl	8001e30 <HAL_Delay>
      ms += 10U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	330a      	adds	r3, #10
 8006444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f956 	bl	80066f8 <USB_GetMode>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d01e      	beq.n	8006490 <USB_SetCurrentMode+0x84>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2bc7      	cmp	r3, #199	; 0xc7
 8006456:	d9f0      	bls.n	800643a <USB_SetCurrentMode+0x2e>
 8006458:	e01a      	b.n	8006490 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d115      	bne.n	800648c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800646c:	200a      	movs	r0, #10
 800646e:	f7fb fcdf 	bl	8001e30 <HAL_Delay>
      ms += 10U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	330a      	adds	r3, #10
 8006476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f93d 	bl	80066f8 <USB_GetMode>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <USB_SetCurrentMode+0x84>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2bc7      	cmp	r3, #199	; 0xc7
 8006488:	d9f0      	bls.n	800646c <USB_SetCurrentMode+0x60>
 800648a:	e001      	b.n	8006490 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e005      	b.n	800649c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2bc8      	cmp	r3, #200	; 0xc8
 8006494:	d101      	bne.n	800649a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064be:	d901      	bls.n	80064c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e01b      	b.n	80064fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	daf2      	bge.n	80064b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	019b      	lsls	r3, r3, #6
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3301      	adds	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064e8:	d901      	bls.n	80064ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e006      	b.n	80064fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d0f0      	beq.n	80064dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006520:	d901      	bls.n	8006526 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e018      	b.n	8006558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	daf2      	bge.n	8006514 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2210      	movs	r2, #16
 8006536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006544:	d901      	bls.n	800654a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e006      	b.n	8006558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b10      	cmp	r3, #16
 8006554:	d0f0      	beq.n	8006538 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	460b      	mov	r3, r1
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	4613      	mov	r3, r2
 8006578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d123      	bne.n	80065d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800658a:	88bb      	ldrh	r3, [r7, #4]
 800658c:	3303      	adds	r3, #3
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e018      	b.n	80065ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	031a      	lsls	r2, r3, #12
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3301      	adds	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	3301      	adds	r3, #1
 80065c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	3301      	adds	r3, #1
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d3e2      	bcc.n	8006598 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3724      	adds	r7, #36	; 0x24
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b08b      	sub	sp, #44	; 0x2c
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e014      	b.n	8006636 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	601a      	str	r2, [r3, #0]
    pDest++;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	3301      	adds	r3, #1
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	3301      	adds	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	3301      	adds	r3, #1
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	3301      	adds	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	3301      	adds	r3, #1
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	429a      	cmp	r2, r3
 800663c:	d3e6      	bcc.n	800660c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800663e:	8bfb      	ldrh	r3, [r7, #30]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01e      	beq.n	8006682 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	461a      	mov	r2, r3
 8006650:	f107 0310 	add.w	r3, r7, #16
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	701a      	strb	r2, [r3, #0]
      i++;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	3301      	adds	r3, #1
 800666e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	3301      	adds	r3, #1
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006676:	8bfb      	ldrh	r3, [r7, #30]
 8006678:	3b01      	subs	r3, #1
 800667a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800667c:	8bfb      	ldrh	r3, [r7, #30]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1ea      	bne.n	8006658 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006684:	4618      	mov	r0, r3
 8006686:	372c      	adds	r7, #44	; 0x2c
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4013      	ands	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066a8:	68fb      	ldr	r3, [r7, #12]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80066d6:	78fb      	ldrb	r3, [r7, #3]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066ea:	68bb      	ldr	r3, [r7, #8]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0301 	and.w	r3, r3, #1
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800672c:	d901      	bls.n	8006732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e01b      	b.n	800676a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	daf2      	bge.n	8006720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f043 0201 	orr.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006756:	d901      	bls.n	800675c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e006      	b.n	800676a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d0f0      	beq.n	800674a <USB_CoreReset+0x36>

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006778:	b084      	sub	sp, #16
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006798:	461a      	mov	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d119      	bne.n	8006802 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80067ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10a      	bne.n	80067ec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e014      	b.n	8006816 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067fa:	f023 0304 	bic.w	r3, r3, #4
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e009      	b.n	8006816 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006810:	f023 0304 	bic.w	r3, r3, #4
 8006814:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006816:	2110      	movs	r1, #16
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fe43 	bl	80064a4 <USB_FlushTxFifo>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fe6d 	bl	8006508 <USB_FlushRxFifo>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e015      	b.n	800686a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	461a      	mov	r2, r3
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	3301      	adds	r3, #1
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800686e:	461a      	mov	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4293      	cmp	r3, r2
 8006874:	d3e3      	bcc.n	800683e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f04f 32ff 	mov.w	r2, #4294967295
 8006882:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <USB_HostInit+0x170>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10b      	bne.n	80068a4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006892:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a15      	ldr	r2, [pc, #84]	; (80068ec <USB_HostInit+0x174>)
 8006898:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <USB_HostInit+0x178>)
 800689e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80068a2:	e009      	b.n	80068b8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a11      	ldr	r2, [pc, #68]	; (80068f4 <USB_HostInit+0x17c>)
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <USB_HostInit+0x180>)
 80068b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f043 0210 	orr.w	r2, r3, #16
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <USB_HostInit+0x184>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e4:	b004      	add	sp, #16
 80068e6:	4770      	bx	lr
 80068e8:	40040000 	.word	0x40040000
 80068ec:	01000200 	.word	0x01000200
 80068f0:	00e00300 	.word	0x00e00300
 80068f4:	00600080 	.word	0x00600080
 80068f8:	004000e0 	.word	0x004000e0
 80068fc:	a3200008 	.word	0xa3200008

08006900 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d107      	bne.n	8006952 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006948:	461a      	mov	r2, r3
 800694a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800694e:	6053      	str	r3, [r2, #4]
 8006950:	e00c      	b.n	800696c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d107      	bne.n	8006968 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695e:	461a      	mov	r2, r3
 8006960:	f241 7370 	movw	r3, #6000	; 0x1770
 8006964:	6053      	str	r3, [r2, #4]
 8006966:	e001      	b.n	800696c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800699a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80069a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80069aa:	2064      	movs	r0, #100	; 0x64
 80069ac:	f7fb fa40 	bl	8001e30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80069be:	200a      	movs	r0, #10
 80069c0:	f7fb fa36 	bl	8001e30 <HAL_Delay>

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80069f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <USB_DriveVbus+0x44>
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d106      	bne.n	8006a12 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a10:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1c:	d109      	bne.n	8006a32 <USB_DriveVbus+0x64>
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a30:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	0c5b      	lsrs	r3, r3, #17
 8006a5e:	f003 0303 	and.w	r3, r3, #3
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	b29b      	uxth	r3, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	70fb      	strb	r3, [r7, #3]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70bb      	strb	r3, [r7, #2]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d87c      	bhi.n	8006bc8 <USB_HC_Init+0x138>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <USB_HC_Init+0x44>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006b8b 	.word	0x08006b8b
 8006adc:	08006ae5 	.word	0x08006ae5
 8006ae0:	08006b4d 	.word	0x08006b4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	461a      	mov	r2, r3
 8006af2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da10      	bge.n	8006b22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006b20:	e055      	b.n	8006bce <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a6f      	ldr	r2, [pc, #444]	; (8006ce4 <USB_HC_Init+0x254>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d151      	bne.n	8006bce <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b48:	60d3      	str	r3, [r2, #12]
      break;
 8006b4a:	e040      	b.n	8006bce <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006b5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006b60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da34      	bge.n	8006bd2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006b88:	e023      	b.n	8006bd2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b96:	461a      	mov	r2, r3
 8006b98:	f240 2325 	movw	r3, #549	; 0x225
 8006b9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006b9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da17      	bge.n	8006bd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006bc4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006bc6:	e006      	b.n	8006bd6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	77fb      	strb	r3, [r7, #31]
      break;
 8006bcc:	e004      	b.n	8006bd8 <USB_HC_Init+0x148>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e002      	b.n	8006bd8 <USB_HC_Init+0x148>
      break;
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <USB_HC_Init+0x148>
      break;
 8006bd6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	461a      	mov	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	2101      	movs	r1, #1
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	6939      	ldr	r1, [r7, #16]
 8006c20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c24:	4313      	orrs	r3, r2
 8006c26:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da03      	bge.n	8006c44 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e001      	b.n	8006c48 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fef9 	bl	8006a40 <USB_GetHostSpeed>
 8006c4e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d106      	bne.n	8006c66 <USB_HC_Init+0x1d6>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d003      	beq.n	8006c66 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e001      	b.n	8006c6a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c6a:	787b      	ldrb	r3, [r7, #1]
 8006c6c:	059b      	lsls	r3, r3, #22
 8006c6e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006c72:	78bb      	ldrb	r3, [r7, #2]
 8006c74:	02db      	lsls	r3, r3, #11
 8006c76:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006c7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c80:	049b      	lsls	r3, r3, #18
 8006c82:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006c86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006c88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006c8e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ca8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006caa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d003      	beq.n	8006cba <USB_HC_Init+0x22a>
 8006cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10f      	bne.n	8006cda <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40040000 	.word	0x40040000

08006ce8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d04:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a5d      	ldr	r2, [pc, #372]	; (8006e80 <USB_HC_StartXfer+0x198>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d12f      	bne.n	8006d6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d11c      	bne.n	8006d4e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	7c9b      	ldrb	r3, [r3, #18]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <USB_HC_StartXfer+0x3c>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	7c9b      	ldrb	r3, [r3, #18]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d124      	bne.n	8006d6e <USB_HC_StartXfer+0x86>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	799b      	ldrb	r3, [r3, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d120      	bne.n	8006d6e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60d3      	str	r3, [r2, #12]
 8006d4c:	e00f      	b.n	8006d6e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <USB_HC_StartXfer+0x86>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	795b      	ldrb	r3, [r3, #5]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	785b      	ldrb	r3, [r3, #1]
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fb6b 	bl	8007440 <USB_DoPing>
        return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e232      	b.n	80071d4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	799b      	ldrb	r3, [r3, #6]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d158      	bne.n	8006e28 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006d76:	2301      	movs	r3, #1
 8006d78:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	8a92      	ldrh	r2, [r2, #20]
 8006d88:	fb03 f202 	mul.w	r2, r3, r2
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61da      	str	r2, [r3, #28]
 8006d90:	e07c      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	7c9b      	ldrb	r3, [r3, #18]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d130      	bne.n	8006dfc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	2bbc      	cmp	r3, #188	; 0xbc
 8006da0:	d918      	bls.n	8006dd4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	8a9b      	ldrh	r3, [r3, #20]
 8006da6:	461a      	mov	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d003      	beq.n	8006dc4 <USB_HC_StartXfer+0xdc>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d103      	bne.n	8006dcc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e05f      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	e05b      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d007      	beq.n	8006df4 <USB_HC_StartXfer+0x10c>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d003      	beq.n	8006df4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2204      	movs	r2, #4
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	e04b      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2203      	movs	r2, #3
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	e047      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d10d      	bne.n	8006e1e <USB_HC_StartXfer+0x136>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	8a92      	ldrh	r2, [r2, #20]
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d907      	bls.n	8006e1e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	8a92      	ldrh	r2, [r2, #20]
 8006e14:	fb03 f202 	mul.w	r2, r3, r2
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61da      	str	r2, [r3, #28]
 8006e1c:	e036      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	61da      	str	r2, [r3, #28]
 8006e26:	e031      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d018      	beq.n	8006e62 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	8a92      	ldrh	r2, [r2, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	8a92      	ldrh	r2, [r2, #20]
 8006e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e44:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006e46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e48:	8b7b      	ldrh	r3, [r7, #26]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d90b      	bls.n	8006e66 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006e4e:	8b7b      	ldrh	r3, [r7, #26]
 8006e50:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	8a92      	ldrh	r2, [r2, #20]
 8006e58:	fb03 f202 	mul.w	r2, r3, r2
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61da      	str	r2, [r3, #28]
 8006e60:	e001      	b.n	8006e66 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006e62:	2301      	movs	r3, #1
 8006e64:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	78db      	ldrb	r3, [r3, #3]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	8a92      	ldrh	r2, [r2, #20]
 8006e74:	fb03 f202 	mul.w	r2, r3, r2
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	61da      	str	r2, [r3, #28]
 8006e7c:	e006      	b.n	8006e8c <USB_HC_StartXfer+0x1a4>
 8006e7e:	bf00      	nop
 8006e80:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e96:	04d9      	lsls	r1, r3, #19
 8006e98:	4ba3      	ldr	r3, [pc, #652]	; (8007128 <USB_HC_StartXfer+0x440>)
 8006e9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	7d9b      	ldrb	r3, [r3, #22]
 8006ea2:	075b      	lsls	r3, r3, #29
 8006ea4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea8:	69f9      	ldr	r1, [r7, #28]
 8006eaa:	0148      	lsls	r0, r1, #5
 8006eac:	6a39      	ldr	r1, [r7, #32]
 8006eae:	4401      	add	r1, r0
 8006eb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6999      	ldr	r1, [r3, #24]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ece:	460a      	mov	r2, r1
 8006ed0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf0c      	ite	eq
 8006ee2:	2301      	moveq	r3, #1
 8006ee4:	2300      	movne	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	7e7b      	ldrb	r3, [r7, #25]
 8006f1a:	075b      	lsls	r3, r3, #29
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	0148      	lsls	r0, r1, #5
 8006f20:	6a39      	ldr	r1, [r7, #32]
 8006f22:	4401      	add	r1, r0
 8006f24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	799b      	ldrb	r3, [r3, #6]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f040 80c3 	bne.w	80070bc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	7c5b      	ldrb	r3, [r3, #17]
 8006f3a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006f40:	4313      	orrs	r3, r2
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006f52:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	79db      	ldrb	r3, [r3, #7]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d123      	bne.n	8006fc4 <USB_HC_StartXfer+0x2dc>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11f      	bne.n	8006fc4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	6a3a      	ldr	r2, [r7, #32]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	7c9b      	ldrb	r3, [r3, #18]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <USB_HC_StartXfer+0x2ec>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	7c9b      	ldrb	r3, [r3, #18]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d117      	bne.n	8007004 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d113      	bne.n	8007004 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	78db      	ldrb	r3, [r3, #3]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d10f      	bne.n	8007004 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	6a3a      	ldr	r2, [r7, #32]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007002:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	7c9b      	ldrb	r3, [r3, #18]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d162      	bne.n	80070d2 <USB_HC_StartXfer+0x3ea>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	78db      	ldrb	r3, [r3, #3]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d15e      	bne.n	80070d2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	3b01      	subs	r3, #1
 800701a:	2b03      	cmp	r3, #3
 800701c:	d858      	bhi.n	80070d0 <USB_HC_StartXfer+0x3e8>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USB_HC_StartXfer+0x33c>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007035 	.word	0x08007035
 8007028:	08007057 	.word	0x08007057
 800702c:	08007079 	.word	0x08007079
 8007030:	0800709b 	.word	0x0800709b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	4413      	add	r3, r2
 800703c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	6a3a      	ldr	r2, [r7, #32]
 8007048:	440a      	add	r2, r1
 800704a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	6053      	str	r3, [r2, #4]
          break;
 8007054:	e03d      	b.n	80070d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	0151      	lsls	r1, r2, #5
 8007068:	6a3a      	ldr	r2, [r7, #32]
 800706a:	440a      	add	r2, r1
 800706c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007070:	f043 030e 	orr.w	r3, r3, #14
 8007074:	6053      	str	r3, [r2, #4]
          break;
 8007076:	e02c      	b.n	80070d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	6a3a      	ldr	r2, [r7, #32]
 800708c:	440a      	add	r2, r1
 800708e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007096:	6053      	str	r3, [r2, #4]
          break;
 8007098:	e01b      	b.n	80070d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070b8:	6053      	str	r3, [r2, #4]
          break;
 80070ba:	e00a      	b.n	80070d2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c8:	461a      	mov	r2, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	6053      	str	r3, [r2, #4]
 80070ce:	e000      	b.n	80070d2 <USB_HC_StartXfer+0x3ea>
          break;
 80070d0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070e8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	78db      	ldrb	r3, [r3, #3]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e003      	b.n	8007104 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007102:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800710a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007118:	461a      	mov	r2, r3
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e055      	b.n	80071d4 <USB_HC_StartXfer+0x4ec>
 8007128:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d14e      	bne.n	80071d2 <USB_HC_StartXfer+0x4ea>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04a      	beq.n	80071d2 <USB_HC_StartXfer+0x4ea>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	79db      	ldrb	r3, [r3, #7]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d146      	bne.n	80071d2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	7c9b      	ldrb	r3, [r3, #18]
 8007148:	2b03      	cmp	r3, #3
 800714a:	d831      	bhi.n	80071b0 <USB_HC_StartXfer+0x4c8>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <USB_HC_StartXfer+0x46c>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007165 	.word	0x08007165
 8007158:	08007189 	.word	0x08007189
 800715c:	08007165 	.word	0x08007165
 8007160:	08007189 	.word	0x08007189
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	3303      	adds	r3, #3
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800716e:	8afa      	ldrh	r2, [r7, #22]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	b29b      	uxth	r3, r3
 8007176:	429a      	cmp	r2, r3
 8007178:	d91c      	bls.n	80071b4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	619a      	str	r2, [r3, #24]
        }
        break;
 8007186:	e015      	b.n	80071b4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	3303      	adds	r3, #3
 800718e:	089b      	lsrs	r3, r3, #2
 8007190:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007192:	8afa      	ldrh	r2, [r7, #22]
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	b29b      	uxth	r3, r3
 800719e:	429a      	cmp	r2, r3
 80071a0:	d90a      	bls.n	80071b8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80071ae:	e003      	b.n	80071b8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <USB_HC_StartXfer+0x4d2>
        break;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <USB_HC_StartXfer+0x4d2>
        break;
 80071b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6999      	ldr	r1, [r3, #24]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	785a      	ldrb	r2, [r3, #1]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2000      	movs	r0, #0
 80071ca:	9000      	str	r0, [sp, #0]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff f9c9 	bl	8006564 <USB_WritePacket>
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	; 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	b29b      	uxth	r3, r3
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80071fe:	b480      	push	{r7}
 8007200:	b089      	sub	sp, #36	; 0x24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0c9b      	lsrs	r3, r3, #18
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	0fdb      	lsrs	r3, r3, #31
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	0fdb      	lsrs	r3, r3, #31
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d10d      	bne.n	8007280 <USB_HC_Halt+0x82>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <USB_HC_Halt+0x82>
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d002      	beq.n	800727c <USB_HC_Halt+0x7e>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d101      	bne.n	8007280 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e0d8      	b.n	8007432 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <USB_HC_Halt+0x8e>
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d173      	bne.n	8007374 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d14a      	bne.n	800734e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d133      	bne.n	800732c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007302:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3301      	adds	r3, #1
 8007308:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007310:	d82e      	bhi.n	8007370 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007328:	d0ec      	beq.n	8007304 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800732a:	e081      	b.n	8007430 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	440a      	add	r2, r1
 8007342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800734a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800734c:	e070      	b.n	8007430 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	440a      	add	r2, r1
 8007364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800736c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800736e:	e05f      	b.n	8007430 <USB_HC_Halt+0x232>
            break;
 8007370:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007372:	e05d      	b.n	8007430 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	440a      	add	r2, r1
 800738a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800738e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007392:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d133      	bne.n	800740c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073f0:	d81d      	bhi.n	800742e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007408:	d0ec      	beq.n	80073e4 <USB_HC_Halt+0x1e6>
 800740a:	e011      	b.n	8007430 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	440a      	add	r2, r1
 8007422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e000      	b.n	8007430 <USB_HC_Halt+0x232>
          break;
 800742e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3724      	adds	r7, #36	; 0x24
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007454:	2301      	movs	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	04da      	lsls	r2, r3, #19
 800745c:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <USB_DoPing+0x74>)
 800745e:	4013      	ands	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007470:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007488:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007490:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749e:	461a      	mov	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	1ff80000 	.word	0x1ff80000

080074b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff8c 	bl	80063ea <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d2:	2110      	movs	r1, #16
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7fe ffe5 	bl	80064a4 <USB_FlushTxFifo>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff f80f 	bl	8006508 <USB_FlushRxFifo>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e01f      	b.n	800753a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007510:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007518:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007520:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752e:	461a      	mov	r2, r3
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	3301      	adds	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b0f      	cmp	r3, #15
 800753e:	d9dc      	bls.n	80074fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007540:	2300      	movs	r3, #0
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	e034      	b.n	80075b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	4413      	add	r3, r2
 800754e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800755c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007564:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800756c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757a:	461a      	mov	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800758c:	d80c      	bhi.n	80075a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a4:	d0ec      	beq.n	8007580 <USB_StopHost+0xc8>
 80075a6:	e000      	b.n	80075aa <USB_StopHost+0xf2>
        break;
 80075a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	3301      	adds	r3, #1
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d9c7      	bls.n	8007546 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075bc:	461a      	mov	r2, r3
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fe fefb 	bl	80063c8 <USB_EnableGlobalInt>

  return ret;
 80075d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075dc:	b590      	push	{r4, r7, lr}
 80075de:	b089      	sub	sp, #36	; 0x24
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075e4:	2301      	movs	r3, #1
 80075e6:	2202      	movs	r2, #2
 80075e8:	2102      	movs	r1, #2
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc85 	bl	8007efa <USBH_FindInterface>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2bff      	cmp	r3, #255	; 0xff
 80075f8:	d002      	beq.n	8007600 <USBH_CDC_InterfaceInit+0x24>
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d901      	bls.n	8007604 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007600:	2302      	movs	r3, #2
 8007602:	e13d      	b.n	8007880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc5a 	bl	8007ec2 <USBH_SelectInterface>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007618:	2302      	movs	r3, #2
 800761a:	e131      	b.n	8007880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007622:	2050      	movs	r0, #80	; 0x50
 8007624:	f002 fb66 	bl	8009cf4 <malloc>
 8007628:	4603      	mov	r3, r0
 800762a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800763c:	2302      	movs	r3, #2
 800763e:	e11f      	b.n	8007880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007640:	2250      	movs	r2, #80	; 0x50
 8007642:	2100      	movs	r1, #0
 8007644:	68b8      	ldr	r0, [r7, #8]
 8007646:	f002 fc11 	bl	8009e6c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	211a      	movs	r1, #26
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b25b      	sxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	da15      	bge.n	800768e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	211a      	movs	r1, #26
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
 800766e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	211a      	movs	r1, #26
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007688:	881a      	ldrh	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 ffce 	bl	8009636 <USBH_AllocPipe>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	7819      	ldrb	r1, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	7858      	ldrb	r0, [r3, #1]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	8952      	ldrh	r2, [r2, #10]
 80076ba:	9202      	str	r2, [sp, #8]
 80076bc:	2203      	movs	r2, #3
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4623      	mov	r3, r4
 80076c4:	4602      	mov	r2, r0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 ff86 	bl	80095d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2200      	movs	r2, #0
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f002 fa87 	bl	8009be8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	210a      	movs	r1, #10
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc0a 	bl	8007efa <USBH_FindInterface>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2bff      	cmp	r3, #255	; 0xff
 80076ee:	d002      	beq.n	80076f6 <USBH_CDC_InterfaceInit+0x11a>
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d901      	bls.n	80076fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076f6:	2302      	movs	r3, #2
 80076f8:	e0c2      	b.n	8007880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	211a      	movs	r1, #26
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b25b      	sxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	da16      	bge.n	8007740 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	211a      	movs	r1, #26
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	4413      	add	r3, r2
 800771e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	211a      	movs	r1, #26
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007738:	881a      	ldrh	r2, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	835a      	strh	r2, [r3, #26]
 800773e:	e015      	b.n	800776c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	211a      	movs	r1, #26
 8007746:	fb01 f303 	mul.w	r3, r1, r3
 800774a:	4413      	add	r3, r2
 800774c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	211a      	movs	r1, #26
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	4413      	add	r3, r2
 8007762:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	211a      	movs	r1, #26
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	4413      	add	r3, r2
 8007778:	f203 3356 	addw	r3, r3, #854	; 0x356
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b25b      	sxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	da16      	bge.n	80077b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	211a      	movs	r1, #26
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	211a      	movs	r1, #26
 80077a0:	fb01 f303 	mul.w	r3, r1, r3
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077aa:	881a      	ldrh	r2, [r3, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	835a      	strh	r2, [r3, #26]
 80077b0:	e015      	b.n	80077de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	211a      	movs	r1, #26
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	4413      	add	r3, r2
 80077be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	211a      	movs	r1, #26
 80077ce:	fb01 f303 	mul.w	r3, r1, r3
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	7b9b      	ldrb	r3, [r3, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 ff26 	bl	8009636 <USBH_AllocPipe>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7bdb      	ldrb	r3, [r3, #15]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 ff1c 	bl	8009636 <USBH_AllocPipe>
 80077fe:	4603      	mov	r3, r0
 8007800:	461a      	mov	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	7b59      	ldrb	r1, [r3, #13]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	7b98      	ldrb	r0, [r3, #14]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	8b12      	ldrh	r2, [r2, #24]
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	2202      	movs	r2, #2
 8007822:	9201      	str	r2, [sp, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4623      	mov	r3, r4
 8007828:	4602      	mov	r2, r0
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fed4 	bl	80095d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	7b19      	ldrb	r1, [r3, #12]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	7bd8      	ldrb	r0, [r3, #15]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	8b52      	ldrh	r2, [r2, #26]
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	2202      	movs	r2, #2
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4623      	mov	r3, r4
 8007852:	4602      	mov	r2, r0
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 febf 	bl	80095d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	7b5b      	ldrb	r3, [r3, #13]
 8007866:	2200      	movs	r2, #0
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f002 f9bc 	bl	8009be8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	7b1b      	ldrb	r3, [r3, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f002 f9b5 	bl	8009be8 <USBH_LL_SetToggle>

  return USBH_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bd90      	pop	{r4, r7, pc}

08007888 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00e      	beq.n	80078c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 feb4 	bl	8009616 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fedf 	bl	8009678 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7b1b      	ldrb	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	7b1b      	ldrb	r3, [r3, #12]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 fea1 	bl	8009616 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	7b1b      	ldrb	r3, [r3, #12]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fecc 	bl	8009678 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	7b5b      	ldrb	r3, [r3, #13]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00e      	beq.n	800790c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	7b5b      	ldrb	r3, [r3, #13]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fe8e 	bl	8009616 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	7b5b      	ldrb	r3, [r3, #13]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 feb9 	bl	8009678 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4618      	mov	r0, r3
 8007922:	f002 f9ef 	bl	8009d04 <free>
    phost->pActiveClass->pData = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792c:	2200      	movs	r2, #0
 800792e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3340      	adds	r3, #64	; 0x40
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8b1 	bl	8007aba <GetLineCoding>
 8007958:	4603      	mov	r3, r0
 800795a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007968:	2102      	movs	r1, #2
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800796e:	7afb      	ldrb	r3, [r7, #11]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007998:	2b04      	cmp	r3, #4
 800799a:	d877      	bhi.n	8007a8c <USBH_CDC_Process+0x114>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <USBH_CDC_Process+0x2c>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079bf 	.word	0x080079bf
 80079ac:	080079ef 	.word	0x080079ef
 80079b0:	08007a63 	.word	0x08007a63
 80079b4:	08007a71 	.word	0x08007a71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	e06d      	b.n	8007a9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f897 	bl	8007af8 <SetLineCoding>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079dc:	e058      	b.n	8007a90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d055      	beq.n	8007a90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2204      	movs	r2, #4
 80079e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079ec:	e050      	b.n	8007a90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3340      	adds	r3, #64	; 0x40
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f860 	bl	8007aba <GetLineCoding>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d126      	bne.n	8007a52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d13b      	bne.n	8007a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d133      	bne.n	8007a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d12b      	bne.n	8007a94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d124      	bne.n	8007a94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f958 	bl	8007d00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a50:	e020      	b.n	8007a94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d01d      	beq.n	8007a94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a60:	e018      	b.n	8007a94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f867 	bl	8007b36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f8da 	bl	8007c22 <CDC_ProcessReception>
      break;
 8007a6e:	e014      	b.n	8007a9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a70:	2100      	movs	r1, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f822 	bl	8008abc <USBH_ClrFeature>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a8a:	e005      	b.n	8007a98 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e004      	b.n	8007a9a <USBH_CDC_Process+0x122>
      break;
 8007a90:	bf00      	nop
 8007a92:	e002      	b.n	8007a9a <USBH_CDC_Process+0x122>
      break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <USBH_CDC_Process+0x122>
      break;
 8007a98:	bf00      	nop

  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	22a1      	movs	r2, #161	; 0xa1
 8007ac8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2221      	movs	r2, #33	; 0x21
 8007ace:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2207      	movs	r2, #7
 8007ae0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fb23 	bl	8009134 <USBH_CtlReq>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2221      	movs	r2, #33	; 0x21
 8007b06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2207      	movs	r2, #7
 8007b1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2207      	movs	r2, #7
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fb04 	bl	8009134 <USBH_CtlReq>
 8007b2c:	4603      	mov	r3, r0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af02      	add	r7, sp, #8
 8007b3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d002      	beq.n	8007b5c <CDC_ProcessTransmission+0x26>
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d023      	beq.n	8007ba2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b5a:	e05e      	b.n	8007c1a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	8b12      	ldrh	r2, [r2, #24]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d90b      	bls.n	8007b80 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	69d9      	ldr	r1, [r3, #28]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8b1a      	ldrh	r2, [r3, #24]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	7b5b      	ldrb	r3, [r3, #13]
 8007b74:	2001      	movs	r0, #1
 8007b76:	9000      	str	r0, [sp, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fcea 	bl	8009552 <USBH_BulkSendData>
 8007b7e:	e00b      	b.n	8007b98 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	7b5b      	ldrb	r3, [r3, #13]
 8007b8e:	2001      	movs	r0, #1
 8007b90:	9000      	str	r0, [sp, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fcdd 	bl	8009552 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ba0:	e03b      	b.n	8007c1a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	7b5b      	ldrb	r3, [r3, #13]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fff3 	bl	8009b94 <USBH_LL_GetURBState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d128      	bne.n	8007c0a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	8b12      	ldrh	r2, [r2, #24]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d90e      	bls.n	8007be2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	8b12      	ldrh	r2, [r2, #24]
 8007bcc:	1a9a      	subs	r2, r3, r2
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	8b12      	ldrh	r2, [r2, #24]
 8007bda:	441a      	add	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	61da      	str	r2, [r3, #28]
 8007be0:	e002      	b.n	8007be8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bf8:	e00e      	b.n	8007c18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f868 	bl	8007cd8 <USBH_CDC_TransmitCallback>
      break;
 8007c08:	e006      	b.n	8007c18 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d103      	bne.n	8007c18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c18:	bf00      	nop
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d002      	beq.n	8007c48 <CDC_ProcessReception+0x26>
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d00e      	beq.n	8007c64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c46:	e043      	b.n	8007cd0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6a19      	ldr	r1, [r3, #32]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	8b5a      	ldrh	r2, [r3, #26]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	7b1b      	ldrb	r3, [r3, #12]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 fca1 	bl	800959c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c62:	e035      	b.n	8007cd0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	7b1b      	ldrb	r3, [r3, #12]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 ff92 	bl	8009b94 <USBH_LL_GetURBState>
 8007c70:	4603      	mov	r3, r0
 8007c72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c74:	7cfb      	ldrb	r3, [r7, #19]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d129      	bne.n	8007cce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	7b1b      	ldrb	r3, [r3, #12]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fef5 	bl	8009a70 <USBH_LL_GetLastXferSize>
 8007c86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d016      	beq.n	8007cc0 <CDC_ProcessReception+0x9e>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	8b5b      	ldrh	r3, [r3, #26]
 8007c96:	461a      	mov	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d910      	bls.n	8007cc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad2      	subs	r2, r2, r3
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	441a      	add	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cbe:	e006      	b.n	8007cce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f80f 	bl	8007cec <USBH_CDC_ReceiveCallback>
      break;
 8007cce:	bf00      	nop
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e029      	b.n	8007d80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	79fa      	ldrb	r2, [r7, #7]
 8007d30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f81f 	bl	8007d88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fdc5 	bl	8009908 <USBH_LL_Init>

  return USBH_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e009      	b.n	8007dae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	33e0      	adds	r3, #224	; 0xe0
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	2200      	movs	r2, #0
 8007da6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b0f      	cmp	r3, #15
 8007db2:	d9f2      	bls.n	8007d9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e009      	b.n	8007dce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd4:	d3f1      	bcc.n	8007dba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2240      	movs	r2, #64	; 0x40
 8007dfa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	331c      	adds	r3, #28
 8007e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f002 f81d 	bl	8009e6c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f002 f814 	bl	8009e6c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007e4a:	2212      	movs	r2, #18
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 f80c 	bl	8009e6c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e5a:	223e      	movs	r2, #62	; 0x3e
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 f804 	bl	8009e6c <memset>

  return USBH_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d016      	beq.n	8007eb0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10e      	bne.n	8007eaa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e92:	1c59      	adds	r1, r3, #1
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	33de      	adds	r3, #222	; 0xde
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e004      	b.n	8007eb4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	e001      	b.n	8007eb4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d204      	bcs.n	8007ee8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	78fa      	ldrb	r2, [r7, #3]
 8007ee2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ee6:	e001      	b.n	8007eec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b087      	sub	sp, #28
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	461a      	mov	r2, r3
 8007f08:	4603      	mov	r3, r0
 8007f0a:	70fb      	strb	r3, [r7, #3]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70bb      	strb	r3, [r7, #2]
 8007f10:	4613      	mov	r3, r2
 8007f12:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f22:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f24:	e025      	b.n	8007f72 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	221a      	movs	r2, #26
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	3308      	adds	r3, #8
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	3302      	adds	r3, #2
 8007f36:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	795b      	ldrb	r3, [r3, #5]
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d002      	beq.n	8007f48 <USBH_FindInterface+0x4e>
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	2bff      	cmp	r3, #255	; 0xff
 8007f46:	d111      	bne.n	8007f6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f4c:	78ba      	ldrb	r2, [r7, #2]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d002      	beq.n	8007f58 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f52:	78bb      	ldrb	r3, [r7, #2]
 8007f54:	2bff      	cmp	r3, #255	; 0xff
 8007f56:	d109      	bne.n	8007f6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f5c:	787a      	ldrb	r2, [r7, #1]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d002      	beq.n	8007f68 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f62:	787b      	ldrb	r3, [r7, #1]
 8007f64:	2bff      	cmp	r3, #255	; 0xff
 8007f66:	d101      	bne.n	8007f6c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	e006      	b.n	8007f7a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d9d6      	bls.n	8007f26 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f78:	23ff      	movs	r3, #255	; 0xff
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fcf6 	bl	8009980 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f94:	2101      	movs	r1, #1
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fe0f 	bl	8009bba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af04      	add	r7, sp, #16
 8007fae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d102      	bne.n	8007fca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b0b      	cmp	r3, #11
 8007fd2:	f200 81be 	bhi.w	8008352 <USBH_Process+0x3aa>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <USBH_Process+0x34>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	0800800d 	.word	0x0800800d
 8007fe0:	0800803f 	.word	0x0800803f
 8007fe4:	080080a7 	.word	0x080080a7
 8007fe8:	080082ed 	.word	0x080082ed
 8007fec:	08008353 	.word	0x08008353
 8007ff0:	0800814b 	.word	0x0800814b
 8007ff4:	08008293 	.word	0x08008293
 8007ff8:	08008181 	.word	0x08008181
 8007ffc:	080081a1 	.word	0x080081a1
 8008000:	080081c1 	.word	0x080081c1
 8008004:	08008205 	.word	0x08008205
 8008008:	080082d5 	.word	0x080082d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 819e 	beq.w	8008356 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008020:	20c8      	movs	r0, #200	; 0xc8
 8008022:	f001 fe14 	bl	8009c4e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fd07 	bl	8009a3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800803c:	e18b      	b.n	8008356 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008044:	2b01      	cmp	r3, #1
 8008046:	d107      	bne.n	8008058 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008056:	e18d      	b.n	8008374 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800805e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008062:	d914      	bls.n	800808e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800806a:	3301      	adds	r3, #1
 800806c:	b2da      	uxtb	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800807a:	2b03      	cmp	r3, #3
 800807c:	d903      	bls.n	8008086 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220d      	movs	r2, #13
 8008082:	701a      	strb	r2, [r3, #0]
      break;
 8008084:	e176      	b.n	8008374 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	701a      	strb	r2, [r3, #0]
      break;
 800808c:	e172      	b.n	8008374 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008094:	f103 020a 	add.w	r2, r3, #10
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800809e:	200a      	movs	r0, #10
 80080a0:	f001 fdd5 	bl	8009c4e <USBH_Delay>
      break;
 80080a4:	e166      	b.n	8008374 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080b6:	2104      	movs	r1, #4
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80080bc:	2064      	movs	r0, #100	; 0x64
 80080be:	f001 fdc6 	bl	8009c4e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fc92 	bl	80099ec <USBH_LL_GetSpeed>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2205      	movs	r2, #5
 80080d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 faab 	bl	8009636 <USBH_AllocPipe>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 faa3 	bl	8009636 <USBH_AllocPipe>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	7919      	ldrb	r1, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800810c:	b292      	uxth	r2, r2
 800810e:	9202      	str	r2, [sp, #8]
 8008110:	2200      	movs	r2, #0
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	4603      	mov	r3, r0
 8008118:	2280      	movs	r2, #128	; 0x80
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fa5c 	bl	80095d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7959      	ldrb	r1, [r3, #5]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008134:	b292      	uxth	r2, r2
 8008136:	9202      	str	r2, [sp, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4603      	mov	r3, r0
 8008140:	2200      	movs	r2, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fa48 	bl	80095d8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008148:	e114      	b.n	8008374 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f918 	bl	8008380 <USBH_HandleEnum>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 80fe 	bne.w	800835a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800816c:	2b01      	cmp	r3, #1
 800816e:	d103      	bne.n	8008178 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2208      	movs	r2, #8
 8008174:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008176:	e0f0      	b.n	800835a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2207      	movs	r2, #7
 800817c:	701a      	strb	r2, [r3, #0]
      break;
 800817e:	e0ec      	b.n	800835a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80e9 	beq.w	800835e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008192:	2101      	movs	r1, #1
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2208      	movs	r2, #8
 800819c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800819e:	e0de      	b.n	800835e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fc3f 	bl	8008a2e <USBH_SetCfg>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80d5 	bne.w	8008362 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2209      	movs	r2, #9
 80081bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081be:	e0d0      	b.n	8008362 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d016      	beq.n	80081fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80081ce:	2101      	movs	r1, #1
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc4f 	bl	8008a74 <USBH_SetFeature>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	220a      	movs	r2, #10
 80081e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081e8:	e0bd      	b.n	8008366 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	f040 80b9 	bne.w	8008366 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	220a      	movs	r2, #10
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e0b4      	b.n	8008366 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	220a      	movs	r2, #10
 8008200:	701a      	strb	r2, [r3, #0]
      break;
 8008202:	e0b0      	b.n	8008366 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80ad 	beq.w	800836a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
 800821c:	e016      	b.n	800824c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800821e:	7bfa      	ldrb	r2, [r7, #15]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	32de      	adds	r2, #222	; 0xde
 8008224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008228:	791a      	ldrb	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008230:	429a      	cmp	r2, r3
 8008232:	d108      	bne.n	8008246 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008234:	7bfa      	ldrb	r2, [r7, #15]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32de      	adds	r2, #222	; 0xde
 800823a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008244:	e005      	b.n	8008252 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	3301      	adds	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0e5      	beq.n	800821e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d016      	beq.n	800828a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2206      	movs	r2, #6
 8008272:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800827a:	2103      	movs	r1, #3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008280:	e073      	b.n	800836a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e06f      	b.n	800836a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220d      	movs	r2, #13
 800828e:	701a      	strb	r2, [r3, #0]
      break;
 8008290:	e06b      	b.n	800836a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d017      	beq.n	80082cc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220b      	movs	r2, #11
 80082b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082ba:	e058      	b.n	800836e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d154      	bne.n	800836e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220d      	movs	r2, #13
 80082c8:	701a      	strb	r2, [r3, #0]
      break;
 80082ca:	e050      	b.n	800836e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220d      	movs	r2, #13
 80082d0:	701a      	strb	r2, [r3, #0]
      break;
 80082d2:	e04c      	b.n	800836e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d049      	beq.n	8008372 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
      }
      break;
 80082ea:	e042      	b.n	8008372 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fd47 	bl	8007d88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008328:	2105      	movs	r1, #5
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b01      	cmp	r3, #1
 8008338:	d107      	bne.n	800834a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff fe1f 	bl	8007f86 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008348:	e014      	b.n	8008374 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 fb18 	bl	8009980 <USBH_LL_Start>
      break;
 8008350:	e010      	b.n	8008374 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008352:	bf00      	nop
 8008354:	e00e      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 8008356:	bf00      	nop
 8008358:	e00c      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 800835a:	bf00      	nop
 800835c:	e00a      	b.n	8008374 <USBH_Process+0x3cc>
    break;
 800835e:	bf00      	nop
 8008360:	e008      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 8008362:	bf00      	nop
 8008364:	e006      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 8008366:	bf00      	nop
 8008368:	e004      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <USBH_Process+0x3cc>
      break;
 8008372:	bf00      	nop
  }
  return USBH_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop

08008380 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af04      	add	r7, sp, #16
 8008386:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800838c:	2301      	movs	r3, #1
 800838e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b07      	cmp	r3, #7
 8008396:	f200 81c1 	bhi.w	800871c <USBH_HandleEnum+0x39c>
 800839a:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <USBH_HandleEnum+0x20>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083c1 	.word	0x080083c1
 80083a4:	0800847f 	.word	0x0800847f
 80083a8:	080084e9 	.word	0x080084e9
 80083ac:	08008577 	.word	0x08008577
 80083b0:	080085e1 	.word	0x080085e1
 80083b4:	08008651 	.word	0x08008651
 80083b8:	08008697 	.word	0x08008697
 80083bc:	080086dd 	.word	0x080086dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80083c0:	2108      	movs	r1, #8
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa50 	bl	8008868 <USBH_Get_DevDesc>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d130      	bne.n	8008434 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7919      	ldrb	r1, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083f6:	b292      	uxth	r2, r2
 80083f8:	9202      	str	r2, [sp, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4603      	mov	r3, r0
 8008402:	2280      	movs	r2, #128	; 0x80
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f8e7 	bl	80095d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7959      	ldrb	r1, [r3, #5]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800841e:	b292      	uxth	r2, r2
 8008420:	9202      	str	r2, [sp, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	9201      	str	r2, [sp, #4]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4603      	mov	r3, r0
 800842a:	2200      	movs	r2, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f8d3 	bl	80095d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008432:	e175      	b.n	8008720 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b03      	cmp	r3, #3
 8008438:	f040 8172 	bne.w	8008720 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008452:	2b03      	cmp	r3, #3
 8008454:	d903      	bls.n	800845e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	220d      	movs	r2, #13
 800845a:	701a      	strb	r2, [r3, #0]
      break;
 800845c:	e160      	b.n	8008720 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	795b      	ldrb	r3, [r3, #5]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 f907 	bl	8009678 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	791b      	ldrb	r3, [r3, #4]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 f901 	bl	8009678 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
      break;
 800847c:	e150      	b.n	8008720 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800847e:	2112      	movs	r1, #18
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f9f1 	bl	8008868 <USBH_Get_DevDesc>
 8008486:	4603      	mov	r3, r0
 8008488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008496:	e145      	b.n	8008724 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b03      	cmp	r3, #3
 800849c:	f040 8142 	bne.w	8008724 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a6:	3301      	adds	r3, #1
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d903      	bls.n	80084c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	220d      	movs	r2, #13
 80084be:	701a      	strb	r2, [r3, #0]
      break;
 80084c0:	e130      	b.n	8008724 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f8d5 	bl	8009678 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f8cf 	bl	8009678 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
      break;
 80084e6:	e11d      	b.n	8008724 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80084e8:	2101      	movs	r1, #1
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa7b 	bl	80089e6 <USBH_SetAddress>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d132      	bne.n	8008560 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80084fa:	2002      	movs	r0, #2
 80084fc:	f001 fba7 	bl	8009c4e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2203      	movs	r2, #3
 800850c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7919      	ldrb	r1, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008522:	b292      	uxth	r2, r2
 8008524:	9202      	str	r2, [sp, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	9201      	str	r2, [sp, #4]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4603      	mov	r3, r0
 800852e:	2280      	movs	r2, #128	; 0x80
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f851 	bl	80095d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7959      	ldrb	r1, [r3, #5]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800854a:	b292      	uxth	r2, r2
 800854c:	9202      	str	r2, [sp, #8]
 800854e:	2200      	movs	r2, #0
 8008550:	9201      	str	r2, [sp, #4]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4603      	mov	r3, r0
 8008556:	2200      	movs	r2, #0
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f83d 	bl	80095d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800855e:	e0e3      	b.n	8008728 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b03      	cmp	r3, #3
 8008564:	f040 80e0 	bne.w	8008728 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	220d      	movs	r2, #13
 800856c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	705a      	strb	r2, [r3, #1]
      break;
 8008574:	e0d8      	b.n	8008728 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008576:	2109      	movs	r1, #9
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9a1 	bl	80088c0 <USBH_Get_CfgDesc>
 800857e:	4603      	mov	r3, r0
 8008580:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2204      	movs	r2, #4
 800858c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800858e:	e0cd      	b.n	800872c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b03      	cmp	r3, #3
 8008594:	f040 80ca 	bne.w	800872c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800859e:	3301      	adds	r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d903      	bls.n	80085ba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	220d      	movs	r2, #13
 80085b6:	701a      	strb	r2, [r3, #0]
      break;
 80085b8:	e0b8      	b.n	800872c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	795b      	ldrb	r3, [r3, #5]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f859 	bl	8009678 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	791b      	ldrb	r3, [r3, #4]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f853 	bl	8009678 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
      break;
 80085de:	e0a5      	b.n	800872c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f969 	bl	80088c0 <USBH_Get_CfgDesc>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2205      	movs	r2, #5
 80085fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085fe:	e097      	b.n	8008730 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b03      	cmp	r3, #3
 8008604:	f040 8094 	bne.w	8008730 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800860e:	3301      	adds	r3, #1
 8008610:	b2da      	uxtb	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800861e:	2b03      	cmp	r3, #3
 8008620:	d903      	bls.n	800862a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	220d      	movs	r2, #13
 8008626:	701a      	strb	r2, [r3, #0]
      break;
 8008628:	e082      	b.n	8008730 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795b      	ldrb	r3, [r3, #5]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f821 	bl	8009678 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	791b      	ldrb	r3, [r3, #4]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f81b 	bl	8009678 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
      break;
 800864e:	e06f      	b.n	8008730 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008656:	2b00      	cmp	r3, #0
 8008658:	d019      	beq.n	800868e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008666:	23ff      	movs	r3, #255	; 0xff
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f953 	bl	8008914 <USBH_Get_StringDesc>
 800866e:	4603      	mov	r3, r0
 8008670:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2206      	movs	r2, #6
 800867c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800867e:	e059      	b.n	8008734 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d156      	bne.n	8008734 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2206      	movs	r2, #6
 800868a:	705a      	strb	r2, [r3, #1]
      break;
 800868c:	e052      	b.n	8008734 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2206      	movs	r2, #6
 8008692:	705a      	strb	r2, [r3, #1]
      break;
 8008694:	e04e      	b.n	8008734 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800869c:	2b00      	cmp	r3, #0
 800869e:	d019      	beq.n	80086d4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086ac:	23ff      	movs	r3, #255	; 0xff
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f930 	bl	8008914 <USBH_Get_StringDesc>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2207      	movs	r2, #7
 80086c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086c4:	e038      	b.n	8008738 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d135      	bne.n	8008738 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2207      	movs	r2, #7
 80086d0:	705a      	strb	r2, [r3, #1]
      break;
 80086d2:	e031      	b.n	8008738 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2207      	movs	r2, #7
 80086d8:	705a      	strb	r2, [r3, #1]
      break;
 80086da:	e02d      	b.n	8008738 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d017      	beq.n	8008716 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086f2:	23ff      	movs	r3, #255	; 0xff
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f90d 	bl	8008914 <USBH_Get_StringDesc>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d102      	bne.n	800870a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008708:	e018      	b.n	800873c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d115      	bne.n	800873c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e012      	b.n	800873c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
      break;
 800871a:	e00f      	b.n	800873c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800871c:	bf00      	nop
 800871e:	e00e      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008720:	bf00      	nop
 8008722:	e00c      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008724:	bf00      	nop
 8008726:	e00a      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008728:	bf00      	nop
 800872a:	e008      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 800872c:	bf00      	nop
 800872e:	e006      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008730:	bf00      	nop
 8008732:	e004      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008734:	bf00      	nop
 8008736:	e002      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 8008738:	bf00      	nop
 800873a:	e000      	b.n	800873e <USBH_HandleEnum+0x3be>
      break;
 800873c:	bf00      	nop
  }
  return Status;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f804 	bl	800878a <USBH_HandleSof>
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b0b      	cmp	r3, #11
 800879a:	d10a      	bne.n	80087b2 <USBH_HandleSof+0x28>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
  }
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80087ca:	bf00      	nop
}
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80087e6:	bf00      	nop
}
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f8b8 	bl	80099b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	791b      	ldrb	r3, [r3, #4]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 ff13 	bl	8009678 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	795b      	ldrb	r3, [r3, #5]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 ff0d 	bl	8009678 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008874:	887b      	ldrh	r3, [r7, #2]
 8008876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800887a:	d901      	bls.n	8008880 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800887c:	2303      	movs	r3, #3
 800887e:	e01b      	b.n	80088b8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008886:	887b      	ldrh	r3, [r7, #2]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4613      	mov	r3, r2
 800888c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f872 	bl	800897c <USBH_GetDescriptor>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088a8:	887a      	ldrh	r2, [r7, #2]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f929 	bl	8008b04 <USBH_ParseDevDesc>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	331c      	adds	r3, #28
 80088d0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80088d2:	887b      	ldrh	r3, [r7, #2]
 80088d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d8:	d901      	bls.n	80088de <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80088da:	2303      	movs	r3, #3
 80088dc:	e016      	b.n	800890c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80088de:	887b      	ldrh	r3, [r7, #2]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e8:	2100      	movs	r1, #0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f846 	bl	800897c <USBH_GetDescriptor>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d107      	bne.n	800890a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80088fa:	887b      	ldrh	r3, [r7, #2]
 80088fc:	461a      	mov	r2, r3
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f9b3 	bl	8008c6c <USBH_ParseCfgDesc>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	607a      	str	r2, [r7, #4]
 800891e:	461a      	mov	r2, r3
 8008920:	460b      	mov	r3, r1
 8008922:	72fb      	strb	r3, [r7, #11]
 8008924:	4613      	mov	r3, r2
 8008926:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008928:	893b      	ldrh	r3, [r7, #8]
 800892a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892e:	d802      	bhi.n	8008936 <USBH_Get_StringDesc+0x22>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008936:	2303      	movs	r3, #3
 8008938:	e01c      	b.n	8008974 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	b29b      	uxth	r3, r3
 800893e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008942:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800894a:	893b      	ldrh	r3, [r7, #8]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	460b      	mov	r3, r1
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f812 	bl	800897c <USBH_GetDescriptor>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d107      	bne.n	8008972 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008968:	893a      	ldrh	r2, [r7, #8]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fb93 	bl	8009098 <USBH_ParseStringDesc>
  }

  return status;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	72fb      	strb	r3, [r7, #11]
 800898a:	4613      	mov	r3, r2
 800898c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	789b      	ldrb	r3, [r3, #2]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d11c      	bne.n	80089d0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008996:	7afb      	ldrb	r3, [r7, #11]
 8008998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2206      	movs	r2, #6
 80089a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	893a      	ldrh	r2, [r7, #8]
 80089ac:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089ae:	893b      	ldrh	r3, [r7, #8]
 80089b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089b8:	d104      	bne.n	80089c4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f240 4209 	movw	r2, #1033	; 0x409
 80089c0:	829a      	strh	r2, [r3, #20]
 80089c2:	e002      	b.n	80089ca <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8b3a      	ldrh	r2, [r7, #24]
 80089ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089d0:	8b3b      	ldrh	r3, [r7, #24]
 80089d2:	461a      	mov	r2, r3
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fbac 	bl	8009134 <USBH_CtlReq>
 80089dc:	4603      	mov	r3, r0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	789b      	ldrb	r3, [r3, #2]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10f      	bne.n	8008a1a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2205      	movs	r2, #5
 8008a04:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fb88 	bl	8009134 <USBH_CtlReq>
 8008a24:	4603      	mov	r3, r0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	789b      	ldrb	r3, [r3, #2]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d10e      	bne.n	8008a60 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2209      	movs	r2, #9
 8008a4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	887a      	ldrh	r2, [r7, #2]
 8008a52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fb65 	bl	8009134 <USBH_CtlReq>
 8008a6a:	4603      	mov	r3, r0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	789b      	ldrb	r3, [r3, #2]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d10f      	bne.n	8008aa8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2203      	movs	r2, #3
 8008a92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fb41 	bl	8009134 <USBH_CtlReq>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	789b      	ldrb	r3, [r3, #2]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d10f      	bne.n	8008af0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008af0:	2200      	movs	r2, #0
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fb1d 	bl	8009134 <USBH_CtlReq>
 8008afa:	4603      	mov	r3, r0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008b18:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	e098      	b.n	8008c5a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785a      	ldrb	r2, [r3, #1]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3303      	adds	r3, #3
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	791a      	ldrb	r2, [r3, #4]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	795a      	ldrb	r2, [r3, #5]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	799a      	ldrb	r2, [r3, #6]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	79da      	ldrb	r2, [r3, #7]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d11b      	bne.n	8008bc0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	79db      	ldrb	r3, [r3, #7]
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	dc0f      	bgt.n	8008bb0 <USBH_ParseDevDesc+0xac>
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	db0f      	blt.n	8008bb4 <USBH_ParseDevDesc+0xb0>
 8008b94:	3b08      	subs	r3, #8
 8008b96:	4a34      	ldr	r2, [pc, #208]	; (8008c68 <USBH_ParseDevDesc+0x164>)
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bf14      	ite	ne
 8008ba4:	2301      	movne	r3, #1
 8008ba6:	2300      	moveq	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <USBH_ParseDevDesc+0xb8>
 8008bae:	e001      	b.n	8008bb4 <USBH_ParseDevDesc+0xb0>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d003      	beq.n	8008bbc <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	71da      	strb	r2, [r3, #7]
        break;
 8008bba:	e000      	b.n	8008bbe <USBH_ParseDevDesc+0xba>
        break;
 8008bbc:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008bbe:	e00e      	b.n	8008bde <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d107      	bne.n	8008bda <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	79db      	ldrb	r3, [r3, #7]
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d005      	beq.n	8008bde <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2208      	movs	r2, #8
 8008bd6:	71da      	strb	r2, [r3, #7]
 8008bd8:	e001      	b.n	8008bde <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d939      	bls.n	8008c58 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3308      	adds	r3, #8
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3309      	adds	r3, #9
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	330a      	adds	r3, #10
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	330b      	adds	r3, #11
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	330d      	adds	r3, #13
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	7b9a      	ldrb	r2, [r3, #14]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	7bda      	ldrb	r2, [r3, #15]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	7c1a      	ldrb	r2, [r3, #16]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	7c5a      	ldrb	r2, [r3, #17]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	01000101 	.word	0x01000101

08008c6c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	; 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c80:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e0db      	b.n	8008e56 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	785a      	ldrb	r2, [r3, #1]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	3303      	adds	r3, #3
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cce:	bf28      	it	cs
 8008cd0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	791a      	ldrb	r2, [r3, #4]
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	795a      	ldrb	r2, [r3, #5]
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	799a      	ldrb	r2, [r3, #6]
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	79da      	ldrb	r2, [r3, #7]
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	7a1a      	ldrb	r2, [r3, #8]
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b09      	cmp	r3, #9
 8008d08:	d002      	beq.n	8008d10 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	2209      	movs	r2, #9
 8008d0e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	2b09      	cmp	r3, #9
 8008d14:	f240 809d 	bls.w	8008e52 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d18:	2309      	movs	r3, #9
 8008d1a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d20:	e081      	b.n	8008e26 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d22:	f107 0316 	add.w	r3, r7, #22
 8008d26:	4619      	mov	r1, r3
 8008d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2a:	f000 f9e8 	bl	80090fe <USBH_GetNextDesc>
 8008d2e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	785b      	ldrb	r3, [r3, #1]
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d176      	bne.n	8008e26 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d002      	beq.n	8008d46 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	2209      	movs	r2, #9
 8008d44:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d4a:	221a      	movs	r2, #26
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	3308      	adds	r3, #8
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	4413      	add	r3, r2
 8008d56:	3302      	adds	r3, #2
 8008d58:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d5c:	69f8      	ldr	r0, [r7, #28]
 8008d5e:	f000 f87e 	bl	8008e5e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d6c:	e043      	b.n	8008df6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d6e:	f107 0316 	add.w	r3, r7, #22
 8008d72:	4619      	mov	r1, r3
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	f000 f9c2 	bl	80090fe <USBH_GetNextDesc>
 8008d7a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	d138      	bne.n	8008df6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	795b      	ldrb	r3, [r3, #5]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d113      	bne.n	8008db4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d003      	beq.n	8008d9c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	799b      	ldrb	r3, [r3, #6]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d10b      	bne.n	8008db4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	79db      	ldrb	r3, [r3, #7]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10b      	bne.n	8008dbc <USBH_ParseCfgDesc+0x150>
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b09      	cmp	r3, #9
 8008daa:	d007      	beq.n	8008dbc <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	2209      	movs	r2, #9
 8008db0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008db2:	e003      	b.n	8008dbc <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	2207      	movs	r2, #7
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	e000      	b.n	8008dbe <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008dbc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dc6:	3201      	adds	r2, #1
 8008dc8:	00d2      	lsls	r2, r2, #3
 8008dca:	211a      	movs	r1, #26
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	6a3a      	ldr	r2, [r7, #32]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3304      	adds	r3, #4
 8008dda:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f870 	bl	8008ec6 <USBH_ParseEPDesc>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008df0:	3301      	adds	r3, #1
 8008df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	791b      	ldrb	r3, [r3, #4]
 8008dfa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d204      	bcs.n	8008e0c <USBH_ParseCfgDesc+0x1a0>
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	885a      	ldrh	r2, [r3, #2]
 8008e06:	8afb      	ldrh	r3, [r7, #22]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d8b0      	bhi.n	8008d6e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	791b      	ldrb	r3, [r3, #4]
 8008e10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d201      	bcs.n	8008e1c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e01c      	b.n	8008e56 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e20:	3301      	adds	r3, #1
 8008e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d805      	bhi.n	8008e3a <USBH_ParseCfgDesc+0x1ce>
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	885a      	ldrh	r2, [r3, #2]
 8008e32:	8afb      	ldrh	r3, [r7, #22]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	f63f af74 	bhi.w	8008d22 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	791b      	ldrb	r3, [r3, #4]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	bf28      	it	cs
 8008e42:	2302      	movcs	r3, #2
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d201      	bcs.n	8008e52 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e001      	b.n	8008e56 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	785a      	ldrb	r2, [r3, #1]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	789a      	ldrb	r2, [r3, #2]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	78da      	ldrb	r2, [r3, #3]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	bf28      	it	cs
 8008e92:	2302      	movcs	r3, #2
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	795a      	ldrb	r2, [r3, #5]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	799a      	ldrb	r2, [r3, #6]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	79da      	ldrb	r2, [r3, #7]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	7a1a      	ldrb	r2, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	721a      	strb	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b087      	sub	sp, #28
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	785a      	ldrb	r2, [r3, #1]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	789a      	ldrb	r2, [r3, #2]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	78da      	ldrb	r2, [r3, #3]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3305      	adds	r3, #5
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	799a      	ldrb	r2, [r3, #6]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	889b      	ldrh	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2a:	d804      	bhi.n	8008f36 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f34:	d901      	bls.n	8008f3a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008f36:	2303      	movs	r3, #3
 8008f38:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d136      	bne.n	8008fb2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	78db      	ldrb	r3, [r3, #3]
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d108      	bne.n	8008f62 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	889b      	ldrh	r3, [r3, #4]
 8008f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f58:	f240 8097 	bls.w	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	75fb      	strb	r3, [r7, #23]
 8008f60:	e093      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	889b      	ldrh	r3, [r3, #4]
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	f240 8089 	bls.w	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	75fb      	strb	r3, [r7, #23]
 8008f7c:	e085      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	78db      	ldrb	r3, [r3, #3]
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d005      	beq.n	8008f96 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	78db      	ldrb	r3, [r3, #3]
 8008f8e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d10a      	bne.n	8008fac <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	799b      	ldrb	r3, [r3, #6]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <USBH_ParseEPDesc+0xe0>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	799b      	ldrb	r3, [r3, #6]
 8008fa2:	2b10      	cmp	r3, #16
 8008fa4:	d970      	bls.n	8009088 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008faa:	e06d      	b.n	8009088 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008fac:	2303      	movs	r3, #3
 8008fae:	75fb      	strb	r3, [r7, #23]
 8008fb0:	e06b      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d13c      	bne.n	8009036 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	78db      	ldrb	r3, [r3, #3]
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d005      	beq.n	8008fd4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	78db      	ldrb	r3, [r3, #3]
 8008fcc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	889b      	ldrh	r3, [r3, #4]
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d956      	bls.n	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008fe0:	e053      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	78db      	ldrb	r3, [r3, #3]
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d10e      	bne.n	800900c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	799b      	ldrb	r3, [r3, #6]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d007      	beq.n	8009006 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d803      	bhi.n	8009006 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d941      	bls.n	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009006:	2303      	movs	r3, #3
 8009008:	75fb      	strb	r3, [r7, #23]
 800900a:	e03e      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	2b03      	cmp	r3, #3
 8009016:	d10b      	bne.n	8009030 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	799b      	ldrb	r3, [r3, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <USBH_ParseEPDesc+0x164>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	889b      	ldrh	r3, [r3, #4]
 8009024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009028:	d32f      	bcc.n	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800902a:	2303      	movs	r3, #3
 800902c:	75fb      	strb	r3, [r7, #23]
 800902e:	e02c      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009030:	2303      	movs	r3, #3
 8009032:	75fb      	strb	r3, [r7, #23]
 8009034:	e029      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800903c:	2b02      	cmp	r3, #2
 800903e:	d120      	bne.n	8009082 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	78db      	ldrb	r3, [r3, #3]
 8009044:	f003 0303 	and.w	r3, r3, #3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	889b      	ldrh	r3, [r3, #4]
 8009050:	2b08      	cmp	r3, #8
 8009052:	d01a      	beq.n	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009054:	2303      	movs	r3, #3
 8009056:	75fb      	strb	r3, [r7, #23]
 8009058:	e017      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	78db      	ldrb	r3, [r3, #3]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d10a      	bne.n	800907c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	799b      	ldrb	r3, [r3, #6]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <USBH_ParseEPDesc+0x1b0>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	889b      	ldrh	r3, [r3, #4]
 8009072:	2b08      	cmp	r3, #8
 8009074:	d909      	bls.n	800908a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009076:	2303      	movs	r3, #3
 8009078:	75fb      	strb	r3, [r7, #23]
 800907a:	e006      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800907c:	2303      	movs	r3, #3
 800907e:	75fb      	strb	r3, [r7, #23]
 8009080:	e003      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009082:	2303      	movs	r3, #3
 8009084:	75fb      	strb	r3, [r7, #23]
 8009086:	e000      	b.n	800908a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009088:	bf00      	nop
  }

  return status;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d120      	bne.n	80090f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	1e9a      	subs	r2, r3, #2
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bf28      	it	cs
 80090bc:	4613      	movcs	r3, r2
 80090be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3302      	adds	r3, #2
 80090c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80090c6:	2300      	movs	r3, #0
 80090c8:	82fb      	strh	r3, [r7, #22]
 80090ca:	e00b      	b.n	80090e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090cc:	8afb      	ldrh	r3, [r7, #22]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	3301      	adds	r3, #1
 80090dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090de:	8afb      	ldrh	r3, [r7, #22]
 80090e0:	3302      	adds	r3, #2
 80090e2:	82fb      	strh	r3, [r7, #22]
 80090e4:	8afa      	ldrh	r2, [r7, #22]
 80090e6:	8abb      	ldrh	r3, [r7, #20]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d3ef      	bcc.n	80090cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
  }
}
 80090f2:	bf00      	nop
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	881a      	ldrh	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	4413      	add	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009126:	68fb      	ldr	r3, [r7, #12]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009142:	2301      	movs	r3, #1
 8009144:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	789b      	ldrb	r3, [r3, #2]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d002      	beq.n	8009154 <USBH_CtlReq+0x20>
 800914e:	2b02      	cmp	r3, #2
 8009150:	d00f      	beq.n	8009172 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009152:	e027      	b.n	80091a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2202      	movs	r2, #2
 800916a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	e018      	b.n	80091a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f81c 	bl	80091b0 <USBH_HandleControl>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <USBH_CtlReq+0x54>
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d106      	bne.n	8009196 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	761a      	strb	r2, [r3, #24]
      break;
 8009194:	e005      	b.n	80091a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d102      	bne.n	80091a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	709a      	strb	r2, [r3, #2]
      break;
 80091a2:	bf00      	nop
  }
  return status;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7e1b      	ldrb	r3, [r3, #24]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	2b0a      	cmp	r3, #10
 80091c8:	f200 8156 	bhi.w	8009478 <USBH_HandleControl+0x2c8>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBH_HandleControl+0x24>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	08009201 	.word	0x08009201
 80091d8:	0800921b 	.word	0x0800921b
 80091dc:	08009285 	.word	0x08009285
 80091e0:	080092ab 	.word	0x080092ab
 80091e4:	080092e3 	.word	0x080092e3
 80091e8:	0800930d 	.word	0x0800930d
 80091ec:	0800935f 	.word	0x0800935f
 80091f0:	08009381 	.word	0x08009381
 80091f4:	080093bd 	.word	0x080093bd
 80091f8:	080093e3 	.word	0x080093e3
 80091fc:	08009421 	.word	0x08009421
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f103 0110 	add.w	r1, r3, #16
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	795b      	ldrb	r3, [r3, #5]
 800920a:	461a      	mov	r2, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f943 	bl	8009498 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	761a      	strb	r2, [r3, #24]
      break;
 8009218:	e139      	b.n	800948e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	795b      	ldrb	r3, [r3, #5]
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fcb7 	bl	8009b94 <USBH_LL_GetURBState>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d11e      	bne.n	800926e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	7c1b      	ldrb	r3, [r3, #16]
 8009234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009238:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	8adb      	ldrh	r3, [r3, #22]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009242:	7b7b      	ldrb	r3, [r7, #13]
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d103      	bne.n	8009250 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2203      	movs	r2, #3
 800924c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800924e:	e115      	b.n	800947c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2205      	movs	r2, #5
 8009254:	761a      	strb	r2, [r3, #24]
      break;
 8009256:	e111      	b.n	800947c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009258:	7b7b      	ldrb	r3, [r7, #13]
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d103      	bne.n	8009266 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2209      	movs	r2, #9
 8009262:	761a      	strb	r2, [r3, #24]
      break;
 8009264:	e10a      	b.n	800947c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2207      	movs	r2, #7
 800926a:	761a      	strb	r2, [r3, #24]
      break;
 800926c:	e106      	b.n	800947c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d003      	beq.n	800927c <USBH_HandleControl+0xcc>
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	2b02      	cmp	r3, #2
 8009278:	f040 8100 	bne.w	800947c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	220b      	movs	r2, #11
 8009280:	761a      	strb	r2, [r3, #24]
      break;
 8009282:	e0fb      	b.n	800947c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6899      	ldr	r1, [r3, #8]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	899a      	ldrh	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	791b      	ldrb	r3, [r3, #4]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f93a 	bl	8009516 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2204      	movs	r2, #4
 80092a6:	761a      	strb	r2, [r3, #24]
      break;
 80092a8:	e0f1      	b.n	800948e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc6f 	bl	8009b94 <USBH_LL_GetURBState>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d102      	bne.n	80092c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2209      	movs	r2, #9
 80092c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b05      	cmp	r3, #5
 80092ca:	d102      	bne.n	80092d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092cc:	2303      	movs	r3, #3
 80092ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092d0:	e0d6      	b.n	8009480 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	f040 80d3 	bne.w	8009480 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	220b      	movs	r2, #11
 80092de:	761a      	strb	r2, [r3, #24]
      break;
 80092e0:	e0ce      	b.n	8009480 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6899      	ldr	r1, [r3, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	899a      	ldrh	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	795b      	ldrb	r3, [r3, #5]
 80092ee:	2001      	movs	r0, #1
 80092f0:	9000      	str	r0, [sp, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8ea 	bl	80094cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2206      	movs	r2, #6
 8009308:	761a      	strb	r2, [r3, #24]
      break;
 800930a:	e0c0      	b.n	800948e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	795b      	ldrb	r3, [r3, #5]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fc3e 	bl	8009b94 <USBH_LL_GetURBState>
 8009318:	4603      	mov	r3, r0
 800931a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d103      	bne.n	800932a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2207      	movs	r2, #7
 8009326:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009328:	e0ac      	b.n	8009484 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b05      	cmp	r3, #5
 800932e:	d105      	bne.n	800933c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	220c      	movs	r2, #12
 8009334:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009336:	2303      	movs	r3, #3
 8009338:	73fb      	strb	r3, [r7, #15]
      break;
 800933a:	e0a3      	b.n	8009484 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d103      	bne.n	800934a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2205      	movs	r2, #5
 8009346:	761a      	strb	r2, [r3, #24]
      break;
 8009348:	e09c      	b.n	8009484 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	2b04      	cmp	r3, #4
 800934e:	f040 8099 	bne.w	8009484 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	220b      	movs	r2, #11
 8009356:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009358:	2302      	movs	r3, #2
 800935a:	73fb      	strb	r3, [r7, #15]
      break;
 800935c:	e092      	b.n	8009484 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	791b      	ldrb	r3, [r3, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8d5 	bl	8009516 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2208      	movs	r2, #8
 800937c:	761a      	strb	r2, [r3, #24]

      break;
 800937e:	e086      	b.n	800948e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	791b      	ldrb	r3, [r3, #4]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fc04 	bl	8009b94 <USBH_LL_GetURBState>
 800938c:	4603      	mov	r3, r0
 800938e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d105      	bne.n	80093a2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	220d      	movs	r2, #13
 800939a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093a0:	e072      	b.n	8009488 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d103      	bne.n	80093b0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	220b      	movs	r2, #11
 80093ac:	761a      	strb	r2, [r3, #24]
      break;
 80093ae:	e06b      	b.n	8009488 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d168      	bne.n	8009488 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80093b6:	2303      	movs	r3, #3
 80093b8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ba:	e065      	b.n	8009488 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	795b      	ldrb	r3, [r3, #5]
 80093c0:	2201      	movs	r2, #1
 80093c2:	9200      	str	r2, [sp, #0]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f87f 	bl	80094cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	220a      	movs	r2, #10
 80093de:	761a      	strb	r2, [r3, #24]
      break;
 80093e0:	e055      	b.n	800948e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	795b      	ldrb	r3, [r3, #5]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fbd3 	bl	8009b94 <USBH_LL_GetURBState>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d105      	bne.n	8009404 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	220d      	movs	r2, #13
 8009400:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009402:	e043      	b.n	800948c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b02      	cmp	r3, #2
 8009408:	d103      	bne.n	8009412 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2209      	movs	r2, #9
 800940e:	761a      	strb	r2, [r3, #24]
      break;
 8009410:	e03c      	b.n	800948c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b04      	cmp	r3, #4
 8009416:	d139      	bne.n	800948c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220b      	movs	r2, #11
 800941c:	761a      	strb	r2, [r3, #24]
      break;
 800941e:	e035      	b.n	800948c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7e5b      	ldrb	r3, [r3, #25]
 8009424:	3301      	adds	r3, #1
 8009426:	b2da      	uxtb	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	765a      	strb	r2, [r3, #25]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7e5b      	ldrb	r3, [r3, #25]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d806      	bhi.n	8009442 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009440:	e025      	b.n	800948e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009448:	2106      	movs	r1, #6
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	795b      	ldrb	r3, [r3, #5]
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f90c 	bl	8009678 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f906 	bl	8009678 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009472:	2302      	movs	r3, #2
 8009474:	73fb      	strb	r3, [r7, #15]
      break;
 8009476:	e00a      	b.n	800948e <USBH_HandleControl+0x2de>

    default:
      break;
 8009478:	bf00      	nop
 800947a:	e008      	b.n	800948e <USBH_HandleControl+0x2de>
      break;
 800947c:	bf00      	nop
 800947e:	e006      	b.n	800948e <USBH_HandleControl+0x2de>
      break;
 8009480:	bf00      	nop
 8009482:	e004      	b.n	800948e <USBH_HandleControl+0x2de>
      break;
 8009484:	bf00      	nop
 8009486:	e002      	b.n	800948e <USBH_HandleControl+0x2de>
      break;
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <USBH_HandleControl+0x2de>
      break;
 800948c:	bf00      	nop
  }

  return status;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af04      	add	r7, sp, #16
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094a6:	79f9      	ldrb	r1, [r7, #7]
 80094a8:	2300      	movs	r3, #0
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	2308      	movs	r3, #8
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fb38 	bl	8009b32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4611      	mov	r1, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	460b      	mov	r3, r1
 80094dc:	80fb      	strh	r3, [r7, #6]
 80094de:	4613      	mov	r3, r2
 80094e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094f0:	7979      	ldrb	r1, [r7, #5]
 80094f2:	7e3b      	ldrb	r3, [r7, #24]
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	9302      	str	r3, [sp, #8]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	2301      	movs	r3, #1
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	2300      	movs	r3, #0
 8009504:	2200      	movs	r2, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fb13 	bl	8009b32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b088      	sub	sp, #32
 800951a:	af04      	add	r7, sp, #16
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	4611      	mov	r1, r2
 8009522:	461a      	mov	r2, r3
 8009524:	460b      	mov	r3, r1
 8009526:	80fb      	strh	r3, [r7, #6]
 8009528:	4613      	mov	r3, r2
 800952a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800952c:	7979      	ldrb	r1, [r7, #5]
 800952e:	2300      	movs	r3, #0
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	88fb      	ldrh	r3, [r7, #6]
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	2301      	movs	r3, #1
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2300      	movs	r3, #0
 8009540:	2201      	movs	r2, #1
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 faf5 	bl	8009b32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009548:	2300      	movs	r3, #0

}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b088      	sub	sp, #32
 8009556:	af04      	add	r7, sp, #16
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	60b9      	str	r1, [r7, #8]
 800955c:	4611      	mov	r1, r2
 800955e:	461a      	mov	r2, r3
 8009560:	460b      	mov	r3, r1
 8009562:	80fb      	strh	r3, [r7, #6]
 8009564:	4613      	mov	r3, r2
 8009566:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009576:	7979      	ldrb	r1, [r7, #5]
 8009578:	7e3b      	ldrb	r3, [r7, #24]
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	88fb      	ldrh	r3, [r7, #6]
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	2301      	movs	r3, #1
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2302      	movs	r3, #2
 800958a:	2200      	movs	r2, #0
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fad0 	bl	8009b32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af04      	add	r7, sp, #16
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4611      	mov	r1, r2
 80095a8:	461a      	mov	r2, r3
 80095aa:	460b      	mov	r3, r1
 80095ac:	80fb      	strh	r3, [r7, #6]
 80095ae:	4613      	mov	r3, r2
 80095b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095b2:	7979      	ldrb	r1, [r7, #5]
 80095b4:	2300      	movs	r3, #0
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	9302      	str	r3, [sp, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	2301      	movs	r3, #1
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	2302      	movs	r3, #2
 80095c6:	2201      	movs	r2, #1
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fab2 	bl	8009b32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af04      	add	r7, sp, #16
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	4608      	mov	r0, r1
 80095e2:	4611      	mov	r1, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	70fb      	strb	r3, [r7, #3]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70bb      	strb	r3, [r7, #2]
 80095ee:	4613      	mov	r3, r2
 80095f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80095f2:	7878      	ldrb	r0, [r7, #1]
 80095f4:	78ba      	ldrb	r2, [r7, #2]
 80095f6:	78f9      	ldrb	r1, [r7, #3]
 80095f8:	8b3b      	ldrh	r3, [r7, #24]
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	7d3b      	ldrb	r3, [r7, #20]
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	7c3b      	ldrb	r3, [r7, #16]
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	4603      	mov	r3, r0
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa45 	bl	8009a96 <USBH_LL_OpenPipe>

  return USBH_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa64 	bl	8009af4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f836 	bl	80096b4 <USBH_GetFreePipe>
 8009648:	4603      	mov	r3, r0
 800964a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009652:	4293      	cmp	r3, r2
 8009654:	d00a      	beq.n	800966c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	89fb      	ldrh	r3, [r7, #14]
 800965a:	f003 030f 	and.w	r3, r3, #15
 800965e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	33e0      	adds	r3, #224	; 0xe0
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800966c:	89fb      	ldrh	r3, [r7, #14]
 800966e:	b2db      	uxtb	r3, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	2b0f      	cmp	r3, #15
 8009688:	d80d      	bhi.n	80096a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	33e0      	adds	r3, #224	; 0xe0
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	33e0      	adds	r3, #224	; 0xe0
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
 80096c4:	e00f      	b.n	80096e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	33e0      	adds	r3, #224	; 0xe0
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	e007      	b.n	80096f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	3301      	adds	r3, #1
 80096e4:	73fb      	strb	r3, [r7, #15]
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b0f      	cmp	r3, #15
 80096ea:	d9ec      	bls.n	80096c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80096ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009700:	2201      	movs	r2, #1
 8009702:	490e      	ldr	r1, [pc, #56]	; (800973c <MX_USB_HOST_Init+0x40>)
 8009704:	480e      	ldr	r0, [pc, #56]	; (8009740 <MX_USB_HOST_Init+0x44>)
 8009706:	f7fe fb05 	bl	8007d14 <USBH_Init>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009710:	f7f8 f8f6 	bl	8001900 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009714:	490b      	ldr	r1, [pc, #44]	; (8009744 <MX_USB_HOST_Init+0x48>)
 8009716:	480a      	ldr	r0, [pc, #40]	; (8009740 <MX_USB_HOST_Init+0x44>)
 8009718:	f7fe fba9 	bl	8007e6e <USBH_RegisterClass>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009722:	f7f8 f8ed 	bl	8001900 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009726:	4806      	ldr	r0, [pc, #24]	; (8009740 <MX_USB_HOST_Init+0x44>)
 8009728:	f7fe fc2d 	bl	8007f86 <USBH_Start>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009732:	f7f8 f8e5 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009736:	bf00      	nop
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	0800975d 	.word	0x0800975d
 8009740:	20000294 	.word	0x20000294
 8009744:	20000038 	.word	0x20000038

08009748 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800974c:	4802      	ldr	r0, [pc, #8]	; (8009758 <MX_USB_HOST_Process+0x10>)
 800974e:	f7fe fc2b 	bl	8007fa8 <USBH_Process>
}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000294 	.word	0x20000294

0800975c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	3b01      	subs	r3, #1
 800976c:	2b04      	cmp	r3, #4
 800976e:	d819      	bhi.n	80097a4 <USBH_UserProcess+0x48>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBH_UserProcess+0x1c>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097a5 	.word	0x080097a5
 800977c:	08009795 	.word	0x08009795
 8009780:	080097a5 	.word	0x080097a5
 8009784:	0800979d 	.word	0x0800979d
 8009788:	0800978d 	.word	0x0800978d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800978c:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <USBH_UserProcess+0x58>)
 800978e:	2203      	movs	r2, #3
 8009790:	701a      	strb	r2, [r3, #0]
  break;
 8009792:	e008      	b.n	80097a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <USBH_UserProcess+0x58>)
 8009796:	2202      	movs	r2, #2
 8009798:	701a      	strb	r2, [r3, #0]
  break;
 800979a:	e004      	b.n	80097a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800979c:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <USBH_UserProcess+0x58>)
 800979e:	2201      	movs	r2, #1
 80097a0:	701a      	strb	r2, [r3, #0]
  break;
 80097a2:	e000      	b.n	80097a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80097a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2000066c 	.word	0x2000066c

080097b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	; 0x28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	609a      	str	r2, [r3, #8]
 80097cc:	60da      	str	r2, [r3, #12]
 80097ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d8:	d13a      	bne.n	8009850 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	4a1d      	ldr	r2, [pc, #116]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	6313      	str	r3, [r2, #48]	; 0x30
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 80097ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80097f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097fc:	2302      	movs	r3, #2
 80097fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009804:	2300      	movs	r3, #0
 8009806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009808:	230a      	movs	r3, #10
 800980a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800980c:	f107 0314 	add.w	r3, r7, #20
 8009810:	4619      	mov	r1, r3
 8009812:	4812      	ldr	r0, [pc, #72]	; (800985c <HAL_HCD_MspInit+0xa4>)
 8009814:	f7f8 fcd4 	bl	80021c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	4a0e      	ldr	r2, [pc, #56]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	6353      	str	r3, [r2, #52]	; 0x34
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 800982a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982c:	4a0a      	ldr	r2, [pc, #40]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 800982e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009832:	6453      	str	r3, [r2, #68]	; 0x44
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <HAL_HCD_MspInit+0xa0>)
 8009836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009840:	2200      	movs	r2, #0
 8009842:	2100      	movs	r1, #0
 8009844:	2043      	movs	r0, #67	; 0x43
 8009846:	f7f8 fbf2 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800984a:	2043      	movs	r0, #67	; 0x43
 800984c:	f7f8 fc0b 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009850:	bf00      	nop
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40023800 	.word	0x40023800
 800985c:	40020000 	.word	0x40020000

08009860 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe ff79 	bl	8008766 <USBH_LL_IncTimer>
}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe ffb1 	bl	80087f2 <USBH_LL_Connect>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe ffba 	bl	8008820 <USBH_LL_Disconnect>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
 80098c0:	4613      	mov	r3, r2
 80098c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ff6b 	bl	80087ba <USBH_LL_PortEnabled>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ff6b 	bl	80087d6 <USBH_LL_PortDisabled>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009916:	2b01      	cmp	r3, #1
 8009918:	d12a      	bne.n	8009970 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800991a:	4a18      	ldr	r2, [pc, #96]	; (800997c <USBH_LL_Init+0x74>)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a15      	ldr	r2, [pc, #84]	; (800997c <USBH_LL_Init+0x74>)
 8009926:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <USBH_LL_Init+0x74>)
 800992c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009930:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009932:	4b12      	ldr	r3, [pc, #72]	; (800997c <USBH_LL_Init+0x74>)
 8009934:	2208      	movs	r2, #8
 8009936:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009938:	4b10      	ldr	r3, [pc, #64]	; (800997c <USBH_LL_Init+0x74>)
 800993a:	2201      	movs	r2, #1
 800993c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800993e:	4b0f      	ldr	r3, [pc, #60]	; (800997c <USBH_LL_Init+0x74>)
 8009940:	2200      	movs	r2, #0
 8009942:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009944:	4b0d      	ldr	r3, [pc, #52]	; (800997c <USBH_LL_Init+0x74>)
 8009946:	2202      	movs	r2, #2
 8009948:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800994a:	4b0c      	ldr	r3, [pc, #48]	; (800997c <USBH_LL_Init+0x74>)
 800994c:	2200      	movs	r2, #0
 800994e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009950:	480a      	ldr	r0, [pc, #40]	; (800997c <USBH_LL_Init+0x74>)
 8009952:	f7f8 fdea 	bl	800252a <HAL_HCD_Init>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800995c:	f7f7 ffd0 	bl	8001900 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009960:	4806      	ldr	r0, [pc, #24]	; (800997c <USBH_LL_Init+0x74>)
 8009962:	f7f9 fa4b 	bl	8002dfc <HAL_HCD_GetCurrentFrame>
 8009966:	4603      	mov	r3, r0
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7fe feec 	bl	8008748 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000670 	.word	0x20000670

08009980 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009996:	4618      	mov	r0, r3
 8009998:	f7f9 f9b8 	bl	8002d0c <HAL_HCD_Start>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f95e 	bl	8009c64 <USBH_Get_USB_Status>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7f9 f9c0 	bl	8002d52 <HAL_HCD_Stop>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 f943 	bl	8009c64 <USBH_Get_USB_Status>
 80099de:	4603      	mov	r3, r0
 80099e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80099f4:	2301      	movs	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7f9 fa0a 	bl	8002e18 <HAL_HCD_GetCurrentSpeed>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d00c      	beq.n	8009a24 <USBH_LL_GetSpeed+0x38>
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d80d      	bhi.n	8009a2a <USBH_LL_GetSpeed+0x3e>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <USBH_LL_GetSpeed+0x2c>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d003      	beq.n	8009a1e <USBH_LL_GetSpeed+0x32>
 8009a16:	e008      	b.n	8009a2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	e008      	b.n	8009a30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]
    break;
 8009a22:	e005      	b.n	8009a30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a24:	2302      	movs	r3, #2
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	e002      	b.n	8009a30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2e:	bf00      	nop
  }
  return  speed;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7f9 f99b 	bl	8002d8c <HAL_HCD_ResetPort>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 f901 	bl	8009c64 <USBH_Get_USB_Status>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a82:	78fa      	ldrb	r2, [r7, #3]
 8009a84:	4611      	mov	r1, r2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f9 f9a3 	bl	8002dd2 <HAL_HCD_HC_GetXferCount>
 8009a8c:	4603      	mov	r3, r0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a96:	b590      	push	{r4, r7, lr}
 8009a98:	b089      	sub	sp, #36	; 0x24
 8009a9a:	af04      	add	r7, sp, #16
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	70fb      	strb	r3, [r7, #3]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70bb      	strb	r3, [r7, #2]
 8009aac:	4613      	mov	r3, r2
 8009aae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009abe:	787c      	ldrb	r4, [r7, #1]
 8009ac0:	78ba      	ldrb	r2, [r7, #2]
 8009ac2:	78f9      	ldrb	r1, [r7, #3]
 8009ac4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ac6:	9302      	str	r3, [sp, #8]
 8009ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	f7f8 fd8f 	bl	80025f8 <HAL_HCD_HC_Init>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f8bf 	bl	8009c64 <USBH_Get_USB_Status>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd90      	pop	{r4, r7, pc}

08009af4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7f8 fe28 	bl	8002768 <HAL_HCD_HC_Halt>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f8a0 	bl	8009c64 <USBH_Get_USB_Status>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b32:	b590      	push	{r4, r7, lr}
 8009b34:	b089      	sub	sp, #36	; 0x24
 8009b36:	af04      	add	r7, sp, #16
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4603      	mov	r3, r0
 8009b42:	70fb      	strb	r3, [r7, #3]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70bb      	strb	r3, [r7, #2]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b5a:	787c      	ldrb	r4, [r7, #1]
 8009b5c:	78ba      	ldrb	r2, [r7, #2]
 8009b5e:	78f9      	ldrb	r1, [r7, #3]
 8009b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	4623      	mov	r3, r4
 8009b76:	f7f8 fe1b 	bl	80027b0 <HAL_HCD_HC_SubmitRequest>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f86f 	bl	8009c64 <USBH_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f9 f8fc 	bl	8002da8 <HAL_HCD_HC_GetURBState>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d103      	bne.n	8009bd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 f872 	bl	8009cbc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009bd8:	20c8      	movs	r0, #200	; 0xc8
 8009bda:	f7f8 f929 	bl	8001e30 <HAL_Delay>
  return USBH_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bfe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	4613      	mov	r3, r2
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3317      	adds	r3, #23
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c16:	78fa      	ldrb	r2, [r7, #3]
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	440b      	add	r3, r1
 8009c24:	333c      	adds	r3, #60	; 0x3c
 8009c26:	78ba      	ldrb	r2, [r7, #2]
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e009      	b.n	8009c40 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	68f9      	ldr	r1, [r7, #12]
 8009c30:	4613      	mov	r3, r2
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	333d      	adds	r3, #61	; 0x3d
 8009c3c:	78ba      	ldrb	r2, [r7, #2]
 8009c3e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7f8 f8ea 	bl	8001e30 <HAL_Delay>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d817      	bhi.n	8009ca8 <USBH_Get_USB_Status+0x44>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBH_Get_USB_Status+0x1c>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c91 	.word	0x08009c91
 8009c84:	08009c97 	.word	0x08009c97
 8009c88:	08009c9d 	.word	0x08009c9d
 8009c8c:	08009ca3 	.word	0x08009ca3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e00b      	b.n	8009cae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009c96:	2302      	movs	r3, #2
 8009c98:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9a:	e008      	b.n	8009cae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca0:	e005      	b.n	8009cae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca6:	e002      	b.n	8009cae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cac:	bf00      	nop
  }
  return usb_status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	e001      	b.n	8009cda <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4803      	ldr	r0, [pc, #12]	; (8009cf0 <MX_DriverVbusFS+0x34>)
 8009ce2:	f7f8 fc09 	bl	80024f8 <HAL_GPIO_WritePin>
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40020800 	.word	0x40020800

08009cf4 <malloc>:
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <malloc+0xc>)
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	f000 b82b 	b.w	8009d54 <_malloc_r>
 8009cfe:	bf00      	nop
 8009d00:	200000a4 	.word	0x200000a4

08009d04 <free>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <free+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f000 b8f3 	b.w	8009ef4 <_free_r>
 8009d0e:	bf00      	nop
 8009d10:	200000a4 	.word	0x200000a4

08009d14 <sbrk_aligned>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0e      	ldr	r6, [pc, #56]	; (8009d50 <sbrk_aligned+0x3c>)
 8009d18:	460c      	mov	r4, r1
 8009d1a:	6831      	ldr	r1, [r6, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b911      	cbnz	r1, 8009d26 <sbrk_aligned+0x12>
 8009d20:	f000 f8ac 	bl	8009e7c <_sbrk_r>
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 f8a7 	bl	8009e7c <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d00a      	beq.n	8009d48 <sbrk_aligned+0x34>
 8009d32:	1cc4      	adds	r4, r0, #3
 8009d34:	f024 0403 	bic.w	r4, r4, #3
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d007      	beq.n	8009d4c <sbrk_aligned+0x38>
 8009d3c:	1a21      	subs	r1, r4, r0
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f89c 	bl	8009e7c <_sbrk_r>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d101      	bne.n	8009d4c <sbrk_aligned+0x38>
 8009d48:	f04f 34ff 	mov.w	r4, #4294967295
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	20000a54 	.word	0x20000a54

08009d54 <_malloc_r>:
 8009d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	1ccd      	adds	r5, r1, #3
 8009d5a:	f025 0503 	bic.w	r5, r5, #3
 8009d5e:	3508      	adds	r5, #8
 8009d60:	2d0c      	cmp	r5, #12
 8009d62:	bf38      	it	cc
 8009d64:	250c      	movcc	r5, #12
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	4607      	mov	r7, r0
 8009d6a:	db01      	blt.n	8009d70 <_malloc_r+0x1c>
 8009d6c:	42a9      	cmp	r1, r5
 8009d6e:	d905      	bls.n	8009d7c <_malloc_r+0x28>
 8009d70:	230c      	movs	r3, #12
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	2600      	movs	r6, #0
 8009d76:	4630      	mov	r0, r6
 8009d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e50 <_malloc_r+0xfc>
 8009d80:	f000 f868 	bl	8009e54 <__malloc_lock>
 8009d84:	f8d8 3000 	ldr.w	r3, [r8]
 8009d88:	461c      	mov	r4, r3
 8009d8a:	bb5c      	cbnz	r4, 8009de4 <_malloc_r+0x90>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f7ff ffc0 	bl	8009d14 <sbrk_aligned>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	4604      	mov	r4, r0
 8009d98:	d155      	bne.n	8009e46 <_malloc_r+0xf2>
 8009d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d9e:	4626      	mov	r6, r4
 8009da0:	2e00      	cmp	r6, #0
 8009da2:	d145      	bne.n	8009e30 <_malloc_r+0xdc>
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	d048      	beq.n	8009e3a <_malloc_r+0xe6>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	4631      	mov	r1, r6
 8009dac:	4638      	mov	r0, r7
 8009dae:	eb04 0903 	add.w	r9, r4, r3
 8009db2:	f000 f863 	bl	8009e7c <_sbrk_r>
 8009db6:	4581      	cmp	r9, r0
 8009db8:	d13f      	bne.n	8009e3a <_malloc_r+0xe6>
 8009dba:	6821      	ldr	r1, [r4, #0]
 8009dbc:	1a6d      	subs	r5, r5, r1
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ffa7 	bl	8009d14 <sbrk_aligned>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d037      	beq.n	8009e3a <_malloc_r+0xe6>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	442b      	add	r3, r5
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d038      	beq.n	8009e4a <_malloc_r+0xf6>
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	42a2      	cmp	r2, r4
 8009ddc:	d12b      	bne.n	8009e36 <_malloc_r+0xe2>
 8009dde:	2200      	movs	r2, #0
 8009de0:	605a      	str	r2, [r3, #4]
 8009de2:	e00f      	b.n	8009e04 <_malloc_r+0xb0>
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	1b52      	subs	r2, r2, r5
 8009de8:	d41f      	bmi.n	8009e2a <_malloc_r+0xd6>
 8009dea:	2a0b      	cmp	r2, #11
 8009dec:	d917      	bls.n	8009e1e <_malloc_r+0xca>
 8009dee:	1961      	adds	r1, r4, r5
 8009df0:	42a3      	cmp	r3, r4
 8009df2:	6025      	str	r5, [r4, #0]
 8009df4:	bf18      	it	ne
 8009df6:	6059      	strne	r1, [r3, #4]
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	bf08      	it	eq
 8009dfc:	f8c8 1000 	streq.w	r1, [r8]
 8009e00:	5162      	str	r2, [r4, r5]
 8009e02:	604b      	str	r3, [r1, #4]
 8009e04:	4638      	mov	r0, r7
 8009e06:	f104 060b 	add.w	r6, r4, #11
 8009e0a:	f000 f829 	bl	8009e60 <__malloc_unlock>
 8009e0e:	f026 0607 	bic.w	r6, r6, #7
 8009e12:	1d23      	adds	r3, r4, #4
 8009e14:	1af2      	subs	r2, r6, r3
 8009e16:	d0ae      	beq.n	8009d76 <_malloc_r+0x22>
 8009e18:	1b9b      	subs	r3, r3, r6
 8009e1a:	50a3      	str	r3, [r4, r2]
 8009e1c:	e7ab      	b.n	8009d76 <_malloc_r+0x22>
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	6862      	ldr	r2, [r4, #4]
 8009e22:	d1dd      	bne.n	8009de0 <_malloc_r+0x8c>
 8009e24:	f8c8 2000 	str.w	r2, [r8]
 8009e28:	e7ec      	b.n	8009e04 <_malloc_r+0xb0>
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	6864      	ldr	r4, [r4, #4]
 8009e2e:	e7ac      	b.n	8009d8a <_malloc_r+0x36>
 8009e30:	4634      	mov	r4, r6
 8009e32:	6876      	ldr	r6, [r6, #4]
 8009e34:	e7b4      	b.n	8009da0 <_malloc_r+0x4c>
 8009e36:	4613      	mov	r3, r2
 8009e38:	e7cc      	b.n	8009dd4 <_malloc_r+0x80>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	603b      	str	r3, [r7, #0]
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f000 f80e 	bl	8009e60 <__malloc_unlock>
 8009e44:	e797      	b.n	8009d76 <_malloc_r+0x22>
 8009e46:	6025      	str	r5, [r4, #0]
 8009e48:	e7dc      	b.n	8009e04 <_malloc_r+0xb0>
 8009e4a:	605b      	str	r3, [r3, #4]
 8009e4c:	deff      	udf	#255	; 0xff
 8009e4e:	bf00      	nop
 8009e50:	20000a50 	.word	0x20000a50

08009e54 <__malloc_lock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_lock+0x8>)
 8009e56:	f000 b84b 	b.w	8009ef0 <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20000b94 	.word	0x20000b94

08009e60 <__malloc_unlock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_unlock+0x8>)
 8009e62:	f000 b846 	b.w	8009ef2 <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	20000b94 	.word	0x20000b94

08009e6c <memset>:
 8009e6c:	4402      	add	r2, r0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d100      	bne.n	8009e76 <memset+0xa>
 8009e74:	4770      	bx	lr
 8009e76:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7a:	e7f9      	b.n	8009e70 <memset+0x4>

08009e7c <_sbrk_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	; (8009e98 <_sbrk_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f7 feee 	bl	8001c68 <_sbrk>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_sbrk_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_sbrk_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000b90 	.word	0x20000b90

08009e9c <__errno>:
 8009e9c:	4b01      	ldr	r3, [pc, #4]	; (8009ea4 <__errno+0x8>)
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	200000a4 	.word	0x200000a4

08009ea8 <__libc_init_array>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	4d0d      	ldr	r5, [pc, #52]	; (8009ee0 <__libc_init_array+0x38>)
 8009eac:	4c0d      	ldr	r4, [pc, #52]	; (8009ee4 <__libc_init_array+0x3c>)
 8009eae:	1b64      	subs	r4, r4, r5
 8009eb0:	10a4      	asrs	r4, r4, #2
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	42a6      	cmp	r6, r4
 8009eb6:	d109      	bne.n	8009ecc <__libc_init_array+0x24>
 8009eb8:	4d0b      	ldr	r5, [pc, #44]	; (8009ee8 <__libc_init_array+0x40>)
 8009eba:	4c0c      	ldr	r4, [pc, #48]	; (8009eec <__libc_init_array+0x44>)
 8009ebc:	f000 fbda 	bl	800a674 <_init>
 8009ec0:	1b64      	subs	r4, r4, r5
 8009ec2:	10a4      	asrs	r4, r4, #2
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	42a6      	cmp	r6, r4
 8009ec8:	d105      	bne.n	8009ed6 <__libc_init_array+0x2e>
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed0:	4798      	blx	r3
 8009ed2:	3601      	adds	r6, #1
 8009ed4:	e7ee      	b.n	8009eb4 <__libc_init_array+0xc>
 8009ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eda:	4798      	blx	r3
 8009edc:	3601      	adds	r6, #1
 8009ede:	e7f2      	b.n	8009ec6 <__libc_init_array+0x1e>
 8009ee0:	0800a79c 	.word	0x0800a79c
 8009ee4:	0800a79c 	.word	0x0800a79c
 8009ee8:	0800a79c 	.word	0x0800a79c
 8009eec:	0800a7a0 	.word	0x0800a7a0

08009ef0 <__retarget_lock_acquire_recursive>:
 8009ef0:	4770      	bx	lr

08009ef2 <__retarget_lock_release_recursive>:
 8009ef2:	4770      	bx	lr

08009ef4 <_free_r>:
 8009ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ef6:	2900      	cmp	r1, #0
 8009ef8:	d044      	beq.n	8009f84 <_free_r+0x90>
 8009efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009efe:	9001      	str	r0, [sp, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f1a1 0404 	sub.w	r4, r1, #4
 8009f06:	bfb8      	it	lt
 8009f08:	18e4      	addlt	r4, r4, r3
 8009f0a:	f7ff ffa3 	bl	8009e54 <__malloc_lock>
 8009f0e:	4a1e      	ldr	r2, [pc, #120]	; (8009f88 <_free_r+0x94>)
 8009f10:	9801      	ldr	r0, [sp, #4]
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	b933      	cbnz	r3, 8009f24 <_free_r+0x30>
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	b003      	add	sp, #12
 8009f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f20:	f7ff bf9e 	b.w	8009e60 <__malloc_unlock>
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d908      	bls.n	8009f3a <_free_r+0x46>
 8009f28:	6825      	ldr	r5, [r4, #0]
 8009f2a:	1961      	adds	r1, r4, r5
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	bf01      	itttt	eq
 8009f30:	6819      	ldreq	r1, [r3, #0]
 8009f32:	685b      	ldreq	r3, [r3, #4]
 8009f34:	1949      	addeq	r1, r1, r5
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	e7ed      	b.n	8009f16 <_free_r+0x22>
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	b10b      	cbz	r3, 8009f44 <_free_r+0x50>
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d9fa      	bls.n	8009f3a <_free_r+0x46>
 8009f44:	6811      	ldr	r1, [r2, #0]
 8009f46:	1855      	adds	r5, r2, r1
 8009f48:	42a5      	cmp	r5, r4
 8009f4a:	d10b      	bne.n	8009f64 <_free_r+0x70>
 8009f4c:	6824      	ldr	r4, [r4, #0]
 8009f4e:	4421      	add	r1, r4
 8009f50:	1854      	adds	r4, r2, r1
 8009f52:	42a3      	cmp	r3, r4
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	d1e0      	bne.n	8009f1a <_free_r+0x26>
 8009f58:	681c      	ldr	r4, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	6053      	str	r3, [r2, #4]
 8009f5e:	440c      	add	r4, r1
 8009f60:	6014      	str	r4, [r2, #0]
 8009f62:	e7da      	b.n	8009f1a <_free_r+0x26>
 8009f64:	d902      	bls.n	8009f6c <_free_r+0x78>
 8009f66:	230c      	movs	r3, #12
 8009f68:	6003      	str	r3, [r0, #0]
 8009f6a:	e7d6      	b.n	8009f1a <_free_r+0x26>
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	1961      	adds	r1, r4, r5
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf04      	itt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	6063      	str	r3, [r4, #4]
 8009f7a:	bf04      	itt	eq
 8009f7c:	1949      	addeq	r1, r1, r5
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	6054      	str	r4, [r2, #4]
 8009f82:	e7ca      	b.n	8009f1a <_free_r+0x26>
 8009f84:	b003      	add	sp, #12
 8009f86:	bd30      	pop	{r4, r5, pc}
 8009f88:	20000a50 	.word	0x20000a50

08009f8c <atan2f>:
 8009f8c:	f000 b884 	b.w	800a098 <__ieee754_atan2f>

08009f90 <expf>:
 8009f90:	b508      	push	{r3, lr}
 8009f92:	ed2d 8b02 	vpush	{d8}
 8009f96:	eef0 8a40 	vmov.f32	s17, s0
 8009f9a:	f000 f91d 	bl	800a1d8 <__ieee754_expf>
 8009f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8009fa2:	eeb0 0a68 	vmov.f32	s0, s17
 8009fa6:	f000 f867 	bl	800a078 <finitef>
 8009faa:	b160      	cbz	r0, 8009fc6 <expf+0x36>
 8009fac:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009fec <expf+0x5c>
 8009fb0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb8:	dd0a      	ble.n	8009fd0 <expf+0x40>
 8009fba:	f7ff ff6f 	bl	8009e9c <__errno>
 8009fbe:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009ff0 <expf+0x60>
 8009fc2:	2322      	movs	r3, #34	; 0x22
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	eeb0 0a48 	vmov.f32	s0, s16
 8009fca:	ecbd 8b02 	vpop	{d8}
 8009fce:	bd08      	pop	{r3, pc}
 8009fd0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009ff4 <expf+0x64>
 8009fd4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fdc:	d5f3      	bpl.n	8009fc6 <expf+0x36>
 8009fde:	f7ff ff5d 	bl	8009e9c <__errno>
 8009fe2:	2322      	movs	r3, #34	; 0x22
 8009fe4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009ff8 <expf+0x68>
 8009fe8:	6003      	str	r3, [r0, #0]
 8009fea:	e7ec      	b.n	8009fc6 <expf+0x36>
 8009fec:	42b17217 	.word	0x42b17217
 8009ff0:	7f800000 	.word	0x7f800000
 8009ff4:	c2cff1b5 	.word	0xc2cff1b5
 8009ff8:	00000000 	.word	0x00000000

08009ffc <fmodf>:
 8009ffc:	b508      	push	{r3, lr}
 8009ffe:	ed2d 8b02 	vpush	{d8}
 800a002:	eef0 8a40 	vmov.f32	s17, s0
 800a006:	eeb0 8a60 	vmov.f32	s16, s1
 800a00a:	f000 f9b3 	bl	800a374 <__ieee754_fmodf>
 800a00e:	eef4 8a48 	vcmp.f32	s17, s16
 800a012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a016:	d60c      	bvs.n	800a032 <fmodf+0x36>
 800a018:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a038 <fmodf+0x3c>
 800a01c:	eeb4 8a68 	vcmp.f32	s16, s17
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	d105      	bne.n	800a032 <fmodf+0x36>
 800a026:	f7ff ff39 	bl	8009e9c <__errno>
 800a02a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a02e:	2321      	movs	r3, #33	; 0x21
 800a030:	6003      	str	r3, [r0, #0]
 800a032:	ecbd 8b02 	vpop	{d8}
 800a036:	bd08      	pop	{r3, pc}
 800a038:	00000000 	.word	0x00000000

0800a03c <sqrtf>:
 800a03c:	b508      	push	{r3, lr}
 800a03e:	ed2d 8b02 	vpush	{d8}
 800a042:	eeb0 8a40 	vmov.f32	s16, s0
 800a046:	f000 f824 	bl	800a092 <__ieee754_sqrtf>
 800a04a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	d60c      	bvs.n	800a06e <sqrtf+0x32>
 800a054:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a074 <sqrtf+0x38>
 800a058:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a060:	d505      	bpl.n	800a06e <sqrtf+0x32>
 800a062:	f7ff ff1b 	bl	8009e9c <__errno>
 800a066:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a06a:	2321      	movs	r3, #33	; 0x21
 800a06c:	6003      	str	r3, [r0, #0]
 800a06e:	ecbd 8b02 	vpop	{d8}
 800a072:	bd08      	pop	{r3, pc}
 800a074:	00000000 	.word	0x00000000

0800a078 <finitef>:
 800a078:	b082      	sub	sp, #8
 800a07a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a07e:	9801      	ldr	r0, [sp, #4]
 800a080:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a084:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a088:	bfac      	ite	ge
 800a08a:	2000      	movge	r0, #0
 800a08c:	2001      	movlt	r0, #1
 800a08e:	b002      	add	sp, #8
 800a090:	4770      	bx	lr

0800a092 <__ieee754_sqrtf>:
 800a092:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a096:	4770      	bx	lr

0800a098 <__ieee754_atan2f>:
 800a098:	ee10 2a90 	vmov	r2, s1
 800a09c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a0a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	eef0 7a40 	vmov.f32	s15, s0
 800a0aa:	dc06      	bgt.n	800a0ba <__ieee754_atan2f+0x22>
 800a0ac:	ee10 0a10 	vmov	r0, s0
 800a0b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a0b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a0b8:	dd04      	ble.n	800a0c4 <__ieee754_atan2f+0x2c>
 800a0ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a0be:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c2:	bd10      	pop	{r4, pc}
 800a0c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a0c8:	d103      	bne.n	800a0d2 <__ieee754_atan2f+0x3a>
 800a0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ce:	f000 b9d3 	b.w	800a478 <atanf>
 800a0d2:	1794      	asrs	r4, r2, #30
 800a0d4:	f004 0402 	and.w	r4, r4, #2
 800a0d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a0dc:	b943      	cbnz	r3, 800a0f0 <__ieee754_atan2f+0x58>
 800a0de:	2c02      	cmp	r4, #2
 800a0e0:	d05e      	beq.n	800a1a0 <__ieee754_atan2f+0x108>
 800a0e2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a1b4 <__ieee754_atan2f+0x11c>
 800a0e6:	2c03      	cmp	r4, #3
 800a0e8:	bf08      	it	eq
 800a0ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800a0ee:	e7e6      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a0f0:	b941      	cbnz	r1, 800a104 <__ieee754_atan2f+0x6c>
 800a0f2:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a1b8 <__ieee754_atan2f+0x120>
 800a0f6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a1bc <__ieee754_atan2f+0x124>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	bfb8      	it	lt
 800a0fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800a102:	e7dc      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a104:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a108:	d110      	bne.n	800a12c <__ieee754_atan2f+0x94>
 800a10a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a10e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a112:	d107      	bne.n	800a124 <__ieee754_atan2f+0x8c>
 800a114:	2c02      	cmp	r4, #2
 800a116:	d846      	bhi.n	800a1a6 <__ieee754_atan2f+0x10e>
 800a118:	4b29      	ldr	r3, [pc, #164]	; (800a1c0 <__ieee754_atan2f+0x128>)
 800a11a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a11e:	edd3 7a00 	vldr	s15, [r3]
 800a122:	e7cc      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a124:	2c02      	cmp	r4, #2
 800a126:	d841      	bhi.n	800a1ac <__ieee754_atan2f+0x114>
 800a128:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <__ieee754_atan2f+0x12c>)
 800a12a:	e7f6      	b.n	800a11a <__ieee754_atan2f+0x82>
 800a12c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a130:	d0df      	beq.n	800a0f2 <__ieee754_atan2f+0x5a>
 800a132:	1a5b      	subs	r3, r3, r1
 800a134:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a138:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a13c:	da1a      	bge.n	800a174 <__ieee754_atan2f+0xdc>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	da01      	bge.n	800a146 <__ieee754_atan2f+0xae>
 800a142:	313c      	adds	r1, #60	; 0x3c
 800a144:	db19      	blt.n	800a17a <__ieee754_atan2f+0xe2>
 800a146:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a14a:	f000 fa69 	bl	800a620 <fabsf>
 800a14e:	f000 f993 	bl	800a478 <atanf>
 800a152:	eef0 7a40 	vmov.f32	s15, s0
 800a156:	2c01      	cmp	r4, #1
 800a158:	d012      	beq.n	800a180 <__ieee754_atan2f+0xe8>
 800a15a:	2c02      	cmp	r4, #2
 800a15c:	d017      	beq.n	800a18e <__ieee754_atan2f+0xf6>
 800a15e:	2c00      	cmp	r4, #0
 800a160:	d0ad      	beq.n	800a0be <__ieee754_atan2f+0x26>
 800a162:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a1c8 <__ieee754_atan2f+0x130>
 800a166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a16a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a1cc <__ieee754_atan2f+0x134>
 800a16e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a172:	e7a4      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a174:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a1b8 <__ieee754_atan2f+0x120>
 800a178:	e7ed      	b.n	800a156 <__ieee754_atan2f+0xbe>
 800a17a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a1d0 <__ieee754_atan2f+0x138>
 800a17e:	e7ea      	b.n	800a156 <__ieee754_atan2f+0xbe>
 800a180:	ee17 3a90 	vmov	r3, s15
 800a184:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	e797      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a18e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a1c8 <__ieee754_atan2f+0x130>
 800a192:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a196:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a1cc <__ieee754_atan2f+0x134>
 800a19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a19e:	e78e      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a1a0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a1cc <__ieee754_atan2f+0x134>
 800a1a4:	e78b      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a1a6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a1d4 <__ieee754_atan2f+0x13c>
 800a1aa:	e788      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a1ac:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a1d0 <__ieee754_atan2f+0x138>
 800a1b0:	e785      	b.n	800a0be <__ieee754_atan2f+0x26>
 800a1b2:	bf00      	nop
 800a1b4:	c0490fdb 	.word	0xc0490fdb
 800a1b8:	3fc90fdb 	.word	0x3fc90fdb
 800a1bc:	bfc90fdb 	.word	0xbfc90fdb
 800a1c0:	0800a73c 	.word	0x0800a73c
 800a1c4:	0800a748 	.word	0x0800a748
 800a1c8:	33bbbd2e 	.word	0x33bbbd2e
 800a1cc:	40490fdb 	.word	0x40490fdb
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	3f490fdb 	.word	0x3f490fdb

0800a1d8 <__ieee754_expf>:
 800a1d8:	ee10 2a10 	vmov	r2, s0
 800a1dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a1e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1e4:	d902      	bls.n	800a1ec <__ieee754_expf+0x14>
 800a1e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1ea:	4770      	bx	lr
 800a1ec:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a1f0:	d106      	bne.n	800a200 <__ieee754_expf+0x28>
 800a1f2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800a32c <__ieee754_expf+0x154>
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	bf18      	it	ne
 800a1fa:	eeb0 0a67 	vmovne.f32	s0, s15
 800a1fe:	4770      	bx	lr
 800a200:	484b      	ldr	r0, [pc, #300]	; (800a330 <__ieee754_expf+0x158>)
 800a202:	4282      	cmp	r2, r0
 800a204:	dd02      	ble.n	800a20c <__ieee754_expf+0x34>
 800a206:	2000      	movs	r0, #0
 800a208:	f000 ba2e 	b.w	800a668 <__math_oflowf>
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	da05      	bge.n	800a21c <__ieee754_expf+0x44>
 800a210:	4a48      	ldr	r2, [pc, #288]	; (800a334 <__ieee754_expf+0x15c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d902      	bls.n	800a21c <__ieee754_expf+0x44>
 800a216:	2000      	movs	r0, #0
 800a218:	f000 ba20 	b.w	800a65c <__math_uflowf>
 800a21c:	4a46      	ldr	r2, [pc, #280]	; (800a338 <__ieee754_expf+0x160>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a224:	d952      	bls.n	800a2cc <__ieee754_expf+0xf4>
 800a226:	4a45      	ldr	r2, [pc, #276]	; (800a33c <__ieee754_expf+0x164>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a22e:	d834      	bhi.n	800a29a <__ieee754_expf+0xc2>
 800a230:	4b43      	ldr	r3, [pc, #268]	; (800a340 <__ieee754_expf+0x168>)
 800a232:	4413      	add	r3, r2
 800a234:	ed93 7a00 	vldr	s14, [r3]
 800a238:	4b42      	ldr	r3, [pc, #264]	; (800a344 <__ieee754_expf+0x16c>)
 800a23a:	4413      	add	r3, r2
 800a23c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a240:	f1c1 0201 	rsb	r2, r1, #1
 800a244:	edd3 7a00 	vldr	s15, [r3]
 800a248:	1a52      	subs	r2, r2, r1
 800a24a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a24e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a252:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a348 <__ieee754_expf+0x170>
 800a256:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a34c <__ieee754_expf+0x174>
 800a25a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a25e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a350 <__ieee754_expf+0x178>
 800a262:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a266:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a354 <__ieee754_expf+0x17c>
 800a26a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a26e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a358 <__ieee754_expf+0x180>
 800a272:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a276:	eef0 6a40 	vmov.f32	s13, s0
 800a27a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a27e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a282:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a286:	bb92      	cbnz	r2, 800a2ee <__ieee754_expf+0x116>
 800a288:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a28c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a290:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a294:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a298:	4770      	bx	lr
 800a29a:	4b30      	ldr	r3, [pc, #192]	; (800a35c <__ieee754_expf+0x184>)
 800a29c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a360 <__ieee754_expf+0x188>
 800a2a0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a364 <__ieee754_expf+0x18c>
 800a2a4:	4413      	add	r3, r2
 800a2a6:	edd3 7a00 	vldr	s15, [r3]
 800a2aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a2ae:	eeb0 7a40 	vmov.f32	s14, s0
 800a2b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2b6:	ee17 2a90 	vmov	r2, s15
 800a2ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2be:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a2c2:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a368 <__ieee754_expf+0x190>
 800a2c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2ca:	e7be      	b.n	800a24a <__ieee754_expf+0x72>
 800a2cc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800a2d0:	d20b      	bcs.n	800a2ea <__ieee754_expf+0x112>
 800a2d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a36c <__ieee754_expf+0x194>
 800a2d6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a2da:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e2:	dd02      	ble.n	800a2ea <__ieee754_expf+0x112>
 800a2e4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a2e8:	4770      	bx	lr
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	e7af      	b.n	800a24e <__ieee754_expf+0x76>
 800a2ee:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a2f2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a2f6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a2fa:	bfb8      	it	lt
 800a2fc:	3264      	addlt	r2, #100	; 0x64
 800a2fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a306:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a30a:	ee17 3a90 	vmov	r3, s15
 800a30e:	bfab      	itete	ge
 800a310:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a314:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a318:	ee00 3a10 	vmovge	s0, r3
 800a31c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800a370 <__ieee754_expf+0x198>
 800a320:	bfbc      	itt	lt
 800a322:	ee00 3a10 	vmovlt	s0, r3
 800a326:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a32a:	4770      	bx	lr
 800a32c:	00000000 	.word	0x00000000
 800a330:	42b17217 	.word	0x42b17217
 800a334:	42cff1b5 	.word	0x42cff1b5
 800a338:	3eb17218 	.word	0x3eb17218
 800a33c:	3f851591 	.word	0x3f851591
 800a340:	0800a75c 	.word	0x0800a75c
 800a344:	0800a764 	.word	0x0800a764
 800a348:	3331bb4c 	.word	0x3331bb4c
 800a34c:	b5ddea0e 	.word	0xb5ddea0e
 800a350:	388ab355 	.word	0x388ab355
 800a354:	bb360b61 	.word	0xbb360b61
 800a358:	3e2aaaab 	.word	0x3e2aaaab
 800a35c:	0800a754 	.word	0x0800a754
 800a360:	3fb8aa3b 	.word	0x3fb8aa3b
 800a364:	3f317180 	.word	0x3f317180
 800a368:	3717f7d1 	.word	0x3717f7d1
 800a36c:	7149f2ca 	.word	0x7149f2ca
 800a370:	0d800000 	.word	0x0d800000

0800a374 <__ieee754_fmodf>:
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	ee10 4a90 	vmov	r4, s1
 800a37a:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 800a37e:	d009      	beq.n	800a394 <__ieee754_fmodf+0x20>
 800a380:	ee10 3a10 	vmov	r3, s0
 800a384:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800a388:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a38c:	da02      	bge.n	800a394 <__ieee754_fmodf+0x20>
 800a38e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a392:	dd04      	ble.n	800a39e <__ieee754_fmodf+0x2a>
 800a394:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a398:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a39e:	4286      	cmp	r6, r0
 800a3a0:	dbfc      	blt.n	800a39c <__ieee754_fmodf+0x28>
 800a3a2:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 800a3a6:	d105      	bne.n	800a3b4 <__ieee754_fmodf+0x40>
 800a3a8:	4b32      	ldr	r3, [pc, #200]	; (800a474 <__ieee754_fmodf+0x100>)
 800a3aa:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800a3ae:	ed93 0a00 	vldr	s0, [r3]
 800a3b2:	e7f3      	b.n	800a39c <__ieee754_fmodf+0x28>
 800a3b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a3b8:	d140      	bne.n	800a43c <__ieee754_fmodf+0xc8>
 800a3ba:	0232      	lsls	r2, r6, #8
 800a3bc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	dc38      	bgt.n	800a436 <__ieee754_fmodf+0xc2>
 800a3c4:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 800a3c8:	d13e      	bne.n	800a448 <__ieee754_fmodf+0xd4>
 800a3ca:	0207      	lsls	r7, r0, #8
 800a3cc:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800a3d0:	2f00      	cmp	r7, #0
 800a3d2:	da36      	bge.n	800a442 <__ieee754_fmodf+0xce>
 800a3d4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a3d8:	bfb9      	ittee	lt
 800a3da:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800a3de:	1a5b      	sublt	r3, r3, r1
 800a3e0:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800a3e4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a3e8:	bfb8      	it	lt
 800a3ea:	fa06 f303 	lsllt.w	r3, r6, r3
 800a3ee:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800a3f2:	bfb5      	itete	lt
 800a3f4:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 800a3f8:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800a3fc:	1aa4      	sublt	r4, r4, r2
 800a3fe:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 800a402:	bfb8      	it	lt
 800a404:	40a0      	lsllt	r0, r4
 800a406:	1a89      	subs	r1, r1, r2
 800a408:	1a1c      	subs	r4, r3, r0
 800a40a:	bb01      	cbnz	r1, 800a44e <__ieee754_fmodf+0xda>
 800a40c:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 800a410:	bf38      	it	cc
 800a412:	4623      	movcc	r3, r4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0c7      	beq.n	800a3a8 <__ieee754_fmodf+0x34>
 800a418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a41c:	db1f      	blt.n	800a45e <__ieee754_fmodf+0xea>
 800a41e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800a422:	db1f      	blt.n	800a464 <__ieee754_fmodf+0xf0>
 800a424:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a428:	327f      	adds	r2, #127	; 0x7f
 800a42a:	432b      	orrs	r3, r5
 800a42c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a430:	ee00 3a10 	vmov	s0, r3
 800a434:	e7b2      	b.n	800a39c <__ieee754_fmodf+0x28>
 800a436:	3901      	subs	r1, #1
 800a438:	0052      	lsls	r2, r2, #1
 800a43a:	e7c1      	b.n	800a3c0 <__ieee754_fmodf+0x4c>
 800a43c:	15f1      	asrs	r1, r6, #23
 800a43e:	397f      	subs	r1, #127	; 0x7f
 800a440:	e7c0      	b.n	800a3c4 <__ieee754_fmodf+0x50>
 800a442:	3a01      	subs	r2, #1
 800a444:	007f      	lsls	r7, r7, #1
 800a446:	e7c3      	b.n	800a3d0 <__ieee754_fmodf+0x5c>
 800a448:	15c2      	asrs	r2, r0, #23
 800a44a:	3a7f      	subs	r2, #127	; 0x7f
 800a44c:	e7c2      	b.n	800a3d4 <__ieee754_fmodf+0x60>
 800a44e:	2c00      	cmp	r4, #0
 800a450:	da02      	bge.n	800a458 <__ieee754_fmodf+0xe4>
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	3901      	subs	r1, #1
 800a456:	e7d7      	b.n	800a408 <__ieee754_fmodf+0x94>
 800a458:	d0a6      	beq.n	800a3a8 <__ieee754_fmodf+0x34>
 800a45a:	0063      	lsls	r3, r4, #1
 800a45c:	e7fa      	b.n	800a454 <__ieee754_fmodf+0xe0>
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	3a01      	subs	r2, #1
 800a462:	e7d9      	b.n	800a418 <__ieee754_fmodf+0xa4>
 800a464:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a468:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a46c:	3282      	adds	r2, #130	; 0x82
 800a46e:	4113      	asrs	r3, r2
 800a470:	432b      	orrs	r3, r5
 800a472:	e7dd      	b.n	800a430 <__ieee754_fmodf+0xbc>
 800a474:	0800a76c 	.word	0x0800a76c

0800a478 <atanf>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	ee10 5a10 	vmov	r5, s0
 800a47e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a482:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a486:	eef0 7a40 	vmov.f32	s15, s0
 800a48a:	db10      	blt.n	800a4ae <atanf+0x36>
 800a48c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a490:	dd04      	ble.n	800a49c <atanf+0x24>
 800a492:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a496:	eeb0 0a67 	vmov.f32	s0, s15
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a5d4 <atanf+0x15c>
 800a4a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a5d8 <atanf+0x160>
 800a4a4:	2d00      	cmp	r5, #0
 800a4a6:	bfd8      	it	le
 800a4a8:	eef0 7a47 	vmovle.f32	s15, s14
 800a4ac:	e7f3      	b.n	800a496 <atanf+0x1e>
 800a4ae:	4b4b      	ldr	r3, [pc, #300]	; (800a5dc <atanf+0x164>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	dc10      	bgt.n	800a4d6 <atanf+0x5e>
 800a4b4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a4b8:	da0a      	bge.n	800a4d0 <atanf+0x58>
 800a4ba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a5e0 <atanf+0x168>
 800a4be:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ce:	dce2      	bgt.n	800a496 <atanf+0x1e>
 800a4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d4:	e013      	b.n	800a4fe <atanf+0x86>
 800a4d6:	f000 f8a3 	bl	800a620 <fabsf>
 800a4da:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <atanf+0x16c>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	dc4f      	bgt.n	800a580 <atanf+0x108>
 800a4e0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	dc41      	bgt.n	800a56c <atanf+0xf4>
 800a4e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a4ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a4f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a4fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a504:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a5e8 <atanf+0x170>
 800a508:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a5ec <atanf+0x174>
 800a50c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a5f0 <atanf+0x178>
 800a510:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a514:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a518:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a5f4 <atanf+0x17c>
 800a51c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a520:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a5f8 <atanf+0x180>
 800a524:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a528:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a5fc <atanf+0x184>
 800a52c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a530:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a600 <atanf+0x188>
 800a534:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a538:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a604 <atanf+0x18c>
 800a53c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a540:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a608 <atanf+0x190>
 800a544:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a548:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a60c <atanf+0x194>
 800a54c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a550:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a610 <atanf+0x198>
 800a554:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a558:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a55c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a560:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a564:	d121      	bne.n	800a5aa <atanf+0x132>
 800a566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a56a:	e794      	b.n	800a496 <atanf+0x1e>
 800a56c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a570:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a574:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a578:	2301      	movs	r3, #1
 800a57a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a57e:	e7be      	b.n	800a4fe <atanf+0x86>
 800a580:	4b24      	ldr	r3, [pc, #144]	; (800a614 <atanf+0x19c>)
 800a582:	429c      	cmp	r4, r3
 800a584:	dc0b      	bgt.n	800a59e <atanf+0x126>
 800a586:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a58a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a58e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a592:	2302      	movs	r3, #2
 800a594:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a59c:	e7af      	b.n	800a4fe <atanf+0x86>
 800a59e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a5a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e7a9      	b.n	800a4fe <atanf+0x86>
 800a5aa:	4a1b      	ldr	r2, [pc, #108]	; (800a618 <atanf+0x1a0>)
 800a5ac:	491b      	ldr	r1, [pc, #108]	; (800a61c <atanf+0x1a4>)
 800a5ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a5b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a5b6:	edd3 6a00 	vldr	s13, [r3]
 800a5ba:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5c4:	edd2 7a00 	vldr	s15, [r2]
 800a5c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5cc:	bfb8      	it	lt
 800a5ce:	eef1 7a67 	vneglt.f32	s15, s15
 800a5d2:	e760      	b.n	800a496 <atanf+0x1e>
 800a5d4:	3fc90fdb 	.word	0x3fc90fdb
 800a5d8:	bfc90fdb 	.word	0xbfc90fdb
 800a5dc:	3edfffff 	.word	0x3edfffff
 800a5e0:	7149f2ca 	.word	0x7149f2ca
 800a5e4:	3f97ffff 	.word	0x3f97ffff
 800a5e8:	3c8569d7 	.word	0x3c8569d7
 800a5ec:	3d4bda59 	.word	0x3d4bda59
 800a5f0:	bd6ef16b 	.word	0xbd6ef16b
 800a5f4:	3d886b35 	.word	0x3d886b35
 800a5f8:	3dba2e6e 	.word	0x3dba2e6e
 800a5fc:	3e124925 	.word	0x3e124925
 800a600:	3eaaaaab 	.word	0x3eaaaaab
 800a604:	bd15a221 	.word	0xbd15a221
 800a608:	bd9d8795 	.word	0xbd9d8795
 800a60c:	bde38e38 	.word	0xbde38e38
 800a610:	be4ccccd 	.word	0xbe4ccccd
 800a614:	401bffff 	.word	0x401bffff
 800a618:	0800a774 	.word	0x0800a774
 800a61c:	0800a784 	.word	0x0800a784

0800a620 <fabsf>:
 800a620:	ee10 3a10 	vmov	r3, s0
 800a624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a628:	ee00 3a10 	vmov	s0, r3
 800a62c:	4770      	bx	lr

0800a62e <with_errnof>:
 800a62e:	b513      	push	{r0, r1, r4, lr}
 800a630:	4604      	mov	r4, r0
 800a632:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a636:	f7ff fc31 	bl	8009e9c <__errno>
 800a63a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a63e:	6004      	str	r4, [r0, #0]
 800a640:	b002      	add	sp, #8
 800a642:	bd10      	pop	{r4, pc}

0800a644 <xflowf>:
 800a644:	b130      	cbz	r0, 800a654 <xflowf+0x10>
 800a646:	eef1 7a40 	vneg.f32	s15, s0
 800a64a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a64e:	2022      	movs	r0, #34	; 0x22
 800a650:	f7ff bfed 	b.w	800a62e <with_errnof>
 800a654:	eef0 7a40 	vmov.f32	s15, s0
 800a658:	e7f7      	b.n	800a64a <xflowf+0x6>
	...

0800a65c <__math_uflowf>:
 800a65c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a664 <__math_uflowf+0x8>
 800a660:	f7ff bff0 	b.w	800a644 <xflowf>
 800a664:	10000000 	.word	0x10000000

0800a668 <__math_oflowf>:
 800a668:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a670 <__math_oflowf+0x8>
 800a66c:	f7ff bfea 	b.w	800a644 <xflowf>
 800a670:	70000000 	.word	0x70000000

0800a674 <_init>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	bf00      	nop
 800a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67a:	bc08      	pop	{r3}
 800a67c:	469e      	mov	lr, r3
 800a67e:	4770      	bx	lr

0800a680 <_fini>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr
