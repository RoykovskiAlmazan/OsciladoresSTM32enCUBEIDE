
Osciladores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800dd30  0800dd30  0001dd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e18c  0800e18c  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800e18c  0800e18c  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e194  0800e194  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e194  0800e194  0001e194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800e19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020250  2**0
                  CONTENTS
 10 .bss          00000b84  20000250  20000250  00020250  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dd4  20000dd4  00020250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015696  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036fe  00000000  00000000  00035959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001060  00000000  00000000  00039058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c6a  00000000  00000000  0003a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024297  00000000  00000000  0003ad22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000158a0  00000000  00000000  0005efb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc544  00000000  00000000  00074859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055a8  00000000  00000000  00140da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00146348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd18 	.word	0x0800dd18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800dd18 	.word	0x0800dd18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <calcular_z3_z4>:
uint8_t ids[] = {12, 1, 2,	//DI
        		3, 4, 5,	//TI
    			6, 7, 8,	//TD
   				9, 10, 11};	//DD

void calcular_z3_z4() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	ed2d 8b02 	vpush	{d8}
 8000eaa:	b09a      	sub	sp, #104	; 0x68
 8000eac:	af00      	add	r7, sp, #0
	theta = atan2f(y, x);
 8000eae:	4bb8      	ldr	r3, [pc, #736]	; (8001190 <calcular_z3_z4+0x2ec>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	4bb7      	ldr	r3, [pc, #732]	; (8001194 <calcular_z3_z4+0x2f0>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	eef0 0a47 	vmov.f32	s1, s14
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	f00c fbb5 	bl	800d630 <atan2f>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	4bb3      	ldr	r3, [pc, #716]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000ecc:	edc3 7a00 	vstr	s15, [r3]
	        if (theta < 0.0f) { //Calculo de tyheta
 8000ed0:	4bb1      	ldr	r3, [pc, #708]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ede:	d509      	bpl.n	8000ef4 <calcular_z3_z4+0x50>
	            theta += 2.0f * PI;
 8000ee0:	4bad      	ldr	r3, [pc, #692]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800119c <calcular_z3_z4+0x2f8>
 8000eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eee:	4baa      	ldr	r3, [pc, #680]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000ef0:	edc3 7a00 	vstr	s15, [r3]
 __       ___          __   ___                ___  ___  __            __  __          ___  __   __
|__)  /\   |   /\     |  \ |__  |     /\  |\ |  |  |__  |__)  /\     |  / /  \ |  | | |__  |__) |  \  /\
|    /~~\  |  /~~\    |__/ |___ |___ /~~\ | \|  |  |___ |  \ /~~\    | /_ \__X \__/ | |___ |  \ |__/ /~~\
	        	 *
	        	 * */
	        	atractores3 = 0.0f;
 8000ef4:	4baa      	ldr	r3, [pc, #680]	; (80011a0 <calcular_z3_z4+0x2fc>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N1; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	667b      	str	r3, [r7, #100]	; 0x64
 8000f00:	e02f      	b.n	8000f62 <calcular_z3_z4+0xbe>
	            	atractores3 += a1[i] * expf(-b1[i] * fabsf(theta - deltaTheta1[i]));
 8000f02:	4aa8      	ldr	r2, [pc, #672]	; (80011a4 <calcular_z3_z4+0x300>)
 8000f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	ed93 8a00 	vldr	s16, [r3]
 8000f0e:	4aa6      	ldr	r2, [pc, #664]	; (80011a8 <calcular_z3_z4+0x304>)
 8000f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f1e:	4b9e      	ldr	r3, [pc, #632]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000f20:	edd3 6a00 	vldr	s13, [r3]
 8000f24:	4aa1      	ldr	r2, [pc, #644]	; (80011ac <calcular_z3_z4+0x308>)
 8000f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f34:	eef0 7ae7 	vabs.f32	s15, s15
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f40:	f00c fb78 	bl	800d634 <expf>
 8000f44:	eef0 7a40 	vmov.f32	s15, s0
 8000f48:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f4c:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <calcular_z3_z4+0x2fc>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <calcular_z3_z4+0x2fc>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N1; i++) {
 8000f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f5e:	3301      	adds	r3, #1
 8000f60:	667b      	str	r3, [r7, #100]	; 0x64
 8000f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	ddcc      	ble.n	8000f02 <calcular_z3_z4+0x5e>
	            }

	            atractores4 = 0.0f;
 8000f68:	4b91      	ldr	r3, [pc, #580]	; (80011b0 <calcular_z3_z4+0x30c>)
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N4; i++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	e02f      	b.n	8000fd6 <calcular_z3_z4+0x132>
	            	atractores4 += a4[i] * expf(-b4[i] * fabsf(theta - deltaTheta4[i]));
 8000f76:	4a8f      	ldr	r2, [pc, #572]	; (80011b4 <calcular_z3_z4+0x310>)
 8000f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	ed93 8a00 	vldr	s16, [r3]
 8000f82:	4a8d      	ldr	r2, [pc, #564]	; (80011b8 <calcular_z3_z4+0x314>)
 8000f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	eeb1 7a67 	vneg.f32	s14, s15
 8000f92:	4b81      	ldr	r3, [pc, #516]	; (8001198 <calcular_z3_z4+0x2f4>)
 8000f94:	edd3 6a00 	vldr	s13, [r3]
 8000f98:	4a88      	ldr	r2, [pc, #544]	; (80011bc <calcular_z3_z4+0x318>)
 8000f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fa8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	f00c fb3e 	bl	800d634 <expf>
 8000fb8:	eef0 7a40 	vmov.f32	s15, s0
 8000fbc:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <calcular_z3_z4+0x30c>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <calcular_z3_z4+0x30c>)
 8000fcc:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N4; i++) {
 8000fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8000fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	ddcc      	ble.n	8000f76 <calcular_z3_z4+0xd2>
|__)  /\   |   /\      |  |__)  /\  /__` |__  |__)  /\     |  / /  \ |  | | |__  |__) |  \  /\
|    /~~\  |  /~~\     |  |  \ /~~\ .__/ |___ |  \ /~~\    | /_ \__X \__/ | |___ |  \ |__/ /~~\
	             *
	             * */

	            atractores1 = 0.0f;
 8000fdc:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <calcular_z3_z4+0x31c>)
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fe8:	e03b      	b.n	8001062 <calcular_z3_z4+0x1be>
					atractores1 += a1[i] * expf(-b1[i] * fabsf(fmodf(theta + PI, 2 * PI) - deltaTheta1[i])); //+Pi/2
 8000fea:	4a6e      	ldr	r2, [pc, #440]	; (80011a4 <calcular_z3_z4+0x300>)
 8000fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	ed93 8a00 	vldr	s16, [r3]
 8000ff6:	4a6c      	ldr	r2, [pc, #432]	; (80011a8 <calcular_z3_z4+0x304>)
 8000ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eef1 8a67 	vneg.f32	s17, s15
 8001006:	4b64      	ldr	r3, [pc, #400]	; (8001198 <calcular_z3_z4+0x2f4>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80011c4 <calcular_z3_z4+0x320>
 8001010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001014:	eddf 0a61 	vldr	s1, [pc, #388]	; 800119c <calcular_z3_z4+0x2f8>
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	f00c fb40 	bl	800d6a0 <fmodf>
 8001020:	eeb0 7a40 	vmov.f32	s14, s0
 8001024:	4a61      	ldr	r2, [pc, #388]	; (80011ac <calcular_z3_z4+0x308>)
 8001026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	eef0 7ae7 	vabs.f32	s15, s15
 8001038:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	f00c faf8 	bl	800d634 <expf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ee28 7a27 	vmul.f32	s14, s16, s15
 800104c:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <calcular_z3_z4+0x31c>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001056:	4b5a      	ldr	r3, [pc, #360]	; (80011c0 <calcular_z3_z4+0x31c>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 800105c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800105e:	3301      	adds	r3, #1
 8001060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001064:	2b02      	cmp	r3, #2
 8001066:	ddc0      	ble.n	8000fea <calcular_z3_z4+0x146>
				}

				// C�?LCULO DE ATRACTORES PARA OSCILADOR 4
				atractores2 = 0.0f;
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <calcular_z3_z4+0x324>)
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
 8001074:	e03b      	b.n	80010ee <calcular_z3_z4+0x24a>
					atractores2 += a4[i] * expf(-b4[i] * fabsf(fmodf(theta+ PI, 2 * PI) - deltaTheta4[i]));
 8001076:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <calcular_z3_z4+0x310>)
 8001078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	ed93 8a00 	vldr	s16, [r3]
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <calcular_z3_z4+0x314>)
 8001084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	eef1 8a67 	vneg.f32	s17, s15
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <calcular_z3_z4+0x2f4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80011c4 <calcular_z3_z4+0x320>
 800109c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010a0:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800119c <calcular_z3_z4+0x2f8>
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	f00c fafa 	bl	800d6a0 <fmodf>
 80010ac:	eeb0 7a40 	vmov.f32	s14, s0
 80010b0:	4a42      	ldr	r2, [pc, #264]	; (80011bc <calcular_z3_z4+0x318>)
 80010b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	eef0 7ae7 	vabs.f32	s15, s15
 80010c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	f00c fab2 	bl	800d634 <expf>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <calcular_z3_z4+0x324>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <calcular_z3_z4+0x324>)
 80010e4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 80010e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ea:	3301      	adds	r3, #1
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	ddc0      	ble.n	8001076 <calcular_z3_z4+0x1d2>
 *
 * */



				atractores7 = 0.0f;
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <calcular_z3_z4+0x328>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	657b      	str	r3, [r7, #84]	; 0x54
 8001100:	e03b      	b.n	800117a <calcular_z3_z4+0x2d6>
					atractores7 += a1[i] * expf(-b1[i] * fabsf(fmodf(theta + PI, 2 * PI) - deltaTheta1[i]));
 8001102:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <calcular_z3_z4+0x300>)
 8001104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	ed93 8a00 	vldr	s16, [r3]
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <calcular_z3_z4+0x304>)
 8001110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eef1 8a67 	vneg.f32	s17, s15
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <calcular_z3_z4+0x2f4>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80011c4 <calcular_z3_z4+0x320>
 8001128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800119c <calcular_z3_z4+0x2f8>
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f00c fab4 	bl	800d6a0 <fmodf>
 8001138:	eeb0 7a40 	vmov.f32	s14, s0
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <calcular_z3_z4+0x308>)
 800113e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	eef0 7ae7 	vabs.f32	s15, s15
 8001150:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	f00c fa6c 	bl	800d634 <expf>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
 8001160:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <calcular_z3_z4+0x328>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <calcular_z3_z4+0x328>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 8001174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001176:	3301      	adds	r3, #1
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
 800117a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117c:	2b02      	cmp	r3, #2
 800117e:	ddc0      	ble.n	8001102 <calcular_z3_z4+0x25e>
				}

				// CALCULO DE ATRACTORES PARA OSCILADOR 4
				atractores8 = 0.0f;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <calcular_z3_z4+0x32c>)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
 800118c:	e05e      	b.n	800124c <calcular_z3_z4+0x3a8>
 800118e:	bf00      	nop
 8001190:	20000438 	.word	0x20000438
 8001194:	20000000 	.word	0x20000000
 8001198:	20000430 	.word	0x20000430
 800119c:	40c90fdb 	.word	0x40c90fdb
 80011a0:	2000047c 	.word	0x2000047c
 80011a4:	0800dd58 	.word	0x0800dd58
 80011a8:	0800dd64 	.word	0x0800dd64
 80011ac:	0800dd70 	.word	0x0800dd70
 80011b0:	20000480 	.word	0x20000480
 80011b4:	0800dd7c 	.word	0x0800dd7c
 80011b8:	0800dd8c 	.word	0x0800dd8c
 80011bc:	0800dd9c 	.word	0x0800dd9c
 80011c0:	20000484 	.word	0x20000484
 80011c4:	40490fdb 	.word	0x40490fdb
 80011c8:	20000488 	.word	0x20000488
 80011cc:	20000494 	.word	0x20000494
 80011d0:	20000498 	.word	0x20000498
					atractores8 += a4[i] * expf(-b4[i] * fabsf(fmodf(theta + PI, 2 * PI) - deltaTheta4[i]));
 80011d4:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <calcular_z3_z4+0x444>)
 80011d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 8a00 	vldr	s16, [r3]
 80011e0:	4a42      	ldr	r2, [pc, #264]	; (80012ec <calcular_z3_z4+0x448>)
 80011e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eef1 8a67 	vneg.f32	s17, s15
 80011f0:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <calcular_z3_z4+0x44c>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80012f4 <calcular_z3_z4+0x450>
 80011fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011fe:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80012f8 <calcular_z3_z4+0x454>
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f00c fa4b 	bl	800d6a0 <fmodf>
 800120a:	eeb0 7a40 	vmov.f32	s14, s0
 800120e:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <calcular_z3_z4+0x458>)
 8001210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121e:	eef0 7ae7 	vabs.f32	s15, s15
 8001222:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	f00c fa03 	bl	800d634 <expf>
 800122e:	eef0 7a40 	vmov.f32	s15, s0
 8001232:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <calcular_z3_z4+0x45c>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <calcular_z3_z4+0x45c>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 8001246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001248:	3301      	adds	r3, #1
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
 800124c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800124e:	2b03      	cmp	r3, #3
 8001250:	ddc0      	ble.n	80011d4 <calcular_z3_z4+0x330>
 __       ___         ___  __        __   ___  __           __   ___  __   ___  __
|__)  /\   |   /\      |  |__)  /\  /__` |__  |__)  /\     |  \ |__  |__) |__  /  ` |__|  /\
|    /~~\  |  /~~\     |  |  \ /~~\ .__/ |___ |  \ /~~\    |__/ |___ |  \ |___ \__, |  | /~~\
				 *
				 * */
				float theta_desfasado = fmodf(theta , 2 * PI); //theta + 3*PI/2
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <calcular_z3_z4+0x44c>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eddf 0a27 	vldr	s1, [pc, #156]	; 80012f8 <calcular_z3_z4+0x454>
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	f00c fa1e 	bl	800d6a0 <fmodf>
 8001264:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44


				 atractores5 = 0.0f;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <calcular_z3_z4+0x460>)
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N1; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001274:	e02e      	b.n	80012d4 <calcular_z3_z4+0x430>
					atractores5 += a1[i] * expf(-b1[i] * fabsf(theta_desfasado - deltaTheta1[i]));
 8001276:	4a24      	ldr	r2, [pc, #144]	; (8001308 <calcular_z3_z4+0x464>)
 8001278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	ed93 8a00 	vldr	s16, [r3]
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <calcular_z3_z4+0x468>)
 8001284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eeb1 7a67 	vneg.f32	s14, s15
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <calcular_z3_z4+0x46c>)
 8001294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80012a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012a6:	eef0 7ae7 	vabs.f32	s15, s15
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	f00c f9bf 	bl	800d634 <expf>
 80012b6:	eef0 7a40 	vmov.f32	s15, s0
 80012ba:	ee28 7a27 	vmul.f32	s14, s16, s15
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <calcular_z3_z4+0x460>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <calcular_z3_z4+0x460>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N1; i++) {
 80012ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d0:	3301      	adds	r3, #1
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	ddcd      	ble.n	8001276 <calcular_z3_z4+0x3d2>
				}

				// CACULO DE ATRACTORES PARA OSCILADOR 4
				atractores6 = 0.0f;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <calcular_z3_z4+0x470>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80012e6:	e046      	b.n	8001376 <calcular_z3_z4+0x4d2>
 80012e8:	0800dd7c 	.word	0x0800dd7c
 80012ec:	0800dd8c 	.word	0x0800dd8c
 80012f0:	20000430 	.word	0x20000430
 80012f4:	40490fdb 	.word	0x40490fdb
 80012f8:	40c90fdb 	.word	0x40c90fdb
 80012fc:	0800dd9c 	.word	0x0800dd9c
 8001300:	20000498 	.word	0x20000498
 8001304:	2000048c 	.word	0x2000048c
 8001308:	0800dd58 	.word	0x0800dd58
 800130c:	0800dd64 	.word	0x0800dd64
 8001310:	0800dd70 	.word	0x0800dd70
 8001314:	20000490 	.word	0x20000490
					atractores6 += a4[i] * expf(-b4[i] * fabsf(theta_desfasado - deltaTheta4[i]));
 8001318:	4adb      	ldr	r2, [pc, #876]	; (8001688 <calcular_z3_z4+0x7e4>)
 800131a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	ed93 8a00 	vldr	s16, [r3]
 8001324:	4ad9      	ldr	r2, [pc, #868]	; (800168c <calcular_z3_z4+0x7e8>)
 8001326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eeb1 7a67 	vneg.f32	s14, s15
 8001334:	4ad6      	ldr	r2, [pc, #856]	; (8001690 <calcular_z3_z4+0x7ec>)
 8001336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001348:	eef0 7ae7 	vabs.f32	s15, s15
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	f00c f96e 	bl	800d634 <expf>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
 800135c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001360:	4bcc      	ldr	r3, [pc, #816]	; (8001694 <calcular_z3_z4+0x7f0>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	4bca      	ldr	r3, [pc, #808]	; (8001694 <calcular_z3_z4+0x7f0>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 8001370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001372:	3301      	adds	r3, #1
 8001374:	64bb      	str	r3, [r7, #72]	; 0x48
 8001376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001378:	2b03      	cmp	r3, #3
 800137a:	ddcd      	ble.n	8001318 <calcular_z3_z4+0x474>


	            // DIN�?MICA DE OSCILADORES (MÉTODO DE EULER)

	            // Cálculo de alpha
	            alpha = 1.0f - sqrtf(x * x + y * y);
 800137c:	4bc6      	ldr	r3, [pc, #792]	; (8001698 <calcular_z3_z4+0x7f4>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	4bc5      	ldr	r3, [pc, #788]	; (8001698 <calcular_z3_z4+0x7f4>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4bc3      	ldr	r3, [pc, #780]	; (800169c <calcular_z3_z4+0x7f8>)
 800138e:	edd3 6a00 	vldr	s13, [r3]
 8001392:	4bc2      	ldr	r3, [pc, #776]	; (800169c <calcular_z3_z4+0x7f8>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	f00c f99c 	bl	800d6e0 <sqrtf>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	4bba      	ldr	r3, [pc, #744]	; (80016a0 <calcular_z3_z4+0x7fc>)
 80013b6:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador base (x, y)
	            x_new = x + dt * (alpha * x - omega * y);
 80013ba:	4bb9      	ldr	r3, [pc, #740]	; (80016a0 <calcular_z3_z4+0x7fc>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4bb5      	ldr	r3, [pc, #724]	; (8001698 <calcular_z3_z4+0x7f4>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	4bb6      	ldr	r3, [pc, #728]	; (80016a4 <calcular_z3_z4+0x800>)
 80013cc:	edd3 6a00 	vldr	s13, [r3]
 80013d0:	4bb2      	ldr	r3, [pc, #712]	; (800169c <calcular_z3_z4+0x7f8>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013de:	4bb2      	ldr	r3, [pc, #712]	; (80016a8 <calcular_z3_z4+0x804>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e8:	4bab      	ldr	r3, [pc, #684]	; (8001698 <calcular_z3_z4+0x7f4>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	4bae      	ldr	r3, [pc, #696]	; (80016ac <calcular_z3_z4+0x808>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
	            y_new = y + dt * (alpha * y + omega * x);
 80013f8:	4ba9      	ldr	r3, [pc, #676]	; (80016a0 <calcular_z3_z4+0x7fc>)
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	4ba7      	ldr	r3, [pc, #668]	; (800169c <calcular_z3_z4+0x7f8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001408:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <calcular_z3_z4+0x800>)
 800140a:	edd3 6a00 	vldr	s13, [r3]
 800140e:	4ba2      	ldr	r3, [pc, #648]	; (8001698 <calcular_z3_z4+0x7f4>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141c:	4ba2      	ldr	r3, [pc, #648]	; (80016a8 <calcular_z3_z4+0x804>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001426:	4b9d      	ldr	r3, [pc, #628]	; (800169c <calcular_z3_z4+0x7f8>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	4b9f      	ldr	r3, [pc, #636]	; (80016b0 <calcular_z3_z4+0x80c>)
 8001432:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 3
	            float primerTermino3 = -beta3 * (z3 - z0_1);
 8001436:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80016b4 <calcular_z3_z4+0x810>
 800143a:	eeb1 7a67 	vneg.f32	s14, s15
 800143e:	4b9e      	ldr	r3, [pc, #632]	; (80016b8 <calcular_z3_z4+0x814>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80016bc <calcular_z3_z4+0x818>
 8001448:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	            float dzdt3 = -primerTermino3 + atractores3;
 8001454:	4b9a      	ldr	r3, [pc, #616]	; (80016c0 <calcular_z3_z4+0x81c>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	            z3_new = z3 + dzdt3 * dt;
 8001466:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <calcular_z3_z4+0x804>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <calcular_z3_z4+0x814>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4b91      	ldr	r3, [pc, #580]	; (80016c4 <calcular_z3_z4+0x820>)
 8001480:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 4
	            float primerTermino4 = -beta4 * (z4 - z0_4);
 8001484:	eddf 7a90 	vldr	s15, [pc, #576]	; 80016c8 <calcular_z3_z4+0x824>
 8001488:	eeb1 7a67 	vneg.f32	s14, s15
 800148c:	4b8f      	ldr	r3, [pc, #572]	; (80016cc <calcular_z3_z4+0x828>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80016d0 <calcular_z3_z4+0x82c>
 8001496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	            float dzdt4 = -primerTermino4 + atractores4;
 80014a2:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <calcular_z3_z4+0x830>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	            z4_new = z4 + dzdt4 * dt;
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <calcular_z3_z4+0x804>)
 80014b6:	ed93 7a00 	vldr	s14, [r3]
 80014ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <calcular_z3_z4+0x828>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <calcular_z3_z4+0x834>)
 80014ce:	edc3 7a00 	vstr	s15, [r3]


	            // Oscilador 3
				float primerTermino1 = -beta3 * (z1 - z0_1);
 80014d2:	eddf 7a78 	vldr	s15, [pc, #480]	; 80016b4 <calcular_z3_z4+0x810>
 80014d6:	eeb1 7a67 	vneg.f32	s14, s15
 80014da:	4b80      	ldr	r3, [pc, #512]	; (80016dc <calcular_z3_z4+0x838>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eddf 6a76 	vldr	s13, [pc, #472]	; 80016bc <calcular_z3_z4+0x818>
 80014e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				float dzdt1 = -primerTermino1 + atractores1;
 80014f0:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <calcular_z3_z4+0x83c>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				z1_new = z1 + dzdt1 * dt;
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <calcular_z3_z4+0x804>)
 8001504:	ed93 7a00 	vldr	s14, [r3]
 8001508:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	4b72      	ldr	r3, [pc, #456]	; (80016dc <calcular_z3_z4+0x838>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <calcular_z3_z4+0x840>)
 800151c:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino2 = -beta4 * (z2 - z0_4);
 8001520:	eddf 7a69 	vldr	s15, [pc, #420]	; 80016c8 <calcular_z3_z4+0x824>
 8001524:	eeb1 7a67 	vneg.f32	s14, s15
 8001528:	4b6f      	ldr	r3, [pc, #444]	; (80016e8 <calcular_z3_z4+0x844>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80016d0 <calcular_z3_z4+0x82c>
 8001532:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				float dzdt2 = -primerTermino2 + atractores2;
 800153e:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <calcular_z3_z4+0x848>)
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				z2_new = z2 + dzdt2 * dt;
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <calcular_z3_z4+0x804>)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155e:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <calcular_z3_z4+0x844>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <calcular_z3_z4+0x84c>)
 800156a:	edc3 7a00 	vstr	s15, [r3]

				float primerTermino5 = -beta3 * (z5 - z0_1);
 800156e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80016b4 <calcular_z3_z4+0x810>
 8001572:	eeb1 7a67 	vneg.f32	s14, s15
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <calcular_z3_z4+0x850>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80016bc <calcular_z3_z4+0x818>
 8001580:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	edc7 7a08 	vstr	s15, [r7, #32]
				float dzdt5 = -primerTermino5 + atractores5;
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <calcular_z3_z4+0x854>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	edd7 7a08 	vldr	s15, [r7, #32]
 8001596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159a:	edc7 7a07 	vstr	s15, [r7, #28]
				z5_new = z5 + dzdt5 * dt;
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <calcular_z3_z4+0x804>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ac:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <calcular_z3_z4+0x850>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <calcular_z3_z4+0x858>)
 80015b8:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino6 = -beta4 * (z6 - z0_4);
 80015bc:	eddf 7a42 	vldr	s15, [pc, #264]	; 80016c8 <calcular_z3_z4+0x824>
 80015c0:	eeb1 7a67 	vneg.f32	s14, s15
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <calcular_z3_z4+0x85c>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eddf 6a41 	vldr	s13, [pc, #260]	; 80016d0 <calcular_z3_z4+0x82c>
 80015ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	edc7 7a06 	vstr	s15, [r7, #24]
				float dzdt6 = -primerTermino6 + atractores6;
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <calcular_z3_z4+0x7f0>)
 80015dc:	ed93 7a00 	vldr	s14, [r3]
 80015e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]
				z6_new = z6 + dzdt6 * dt;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <calcular_z3_z4+0x804>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <calcular_z3_z4+0x85c>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <calcular_z3_z4+0x860>)
 8001606:	edc3 7a00 	vstr	s15, [r3]


				// Oscilador 3
				float primerTermino7 = -beta3 * (z7 - z0_1);
 800160a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80016b4 <calcular_z3_z4+0x810>
 800160e:	eeb1 7a67 	vneg.f32	s14, s15
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <calcular_z3_z4+0x864>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eddf 6a28 	vldr	s13, [pc, #160]	; 80016bc <calcular_z3_z4+0x818>
 800161c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a04 	vstr	s15, [r7, #16]
				float dzdt7 = -primerTermino7 + atractores7;
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <calcular_z3_z4+0x868>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001636:	edc7 7a03 	vstr	s15, [r7, #12]
				z7_new = z7 + dzdt7 * dt;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <calcular_z3_z4+0x804>)
 800163c:	ed93 7a00 	vldr	s14, [r3]
 8001640:	edd7 7a03 	vldr	s15, [r7, #12]
 8001644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <calcular_z3_z4+0x864>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <calcular_z3_z4+0x86c>)
 8001654:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino8 = -beta4 * (z8 - z0_4);
 8001658:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80016c8 <calcular_z3_z4+0x824>
 800165c:	eeb1 7a67 	vneg.f32	s14, s15
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <calcular_z3_z4+0x870>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80016d0 <calcular_z3_z4+0x82c>
 800166a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	edc7 7a02 	vstr	s15, [r7, #8]
				float dzdt8 = -primerTermino8 + atractores8;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <calcular_z3_z4+0x874>)
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	e04a      	b.n	800171c <calcular_z3_z4+0x878>
 8001686:	bf00      	nop
 8001688:	0800dd7c 	.word	0x0800dd7c
 800168c:	0800dd8c 	.word	0x0800dd8c
 8001690:	0800dd9c 	.word	0x0800dd9c
 8001694:	20000490 	.word	0x20000490
 8001698:	20000000 	.word	0x20000000
 800169c:	20000438 	.word	0x20000438
 80016a0:	2000042c 	.word	0x2000042c
 80016a4:	20000028 	.word	0x20000028
 80016a8:	20000024 	.word	0x20000024
 80016ac:	2000049c 	.word	0x2000049c
 80016b0:	200004a0 	.word	0x200004a0
 80016b4:	c285f190 	.word	0xc285f190
 80016b8:	20000004 	.word	0x20000004
 80016bc:	3f19999a 	.word	0x3f19999a
 80016c0:	2000047c 	.word	0x2000047c
 80016c4:	200004a4 	.word	0x200004a4
 80016c8:	c0594af5 	.word	0xc0594af5
 80016cc:	20000008 	.word	0x20000008
 80016d0:	3edc28f6 	.word	0x3edc28f6
 80016d4:	20000480 	.word	0x20000480
 80016d8:	200004a8 	.word	0x200004a8
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	20000484 	.word	0x20000484
 80016e4:	200004ac 	.word	0x200004ac
 80016e8:	20000010 	.word	0x20000010
 80016ec:	20000488 	.word	0x20000488
 80016f0:	200004b0 	.word	0x200004b0
 80016f4:	20000014 	.word	0x20000014
 80016f8:	2000048c 	.word	0x2000048c
 80016fc:	200004b4 	.word	0x200004b4
 8001700:	20000018 	.word	0x20000018
 8001704:	200004b8 	.word	0x200004b8
 8001708:	2000001c 	.word	0x2000001c
 800170c:	20000494 	.word	0x20000494
 8001710:	200004bc 	.word	0x200004bc
 8001714:	20000020 	.word	0x20000020
 8001718:	20000498 	.word	0x20000498
 800171c:	edc7 7a01 	vstr	s15, [r7, #4]
				z8_new = z8 + dzdt8 * dt;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <calcular_z3_z4+0x8f8>)
 8001722:	ed93 7a00 	vldr	s14, [r3]
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <calcular_z3_z4+0x8fc>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <calcular_z3_z4+0x900>)
 800173a:	edc3 7a00 	vstr	s15, [r3]

	                // ACTUALIZAR ESTADO
	            x = x_new;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <calcular_z3_z4+0x904>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <calcular_z3_z4+0x908>)
 8001744:	6013      	str	r3, [r2, #0]
	            y = y_new;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <calcular_z3_z4+0x90c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <calcular_z3_z4+0x910>)
 800174c:	6013      	str	r3, [r2, #0]

	            z3 = z3_new;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <calcular_z3_z4+0x914>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <calcular_z3_z4+0x918>)
 8001754:	6013      	str	r3, [r2, #0]
	            z4 = z4_new;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <calcular_z3_z4+0x91c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <calcular_z3_z4+0x920>)
 800175c:	6013      	str	r3, [r2, #0]

	            z1 = z1_new;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <calcular_z3_z4+0x924>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <calcular_z3_z4+0x928>)
 8001764:	6013      	str	r3, [r2, #0]
	            z2 = z2_new;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <calcular_z3_z4+0x92c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <calcular_z3_z4+0x930>)
 800176c:	6013      	str	r3, [r2, #0]

	            z5 = z5_new;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <calcular_z3_z4+0x934>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <calcular_z3_z4+0x938>)
 8001774:	6013      	str	r3, [r2, #0]
				z6 = z6_new;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <calcular_z3_z4+0x93c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <calcular_z3_z4+0x940>)
 800177c:	6013      	str	r3, [r2, #0]

				z7 = z7_new;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <calcular_z3_z4+0x944>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <calcular_z3_z4+0x948>)
 8001784:	6013      	str	r3, [r2, #0]
				z8 = z8_new;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <calcular_z3_z4+0x900>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <calcular_z3_z4+0x8fc>)
 800178c:	6013      	str	r3, [r2, #0]

}
 800178e:	bf00      	nop
 8001790:	3768      	adds	r7, #104	; 0x68
 8001792:	46bd      	mov	sp, r7
 8001794:	ecbd 8b02 	vpop	{d8}
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000024 	.word	0x20000024
 80017a0:	20000020 	.word	0x20000020
 80017a4:	200004c0 	.word	0x200004c0
 80017a8:	2000049c 	.word	0x2000049c
 80017ac:	20000000 	.word	0x20000000
 80017b0:	200004a0 	.word	0x200004a0
 80017b4:	20000438 	.word	0x20000438
 80017b8:	200004a4 	.word	0x200004a4
 80017bc:	20000004 	.word	0x20000004
 80017c0:	200004a8 	.word	0x200004a8
 80017c4:	20000008 	.word	0x20000008
 80017c8:	200004ac 	.word	0x200004ac
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	200004b0 	.word	0x200004b0
 80017d4:	20000010 	.word	0x20000010
 80017d8:	200004b4 	.word	0x200004b4
 80017dc:	20000014 	.word	0x20000014
 80017e0:	200004b8 	.word	0x200004b8
 80017e4:	20000018 	.word	0x20000018
 80017e8:	200004bc 	.word	0x200004bc
 80017ec:	2000001c 	.word	0x2000001c

080017f0 <enviar_torque>:

void enviar_torque(uint8_t* dato, uint8_t size ){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart6, dato, size, HAL_MAX_DELAY);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <enviar_torque+0x24>)
 8001808:	f004 fd4b 	bl	80062a2 <HAL_UART_Transmit>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200003e4 	.word	0x200003e4

08001818 <syncwrite_torque_limit>:

void syncwrite_torque_limit(uint8_t *ids, uint16_t *limites, uint8_t cantidad) {
 8001818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800181c:	b08d      	sub	sp, #52	; 0x34
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	4613      	mov	r3, r2
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	466b      	mov	r3, sp
 800182a:	461e      	mov	r6, r3
    const uint8_t INSTRUCCION = 0x83;  // SYNC WRITE
 800182c:	2383      	movs	r3, #131	; 0x83
 800182e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const uint8_t ID_BROADCAST = 0xFE;
 8001832:	23fe      	movs	r3, #254	; 0xfe
 8001834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    const uint8_t START_ADDR = 0x22;   // Dirección de Torque Limit Left protocolo del dinamixel
 8001838:	2322      	movs	r3, #34	; 0x22
 800183a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    const uint8_t BYTES_POR_DATO = 2;  // Torque usa 2 bytes segun yo
 800183e:	2302      	movs	r3, #2
 8001840:	f887 3020 	strb.w	r3, [r7, #32]
    const uint8_t BYTES_POR_SERVO = 1 + BYTES_POR_DATO;
 8001844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001848:	3301      	adds	r3, #1
 800184a:	77fb      	strb	r3, [r7, #31]

    uint8_t longitud = 4 + cantidad * BYTES_POR_SERVO;
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	fb12 f303 	smulbb	r3, r2, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3304      	adds	r3, #4
 8001858:	77bb      	strb	r3, [r7, #30]
    uint8_t paquete[7 + cantidad * BYTES_POR_SERVO + 1];  // Cabecera + datos + checksum
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	7ffa      	ldrb	r2, [r7, #31]
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	f103 0108 	add.w	r1, r3, #8
 8001866:	1e4b      	subs	r3, r1, #1
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	460a      	mov	r2, r1
 800186c:	2300      	movs	r3, #0
 800186e:	4690      	mov	r8, r2
 8001870:	4699      	mov	r9, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800187e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001886:	460a      	mov	r2, r1
 8001888:	2300      	movs	r3, #0
 800188a:	4614      	mov	r4, r2
 800188c:	461d      	mov	r5, r3
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	00eb      	lsls	r3, r5, #3
 8001898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189c:	00e2      	lsls	r2, r4, #3
 800189e:	460b      	mov	r3, r1
 80018a0:	3307      	adds	r3, #7
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	ebad 0d03 	sub.w	sp, sp, r3
 80018aa:	466b      	mov	r3, sp
 80018ac:	3300      	adds	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

    int i = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    paquete[i++] = 0xFF;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	21ff      	movs	r1, #255	; 0xff
 80018be:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = 0xFF;
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	21ff      	movs	r1, #255	; 0xff
 80018ca:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = ID_BROADCAST;
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80018d8:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = longitud;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	7fb9      	ldrb	r1, [r7, #30]
 80018e4:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = INSTRUCCION;
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80018f2:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = START_ADDR;
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001900:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = BYTES_POR_DATO;
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800190e:	54d1      	strb	r1, [r2, r3]

    for (uint8_t j = 0; j < cantidad; j++) {
 8001910:	2300      	movs	r3, #0
 8001912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001916:	e025      	b.n	8001964 <syncwrite_torque_limit+0x14c>
        uint16_t torque = limites[j];
 8001918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	827b      	strh	r3, [r7, #18]
        paquete[i++] = ids[j];
 8001926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	441a      	add	r2, r3
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	1c59      	adds	r1, r3, #1
 8001932:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001934:	7811      	ldrb	r1, [r2, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	54d1      	strb	r1, [r2, r3]
        paquete[i++] = torque & 0xFF;         // LSB
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001940:	8a7a      	ldrh	r2, [r7, #18]
 8001942:	b2d1      	uxtb	r1, r2
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	54d1      	strb	r1, [r2, r3]
        paquete[i++] = (torque >> 8) & 0xFF;  // MSB
 8001948:	8a7b      	ldrh	r3, [r7, #18]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b299      	uxth	r1, r3
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001954:	b2c9      	uxtb	r1, r1
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < cantidad; j++) {
 800195a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800195e:	3301      	adds	r3, #1
 8001960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001964:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3d4      	bcc.n	8001918 <syncwrite_torque_limit+0x100>
    }

    // Calcular checksum
    uint8_t checksum = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    for (int j = 2; j < i; j++) {
 8001974:	2302      	movs	r3, #2
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e00b      	b.n	8001992 <syncwrite_torque_limit+0x17a>
        checksum += paquete[j];
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	4413      	add	r3, r2
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001986:	4413      	add	r3, r2
 8001988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    for (int j = 2; j < i; j++) {
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	429a      	cmp	r2, r3
 8001998:	dbef      	blt.n	800197a <syncwrite_torque_limit+0x162>
    }
    checksum = ~checksum;
 800199a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800199e:	43db      	mvns	r3, r3
 80019a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    paquete[i++] = checksum;
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80019b0:	54d1      	strb	r1, [r2, r3]

    // Enviar por UART
    enviar_torque(paquete, i);
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f7ff ff19 	bl	80017f0 <enviar_torque>
 80019be:	46b5      	mov	sp, r6
}
 80019c0:	bf00      	nop
 80019c2:	3734      	adds	r7, #52	; 0x34
 80019c4:	46bd      	mov	sp, r7
 80019c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080019cc <enviar_dato>:





void enviar_dato(uint8_t* dato, uint8_t size ){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart6, dato, size, HAL_MAX_DELAY);
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <enviar_dato+0x24>)
 80019e4:	f004 fc5d 	bl	80062a2 <HAL_UART_Transmit>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200003e4 	.word	0x200003e4

080019f4 <syncwrite_mover_servos>:

void syncwrite_mover_servos(uint8_t *ids, uint16_t *posiciones, uint8_t cantidad) {
 80019f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019f8:	b08d      	sub	sp, #52	; 0x34
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	466b      	mov	r3, sp
 8001a06:	461e      	mov	r6, r3
    const uint8_t INSTRUCCION = 0x83;  // SYNC WRITE
 8001a08:	2383      	movs	r3, #131	; 0x83
 8001a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const uint8_t ID_BROADCAST = 0xFE;
 8001a0e:	23fe      	movs	r3, #254	; 0xfe
 8001a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    const uint8_t START_ADDR = GOAL_POSITION_L;
 8001a14:	231e      	movs	r3, #30
 8001a16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    const uint8_t BYTES_POR_DATO = 2;  // posición ocupa 2 bytes
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f887 3020 	strb.w	r3, [r7, #32]
    const uint8_t BYTES_POR_SERVO = 1 + BYTES_POR_DATO;
 8001a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a24:	3301      	adds	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]

    uint8_t longitud = 4 + cantidad * BYTES_POR_SERVO;
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	fb12 f303 	smulbb	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3304      	adds	r3, #4
 8001a34:	77bb      	strb	r3, [r7, #30]

    uint8_t paquete[7 + cantidad * BYTES_POR_SERVO + 1]; // Cabecera + cuerpo + checksum
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	7ffa      	ldrb	r2, [r7, #31]
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	f103 0108 	add.w	r1, r3, #8
 8001a42:	1e4b      	subs	r3, r1, #1
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	460a      	mov	r2, r1
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a62:	460a      	mov	r2, r1
 8001a64:	2300      	movs	r3, #0
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	00eb      	lsls	r3, r5, #3
 8001a74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a78:	00e2      	lsls	r2, r4, #3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	3307      	adds	r3, #7
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	ebad 0d03 	sub.w	sp, sp, r3
 8001a86:	466b      	mov	r3, sp
 8001a88:	3300      	adds	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
    int i = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

    paquete[i++] = 0xFF;
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	21ff      	movs	r1, #255	; 0xff
 8001a9a:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = 0xFF;
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	21ff      	movs	r1, #255	; 0xff
 8001aa6:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = ID_BROADCAST;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001ab4:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = longitud;
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	7fb9      	ldrb	r1, [r7, #30]
 8001ac0:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = INSTRUCCION;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001ace:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = START_ADDR;
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001adc:	54d1      	strb	r1, [r2, r3]
    paquete[i++] = BYTES_POR_DATO;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001aea:	54d1      	strb	r1, [r2, r3]

    for (uint8_t j = 0; j < cantidad; j++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001af2:	e025      	b.n	8001b40 <syncwrite_mover_servos+0x14c>
        uint16_t pos = posiciones[j];
 8001af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	4413      	add	r3, r2
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	827b      	strh	r3, [r7, #18]
        paquete[i++] = ids[j];
 8001b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	441a      	add	r2, r3
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001b10:	7811      	ldrb	r1, [r2, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	54d1      	strb	r1, [r2, r3]
        paquete[i++] = pos & 0xFF;         // LSB
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b1c:	8a7a      	ldrh	r2, [r7, #18]
 8001b1e:	b2d1      	uxtb	r1, r2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	54d1      	strb	r1, [r2, r3]
        paquete[i++] = (pos >> 8) & 0xFF;  // MSB
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < cantidad; j++) {
 8001b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001b40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3d4      	bcc.n	8001af4 <syncwrite_mover_servos+0x100>
    }

    // Calcular checksum
    uint8_t checksum = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    for (int j = 2; j < i; j++) {
 8001b50:	2302      	movs	r3, #2
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	e00b      	b.n	8001b6e <syncwrite_mover_servos+0x17a>
        checksum += paquete[j];
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b62:	4413      	add	r3, r2
 8001b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    for (int j = 2; j < i; j++) {
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbef      	blt.n	8001b56 <syncwrite_mover_servos+0x162>
    }
    checksum = ~checksum;
 8001b76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    paquete[i++] = checksum;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8001b8c:	54d1      	strb	r1, [r2, r3]

    // Enviar por UART
    enviar_dato(paquete, i);  // i contiene el total de bytes
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	6978      	ldr	r0, [r7, #20]
 8001b96:	f7ff ff19 	bl	80019cc <enviar_dato>
 8001b9a:	46b5      	mov	sp, r6
}
 8001b9c:	bf00      	nop
 8001b9e:	3734      	adds	r7, #52	; 0x34
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001ba8 <grados_a_posicion>:



uint16_t grados_a_posicion(float grados) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (grados < 0.0f) grados = 0.0f;
 8001bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d502      	bpl.n	8001bc6 <grados_a_posicion+0x1e>
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
    if (grados > 300.0f) grados = 300.0f;
 8001bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001c00 <grados_a_posicion+0x58>
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd01      	ble.n	8001bdc <grados_a_posicion+0x34>
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <grados_a_posicion+0x5c>)
 8001bda:	607b      	str	r3, [r7, #4]
    return (uint16_t)(grados * (1023.0f / 300.0f));
 8001bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c08 <grados_a_posicion+0x60>
 8001be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	b29b      	uxth	r3, r3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	43960000 	.word	0x43960000
 8001c04:	43960000 	.word	0x43960000
 8001c08:	405a3d71 	.word	0x405a3d71

08001c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c12:	f001 f873 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c16:	f000 fa6f 	bl	80020f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1a:	f000 fbdf 	bl	80023dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c1e:	f000 fad5 	bl	80021cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001c22:	f008 fd43 	bl	800a6ac <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001c26:	f000 fb5b 	bl	80022e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001c2a:	f000 fb2f 	bl	800228c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c2e:	f000 fb81 	bl	8002334 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8001c32:	f000 fb01 	bl	8002238 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8001c36:	f000 fba7 	bl	8002388 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  uint16_t torques[] = {1023, 512, 512,
 8001c3a:	4bbd      	ldr	r3, [pc, #756]	; (8001f30 <main+0x324>)
 8001c3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c40:	461d      	mov	r5, r3
 8001c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c4a:	e884 0003 	stmia.w	r4, {r0, r1}
		  512, 512, 1023,
		  512, 512, 1023,
		  1023, 512, 512};  // Torque máximo para cada servo
  syncwrite_torque_limit(ids, torques, 12);
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	220c      	movs	r2, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	48b7      	ldr	r0, [pc, #732]	; (8001f34 <main+0x328>)
 8001c58:	f7ff fdde 	bl	8001818 <syncwrite_torque_limit>




  //moviento de pararse
  HAL_Delay(5000);
 8001c5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c60:	f001 f8be 	bl	8002de0 <HAL_Delay>

  //uint16_t posicion[] = {512, 512, 512, 512, 512, 512, 512, 512, 512, 500, 512, 512};
  //syncwrite_mover_servos(ids, posicion, 12);

  HAL_Delay(2000);
 8001c64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c68:	f001 f8ba 	bl	8002de0 <HAL_Delay>
  */




  HAL_UART_Receive_IT(&huart4, (uint8_t *)&dato_uart4, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	49b2      	ldr	r1, [pc, #712]	; (8001f38 <main+0x32c>)
 8001c70:	48b2      	ldr	r0, [pc, #712]	; (8001f3c <main+0x330>)
 8001c72:	f004 fba1 	bl	80063b8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  MX_USB_HOST_Process();
 8001c76:	f008 fd3f 	bl	800a6f8 <MX_USB_HOST_Process>


	  calcular_z3_z4();
 8001c7a:	f7ff f913 	bl	8000ea4 <calcular_z3_z4>

	 	        z3_grados = (z3 * GainDelanteraSup + OffDelanteraSup);		//24 +48 funciona decente
 8001c7e:	4bb0      	ldr	r3, [pc, #704]	; (8001f40 <main+0x334>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	4bae      	ldr	r3, [pc, #696]	; (8001f44 <main+0x338>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	4bac      	ldr	r3, [pc, #688]	; (8001f48 <main+0x33c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	4ba9      	ldr	r3, [pc, #676]	; (8001f4c <main+0x340>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]
	 	        z4_grados = z4 * GainDelanteraInf  + OffDelanteraInf;				//DI 38 + 98 funciona descente
 8001caa:	4ba9      	ldr	r3, [pc, #676]	; (8001f50 <main+0x344>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb6:	4ba7      	ldr	r3, [pc, #668]	; (8001f54 <main+0x348>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <main+0x34c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	4ba2      	ldr	r3, [pc, #648]	; (8001f5c <main+0x350>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]

	 	        z7_grados = (z7 * GainDelanteraSup + OffDelanteraSup);
 8001cd6:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <main+0x334>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce2:	4b9f      	ldr	r3, [pc, #636]	; (8001f60 <main+0x354>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <main+0x33c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <main+0x358>)
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
	 	        z8_grados = z8 * GainDelanteraInf + OffDelanteraInf;				//DD
 8001d02:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <main+0x344>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0e:	4b96      	ldr	r3, [pc, #600]	; (8001f68 <main+0x35c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <main+0x34c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d28:	4b90      	ldr	r3, [pc, #576]	; (8001f6c <main+0x360>)
 8001d2a:	edc3 7a00 	vstr	s15, [r3]

	 	        z1_grados = (z1 * GainTraseraSup + OffTraseraSup);
 8001d2e:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <main+0x364>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <main+0x368>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <main+0x36c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <main+0x370>)
 8001d56:	edc3 7a00 	vstr	s15, [r3]
	 	        z2_grados = z2 * GainTraseraInf  + OffTraseraInf;				//TI
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <main+0x374>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	4b87      	ldr	r3, [pc, #540]	; (8001f84 <main+0x378>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d70:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <main+0x37c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <main+0x380>)
 8001d82:	edc3 7a00 	vstr	s15, [r3]

	 	        z5_grados = (z5 * GainTraseraSup + OffTraseraSup);			//TD Offset de 135
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <main+0x364>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <main+0x384>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9c:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <main+0x36c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dac:	4b79      	ldr	r3, [pc, #484]	; (8001f94 <main+0x388>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]
	 	        z6_grados = z6 * GainTraseraInf  + OffDelanteraInf;
 8001db2:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <main+0x374>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <main+0x38c>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <main+0x34c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <main+0x390>)
 8001dda:	edc3 7a00 	vstr	s15, [r3]



	 	        z3_posicion = grados_a_posicion(z3_grados);
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <main+0x340>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	f7ff fede 	bl	8001ba8 <grados_a_posicion>
 8001dec:	4603      	mov	r3, r0
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <main+0x394>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
	 	        z4_posicion = grados_a_posicion(z4_grados);
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <main+0x350>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	f7ff fecf 	bl	8001ba8 <grados_a_posicion>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e14:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <main+0x398>)
 8001e16:	edc3 7a00 	vstr	s15, [r3]
	 	        z1_posicion = grados_a_posicion(z1_grados);
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <main+0x370>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	f7ff fec0 	bl	8001ba8 <grados_a_posicion>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <main+0x39c>)
 8001e34:	edc3 7a00 	vstr	s15, [r3]
	 	        z2_posicion = grados_a_posicion(z2_grados);
 8001e38:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <main+0x380>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	f7ff feb1 	bl	8001ba8 <grados_a_posicion>
 8001e46:	4603      	mov	r3, r0
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <main+0x3a0>)
 8001e52:	edc3 7a00 	vstr	s15, [r3]

	 	        z5_posicion = grados_a_posicion(z5_grados);
 8001e56:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <main+0x388>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	f7ff fea2 	bl	8001ba8 <grados_a_posicion>
 8001e64:	4603      	mov	r3, r0
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6e:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <main+0x3a4>)
 8001e70:	edc3 7a00 	vstr	s15, [r3]
	 	        z6_posicion = grados_a_posicion(z6_grados);
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <main+0x390>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	f7ff fe93 	bl	8001ba8 <grados_a_posicion>
 8001e82:	4603      	mov	r3, r0
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <main+0x3a8>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
	 	        z7_posicion = grados_a_posicion(z7_grados);
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <main+0x358>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	f7ff fe84 	bl	8001ba8 <grados_a_posicion>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <main+0x3ac>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
	 	        z8_posicion = grados_a_posicion(z8_grados);
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <main+0x360>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	f7ff fe75 	bl	8001ba8 <grados_a_posicion>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <main+0x3b0>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]

	 	        uint8_t ids[] = {0, 1, 2,
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <main+0x3b4>)
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	 	    					6, 7, 8,
	 	    					9, 10, 11};



	  if (dato_recibido_flag){
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <main+0x3b8>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <main+0x2de>
		  dato_recibido_flag = false;
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <main+0x3b8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]

	      }

	  switch (dato_uart4){
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <main+0x32c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	f200 8089 	bhi.w	800200a <main+0x3fe>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <main+0x2f4>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f1b 	.word	0x08001f1b
 8001f08:	08001f25 	.word	0x08001f25
 8001f0c:	08001fcd 	.word	0x08001fcd
	  	        case 1:
	  	        	Giro = 512;
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <main+0x3bc>)
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	601a      	str	r2, [r3, #0]
	  	        	break;
 8001f18:	e077      	b.n	800200a <main+0x3fe>
	  	        case 2:
	  	        	Giro = 440;
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <main+0x3bc>)
 8001f1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001f20:	601a      	str	r2, [r3, #0]
	  	        	break;
 8001f22:	e072      	b.n	800200a <main+0x3fe>
	  	        case 3:
	  	        	Giro = 590;
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <main+0x3bc>)
 8001f26:	f240 224e 	movw	r2, #590	; 0x24e
 8001f2a:	601a      	str	r2, [r3, #0]
	  	        	break;
 8001f2c:	e06d      	b.n	800200a <main+0x3fe>
 8001f2e:	bf00      	nop
 8001f30:	0800dd30 	.word	0x0800dd30
 8001f34:	20000050 	.word	0x20000050
 8001f38:	20000434 	.word	0x20000434
 8001f3c:	200002c4 	.word	0x200002c4
 8001f40:	2000002c 	.word	0x2000002c
 8001f44:	20000004 	.word	0x20000004
 8001f48:	2000003c 	.word	0x2000003c
 8001f4c:	2000043c 	.word	0x2000043c
 8001f50:	20000034 	.word	0x20000034
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000044 	.word	0x20000044
 8001f5c:	20000440 	.word	0x20000440
 8001f60:	2000001c 	.word	0x2000001c
 8001f64:	20000454 	.word	0x20000454
 8001f68:	20000020 	.word	0x20000020
 8001f6c:	20000458 	.word	0x20000458
 8001f70:	20000030 	.word	0x20000030
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	20000040 	.word	0x20000040
 8001f7c:	20000444 	.word	0x20000444
 8001f80:	20000038 	.word	0x20000038
 8001f84:	20000010 	.word	0x20000010
 8001f88:	20000048 	.word	0x20000048
 8001f8c:	20000448 	.word	0x20000448
 8001f90:	20000014 	.word	0x20000014
 8001f94:	2000044c 	.word	0x2000044c
 8001f98:	20000018 	.word	0x20000018
 8001f9c:	20000450 	.word	0x20000450
 8001fa0:	2000045c 	.word	0x2000045c
 8001fa4:	20000460 	.word	0x20000460
 8001fa8:	20000464 	.word	0x20000464
 8001fac:	20000468 	.word	0x20000468
 8001fb0:	2000046c 	.word	0x2000046c
 8001fb4:	20000470 	.word	0x20000470
 8001fb8:	20000474 	.word	0x20000474
 8001fbc:	20000478 	.word	0x20000478
 8001fc0:	0800dd48 	.word	0x0800dd48
 8001fc4:	20000435 	.word	0x20000435
 8001fc8:	2000004c 	.word	0x2000004c
	  	        case 4:
	  	        	//uint16_t posicion_sentado[] = {512, 512, 512,512, 512, 350, 512, 512, 350,512, 512,512};
	  	        	Giro = 512; //0 9
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <main+0x4c0>)
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	601a      	str	r2, [r3, #0]
	  	        	z3_posicion = 512;//1
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <main+0x4c4>)
 8001fd6:	f04f 4288 	mov.w	r2, #1140850688	; 0x44000000
 8001fda:	601a      	str	r2, [r3, #0]
		 	        z4_posicion = 550;
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <main+0x4c8>)
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <main+0x4cc>)
 8001fe0:	601a      	str	r2, [r3, #0]
		 	        z1_posicion = 550;
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <main+0x4d0>)
 8001fe4:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <main+0x4cc>)
 8001fe6:	601a      	str	r2, [r3, #0]
		 	        z2_posicion = 370; //2
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <main+0x4d4>)
 8001fea:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <main+0x4d8>)
 8001fec:	601a      	str	r2, [r3, #0]

		 	        z5_posicion = 550;
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <main+0x4dc>)
 8001ff0:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <main+0x4cc>)
 8001ff2:	601a      	str	r2, [r3, #0]
		 	        z6_posicion = 370; //11
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <main+0x4e0>)
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <main+0x4d8>)
 8001ff8:	601a      	str	r2, [r3, #0]
		 	        z7_posicion = 512; //10
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <main+0x4e4>)
 8001ffc:	f04f 4288 	mov.w	r2, #1140850688	; 0x44000000
 8002000:	601a      	str	r2, [r3, #0]
		 	        z8_posicion = 550;
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <main+0x4e8>)
 8002004:	4a34      	ldr	r2, [pc, #208]	; (80020d8 <main+0x4cc>)
 8002006:	601a      	str	r2, [r3, #0]
	  	         break;
 8002008:	bf00      	nop
	  	        }

	  uint16_t posiciones[] = {Giro, z3_posicion, z4_posicion, // DI
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <main+0x4c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <main+0x4c4>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201c:	ee17 3a90 	vmov	r3, s15
 8002020:	b29b      	uxth	r3, r3
 8002022:	80fb      	strh	r3, [r7, #6]
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <main+0x4c8>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202e:	ee17 3a90 	vmov	r3, s15
 8002032:	b29b      	uxth	r3, r3
 8002034:	813b      	strh	r3, [r7, #8]
 8002036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <main+0x4d0>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002046:	ee17 3a90 	vmov	r3, s15
 800204a:	b29b      	uxth	r3, r3
 800204c:	81bb      	strh	r3, [r7, #12]
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <main+0x4d4>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	b29b      	uxth	r3, r3
 800205e:	81fb      	strh	r3, [r7, #14]
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	823b      	strh	r3, [r7, #16]
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <main+0x4dc>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	b29b      	uxth	r3, r3
 8002076:	827b      	strh	r3, [r7, #18]
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <main+0x4e0>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002082:	ee17 3a90 	vmov	r3, s15
 8002086:	b29b      	uxth	r3, r3
 8002088:	82bb      	strh	r3, [r7, #20]
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <main+0x4c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	82fb      	strh	r3, [r7, #22]
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <main+0x4e4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	833b      	strh	r3, [r7, #24]
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <main+0x4e8>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	837b      	strh	r3, [r7, #26]





	        syncwrite_mover_servos(ids, posiciones, 12);
 80020b6:	1d39      	adds	r1, r7, #4
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	220c      	movs	r2, #12
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc98 	bl	80019f4 <syncwrite_mover_servos>
	        HAL_Delay(0.001);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 fe8b 	bl	8002de0 <HAL_Delay>
  {
 80020ca:	e5d4      	b.n	8001c76 <main+0x6a>
 80020cc:	2000004c 	.word	0x2000004c
 80020d0:	2000045c 	.word	0x2000045c
 80020d4:	20000460 	.word	0x20000460
 80020d8:	44098000 	.word	0x44098000
 80020dc:	20000464 	.word	0x20000464
 80020e0:	20000468 	.word	0x20000468
 80020e4:	43b90000 	.word	0x43b90000
 80020e8:	2000046c 	.word	0x2000046c
 80020ec:	20000470 	.word	0x20000470
 80020f0:	20000474 	.word	0x20000474
 80020f4:	20000478 	.word	0x20000478

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b094      	sub	sp, #80	; 0x50
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2230      	movs	r2, #48	; 0x30
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f009 fbf3 	bl	800b8f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <SystemClock_Config+0xcc>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <SystemClock_Config+0xcc>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	; 0x40
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <SystemClock_Config+0xcc>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <SystemClock_Config+0xd0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <SystemClock_Config+0xd0>)
 8002142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <SystemClock_Config+0xd0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002154:	2301      	movs	r3, #1
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2302      	movs	r3, #2
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002168:	2308      	movs	r3, #8
 800216a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800216c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002172:	2302      	movs	r3, #2
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002176:	2307      	movs	r3, #7
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fac6 	bl	8005710 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800218a:	f000 fa75 	bl	8002678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800219a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800219e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	2105      	movs	r1, #5
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fd27 	bl	8005c00 <HAL_RCC_ClockConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021b8:	f000 fa5e 	bl	8002678 <Error_Handler>
  }
}
 80021bc:	bf00      	nop
 80021be:	3750      	adds	r7, #80	; 0x50
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40007000 	.word	0x40007000

080021cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <MX_SPI1_Init+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_SPI1_Init+0x64>)
 80021d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_SPI1_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_SPI1_Init+0x64>)
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_SPI1_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <MX_SPI1_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_SPI1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_SPI1_Init+0x64>)
 8002218:	220a      	movs	r2, #10
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_SPI1_Init+0x64>)
 800221e:	f003 ff0f 	bl	8006040 <HAL_SPI_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002228:	f000 fa26 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000026c 	.word	0x2000026c
 8002234:	40013000 	.word	0x40013000

08002238 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_UART4_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_UART4_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_UART4_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_UART4_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_UART4_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_UART4_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_UART4_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_UART4_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_UART4_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_UART4_Init+0x4c>)
 8002270:	f003 ff6f 	bl	8006152 <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800227a:	f000 f9fd 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002c4 	.word	0x200002c4
 8002288:	40004c00 	.word	0x40004c00

0800228c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <MX_USART1_UART_Init+0x50>)
 8002294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 8002298:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800229c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_USART1_UART_Init+0x4c>)
 80022c4:	f003 ff45 	bl	8006152 <HAL_UART_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ce:	f000 f9d3 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000030c 	.word	0x2000030c
 80022dc:	40011000 	.word	0x40011000

080022e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_USART2_UART_Init+0x48>)
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <MX_USART2_UART_Init+0x4c>)
 80022e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_USART2_UART_Init+0x48>)
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <MX_USART2_UART_Init+0x50>)
 80022ee:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <MX_USART2_UART_Init+0x48>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_USART2_UART_Init+0x48>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_USART2_UART_Init+0x48>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_USART2_UART_Init+0x48>)
 8002304:	220c      	movs	r2, #12
 8002306:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_USART2_UART_Init+0x48>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_USART2_UART_Init+0x48>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <MX_USART2_UART_Init+0x48>)
 8002316:	f003 ff6c 	bl	80061f2 <HAL_HalfDuplex_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002320:	f000 f9aa 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000354 	.word	0x20000354
 800232c:	40004400 	.word	0x40004400
 8002330:	000f4240 	.word	0x000f4240

08002334 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_USART3_UART_Init+0x48>)
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <MX_USART3_UART_Init+0x4c>)
 800233c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_USART3_UART_Init+0x48>)
 8002340:	4a10      	ldr	r2, [pc, #64]	; (8002384 <MX_USART3_UART_Init+0x50>)
 8002342:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <MX_USART3_UART_Init+0x48>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART3_UART_Init+0x48>)
 800234c:	2200      	movs	r2, #0
 800234e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <MX_USART3_UART_Init+0x48>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART3_UART_Init+0x48>)
 8002358:	220c      	movs	r2, #12
 800235a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <MX_USART3_UART_Init+0x48>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART3_UART_Init+0x48>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <MX_USART3_UART_Init+0x48>)
 800236a:	f003 ff42 	bl	80061f2 <HAL_HalfDuplex_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002374:	f000 f980 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000039c 	.word	0x2000039c
 8002380:	40004800 	.word	0x40004800
 8002384:	000f4240 	.word	0x000f4240

08002388 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <MX_USART6_UART_Init+0x4c>)
 8002390:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 8002394:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <MX_USART6_UART_Init+0x50>)
 8002396:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023ac:	220c      	movs	r2, #12
 80023ae:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <MX_USART6_UART_Init+0x48>)
 80023be:	f003 ff18 	bl	80061f2 <HAL_HalfDuplex_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 80023c8:	f000 f956 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200003e4 	.word	0x200003e4
 80023d4:	40011400 	.word	0x40011400
 80023d8:	000f4240 	.word	0x000f4240

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <MX_GPIO_Init+0x248>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a8a      	ldr	r2, [pc, #552]	; (8002624 <MX_GPIO_Init+0x248>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <MX_GPIO_Init+0x248>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	4b84      	ldr	r3, [pc, #528]	; (8002624 <MX_GPIO_Init+0x248>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a83      	ldr	r2, [pc, #524]	; (8002624 <MX_GPIO_Init+0x248>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <MX_GPIO_Init+0x248>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <MX_GPIO_Init+0x248>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a7c      	ldr	r2, [pc, #496]	; (8002624 <MX_GPIO_Init+0x248>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <MX_GPIO_Init+0x248>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <MX_GPIO_Init+0x248>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <MX_GPIO_Init+0x248>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <MX_GPIO_Init+0x248>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <MX_GPIO_Init+0x248>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <MX_GPIO_Init+0x248>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <MX_GPIO_Init+0x248>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <MX_GPIO_Init+0x248>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <MX_GPIO_Init+0x248>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <MX_GPIO_Init+0x248>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2108      	movs	r1, #8
 800249e:	4862      	ldr	r0, [pc, #392]	; (8002628 <MX_GPIO_Init+0x24c>)
 80024a0:	f001 f802 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2101      	movs	r1, #1
 80024a8:	4860      	ldr	r0, [pc, #384]	; (800262c <MX_GPIO_Init+0x250>)
 80024aa:	f000 fffd 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024ae:	2200      	movs	r2, #0
 80024b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80024b4:	485e      	ldr	r0, [pc, #376]	; (8002630 <MX_GPIO_Init+0x254>)
 80024b6:	f000 fff7 	bl	80034a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80024ba:	2308      	movs	r3, #8
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	4619      	mov	r1, r3
 80024d0:	4855      	ldr	r0, [pc, #340]	; (8002628 <MX_GPIO_Init+0x24c>)
 80024d2:	f000 fe4d 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	484f      	ldr	r0, [pc, #316]	; (800262c <MX_GPIO_Init+0x250>)
 80024ee:	f000 fe3f 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80024f2:	2308      	movs	r3, #8
 80024f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002502:	2305      	movs	r3, #5
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4847      	ldr	r0, [pc, #284]	; (800262c <MX_GPIO_Init+0x250>)
 800250e:	f000 fe2f 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002516:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800251a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	4619      	mov	r1, r3
 8002526:	4843      	ldr	r0, [pc, #268]	; (8002634 <MX_GPIO_Init+0x258>)
 8002528:	f000 fe22 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800252c:	2310      	movs	r3, #16
 800252e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800253c:	2306      	movs	r3, #6
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	483b      	ldr	r0, [pc, #236]	; (8002634 <MX_GPIO_Init+0x258>)
 8002548:	f000 fe12 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800254c:	2304      	movs	r3, #4
 800254e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4836      	ldr	r0, [pc, #216]	; (8002638 <MX_GPIO_Init+0x25c>)
 8002560:	f000 fe06 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002576:	2305      	movs	r3, #5
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	482d      	ldr	r0, [pc, #180]	; (8002638 <MX_GPIO_Init+0x25c>)
 8002582:	f000 fdf5 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002586:	f24f 0310 	movw	r3, #61456	; 0xf010
 800258a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258c:	2301      	movs	r3, #1
 800258e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	4824      	ldr	r0, [pc, #144]	; (8002630 <MX_GPIO_Init+0x254>)
 80025a0:	f000 fde6 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 80025a4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80025a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025b6:	2306      	movs	r3, #6
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	481a      	ldr	r0, [pc, #104]	; (800262c <MX_GPIO_Init+0x250>)
 80025c2:	f000 fdd5 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80025c6:	2320      	movs	r3, #32
 80025c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	4815      	ldr	r0, [pc, #84]	; (8002630 <MX_GPIO_Init+0x254>)
 80025da:	f000 fdc9 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80025de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e4:	2312      	movs	r3, #18
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f0:	2304      	movs	r3, #4
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <MX_GPIO_Init+0x25c>)
 80025fc:	f000 fdb8 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002600:	2302      	movs	r3, #2
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002604:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_GPIO_Init+0x24c>)
 8002616:	f000 fdab 	bl	8003170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800261a:	bf00      	nop
 800261c:	3730      	adds	r7, #48	; 0x30
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40021000 	.word	0x40021000
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400

0800263c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_UART_RxCpltCallback+0x2c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d107      	bne.n	800265e <HAL_UART_RxCpltCallback+0x22>
    {

    	dato_recibido_flag = true;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_UART_RxCpltCallback+0x30>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]

        HAL_UART_Receive_IT(&huart4, (uint8_t *)&dato_uart4, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	4906      	ldr	r1, [pc, #24]	; (8002670 <HAL_UART_RxCpltCallback+0x34>)
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <HAL_UART_RxCpltCallback+0x38>)
 800265a:	f003 fead 	bl	80063b8 <HAL_UART_Receive_IT>
    }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40004c00 	.word	0x40004c00
 800266c:	20000435 	.word	0x20000435
 8002670:	20000434 	.word	0x20000434
 8002674:	200002c4 	.word	0x200002c4

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002680:	e7fe      	b.n	8002680 <Error_Handler+0x8>
	...

08002684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_MspInit+0x4c>)
 8002694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002698:	6453      	str	r3, [r2, #68]	; 0x44
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_MspInit+0x4c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_MspInit+0x4c>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_MspInit+0x4c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026c2:	2007      	movs	r0, #7
 80026c4:	f000 fc80 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_SPI_MspInit+0x84>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d12b      	bne.n	800274e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_SPI_MspInit+0x88>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a17      	ldr	r2, [pc, #92]	; (800275c <HAL_SPI_MspInit+0x88>)
 8002700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_SPI_MspInit+0x88>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_SPI_MspInit+0x88>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_SPI_MspInit+0x88>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_SPI_MspInit+0x88>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800272e:	23e0      	movs	r3, #224	; 0xe0
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800273e:	2305      	movs	r3, #5
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <HAL_SPI_MspInit+0x8c>)
 800274a:	f000 fd11 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40013000 	.word	0x40013000
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b092      	sub	sp, #72	; 0x48
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4aa1      	ldr	r2, [pc, #644]	; (8002a08 <HAL_UART_MspInit+0x2a4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d153      	bne.n	800282e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
 800278a:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a9f      	ldr	r2, [pc, #636]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a6:	4b99      	ldr	r3, [pc, #612]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a98      	ldr	r2, [pc, #608]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c2:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a91      	ldr	r2, [pc, #580]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027da:	2302      	movs	r3, #2
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027ea:	2308      	movs	r3, #8
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027f2:	4619      	mov	r1, r3
 80027f4:	4886      	ldr	r0, [pc, #536]	; (8002a10 <HAL_UART_MspInit+0x2ac>)
 80027f6:	f000 fcbb 	bl	8003170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800280c:	2308      	movs	r3, #8
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002814:	4619      	mov	r1, r3
 8002816:	487f      	ldr	r0, [pc, #508]	; (8002a14 <HAL_UART_MspInit+0x2b0>)
 8002818:	f000 fcaa 	bl	8003170 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	2034      	movs	r0, #52	; 0x34
 8002822:	f000 fbdc 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002826:	2034      	movs	r0, #52	; 0x34
 8002828:	f000 fbf5 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800282c:	e0e8      	b.n	8002a00 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a79      	ldr	r2, [pc, #484]	; (8002a18 <HAL_UART_MspInit+0x2b4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d135      	bne.n	80028a4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6453      	str	r3, [r2, #68]	; 0x44
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	4b6c      	ldr	r3, [pc, #432]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a6b      	ldr	r2, [pc, #428]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002870:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002882:	2307      	movs	r3, #7
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800288a:	4619      	mov	r1, r3
 800288c:	4860      	ldr	r0, [pc, #384]	; (8002a10 <HAL_UART_MspInit+0x2ac>)
 800288e:	f000 fc6f 	bl	8003170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	2025      	movs	r0, #37	; 0x25
 8002898:	f000 fba1 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800289c:	2025      	movs	r0, #37	; 0x25
 800289e:	f000 fbba 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 80028a2:	e0ad      	b.n	8002a00 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_UART_MspInit+0x2b8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d134      	bne.n	8002918 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a55      	ldr	r2, [pc, #340]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028e6:	2304      	movs	r3, #4
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ea:	2312      	movs	r3, #18
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028f6:	2307      	movs	r3, #7
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fe:	4619      	mov	r1, r3
 8002900:	4843      	ldr	r0, [pc, #268]	; (8002a10 <HAL_UART_MspInit+0x2ac>)
 8002902:	f000 fc35 	bl	8003170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2026      	movs	r0, #38	; 0x26
 800290c:	f000 fb67 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002910:	2026      	movs	r0, #38	; 0x26
 8002912:	f000 fb80 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 8002916:	e073      	b.n	8002a00 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a40      	ldr	r2, [pc, #256]	; (8002a20 <HAL_UART_MspInit+0x2bc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d135      	bne.n	800298e <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800295a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002960:	2312      	movs	r3, #18
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800296c:	2307      	movs	r3, #7
 800296e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002974:	4619      	mov	r1, r3
 8002976:	482b      	ldr	r0, [pc, #172]	; (8002a24 <HAL_UART_MspInit+0x2c0>)
 8002978:	f000 fbfa 	bl	8003170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2027      	movs	r0, #39	; 0x27
 8002982:	f000 fb2c 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002986:	2027      	movs	r0, #39	; 0x27
 8002988:	f000 fb45 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 800298c:	e038      	b.n	8002a00 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART6)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_UART_MspInit+0x2c4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d133      	bne.n	8002a00 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6453      	str	r3, [r2, #68]	; 0x44
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_UART_MspInit+0x2a8>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029e0:	2308      	movs	r3, #8
 80029e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e8:	4619      	mov	r1, r3
 80029ea:	480a      	ldr	r0, [pc, #40]	; (8002a14 <HAL_UART_MspInit+0x2b0>)
 80029ec:	f000 fbc0 	bl	8003170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2047      	movs	r0, #71	; 0x47
 80029f6:	f000 faf2 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029fa:	2047      	movs	r0, #71	; 0x47
 80029fc:	f000 fb0b 	bl	8003016 <HAL_NVIC_EnableIRQ>
}
 8002a00:	bf00      	nop
 8002a02:	3748      	adds	r7, #72	; 0x48
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40004c00 	.word	0x40004c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	40004800 	.word	0x40004800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40011400 	.word	0x40011400

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f992 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <USART1_IRQHandler+0x10>)
 8002a86:	f003 fcbd 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000030c 	.word	0x2000030c

08002a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <USART2_IRQHandler+0x10>)
 8002a9a:	f003 fcb3 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000354 	.word	0x20000354

08002aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <USART3_IRQHandler+0x10>)
 8002aae:	f003 fca9 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000039c 	.word	0x2000039c

08002abc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <UART4_IRQHandler+0x10>)
 8002ac2:	f003 fc9f 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200002c4 	.word	0x200002c4

08002ad0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <OTG_FS_IRQHandler+0x10>)
 8002ad6:	f000 ffe1 	bl	8003a9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200008a8 	.word	0x200008a8

08002ae4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <USART6_IRQHandler+0x10>)
 8002aea:	f003 fc8b 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200003e4 	.word	0x200003e4

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_kill>:

int _kill(int pid, int sig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b12:	f008 ff51 	bl	800b9b8 <__errno>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2216      	movs	r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_exit>:

void _exit (int status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3a:	e7fe      	b.n	8002b3a <_exit+0x12>

08002b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e00a      	b.n	8002b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b4e:	f3af 8000 	nop.w
 8002b52:	4601      	mov	r1, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dbf0      	blt.n	8002b4e <_read+0x12>
  }

  return len;
 8002b6c:	687b      	ldr	r3, [r7, #4]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e009      	b.n	8002b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbf1      	blt.n	8002b88 <_write+0x12>
  }
  return len;
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_close>:

int _close(int file)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_isatty>:

int _isatty(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {    errno = ENOMEM;
 8002c48:	f008 feb6 	bl	800b9b8 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20020000 	.word	0x20020000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	200004c4 	.word	0x200004c4
 8002c80:	20000dd8 	.word	0x20000dd8

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cac:	f7ff ffea 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f008 fe75 	bl	800b9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7fe ff97 	bl	8001c0c <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002cec:	0800e19c 	.word	0x0800e19c
  ldr r2, =_sbss
 8002cf0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002cf4:	20000dd4 	.word	0x20000dd4

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f94f 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fca8 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f967 	bl	8003032 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 f92f 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	2000005c 	.word	0x2000005c
 8002d98:	20000064 	.word	0x20000064
 8002d9c:	20000060 	.word	0x20000060

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000064 	.word	0x20000064
 8002dc4:	200004c8 	.word	0x200004c8

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200004c8 	.word	0x200004c8

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000064 	.word	0x20000064

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff feb6 	bl	8002dc8 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d008      	beq.n	800307c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e052      	b.n	8003122 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0216 	bic.w	r2, r2, #22
 800308a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_DMA_Abort+0x62>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0208 	bic.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	e013      	b.n	80030f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ce:	f7ff fe7b 	bl	8002dc8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d90c      	bls.n	80030f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e015      	b.n	8003122 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e4      	bne.n	80030ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	223f      	movs	r2, #63	; 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e00c      	b.n	8003162 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2205      	movs	r2, #5
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e16b      	b.n	8003464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f040 815a 	bne.w	800345e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d005      	beq.n	80031c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d017      	beq.n	8003260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d123      	bne.n	80032b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80b4 	beq.w	800345e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b60      	ldr	r3, [pc, #384]	; (800347c <HAL_GPIO_Init+0x30c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a5f      	ldr	r2, [pc, #380]	; (800347c <HAL_GPIO_Init+0x30c>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_GPIO_Init+0x30c>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003312:	4a5b      	ldr	r2, [pc, #364]	; (8003480 <HAL_GPIO_Init+0x310>)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_GPIO_Init+0x314>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02b      	beq.n	8003396 <HAL_GPIO_Init+0x226>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a51      	ldr	r2, [pc, #324]	; (8003488 <HAL_GPIO_Init+0x318>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d025      	beq.n	8003392 <HAL_GPIO_Init+0x222>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_GPIO_Init+0x31c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x21e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4f      	ldr	r2, [pc, #316]	; (8003490 <HAL_GPIO_Init+0x320>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x21a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4e      	ldr	r2, [pc, #312]	; (8003494 <HAL_GPIO_Init+0x324>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x216>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_GPIO_Init+0x328>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x212>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4c      	ldr	r2, [pc, #304]	; (800349c <HAL_GPIO_Init+0x32c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x20e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4b      	ldr	r2, [pc, #300]	; (80034a0 <HAL_GPIO_Init+0x330>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x20a>
 8003376:	2307      	movs	r3, #7
 8003378:	e00e      	b.n	8003398 <HAL_GPIO_Init+0x228>
 800337a:	2308      	movs	r3, #8
 800337c:	e00c      	b.n	8003398 <HAL_GPIO_Init+0x228>
 800337e:	2306      	movs	r3, #6
 8003380:	e00a      	b.n	8003398 <HAL_GPIO_Init+0x228>
 8003382:	2305      	movs	r3, #5
 8003384:	e008      	b.n	8003398 <HAL_GPIO_Init+0x228>
 8003386:	2304      	movs	r3, #4
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x228>
 800338a:	2303      	movs	r3, #3
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x228>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x228>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x228>
 8003396:	2300      	movs	r3, #0
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f002 0203 	and.w	r2, r2, #3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4093      	lsls	r3, r2
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a8:	4935      	ldr	r1, [pc, #212]	; (8003480 <HAL_GPIO_Init+0x310>)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_GPIO_Init+0x334>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033da:	4a32      	ldr	r2, [pc, #200]	; (80034a4 <HAL_GPIO_Init+0x334>)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e0:	4b30      	ldr	r3, [pc, #192]	; (80034a4 <HAL_GPIO_Init+0x334>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_GPIO_Init+0x334>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <HAL_GPIO_Init+0x334>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_GPIO_Init+0x334>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_GPIO_Init+0x334>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003458:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <HAL_GPIO_Init+0x334>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f67f ae90 	bls.w	800318c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40013800 	.word	0x40013800
 8003484:	40020000 	.word	0x40020000
 8003488:	40020400 	.word	0x40020400
 800348c:	40020800 	.word	0x40020800
 8003490:	40020c00 	.word	0x40020c00
 8003494:	40021000 	.word	0x40021000
 8003498:	40021400 	.word	0x40021400
 800349c:	40021800 	.word	0x40021800
 80034a0:	40021c00 	.word	0x40021c00
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af02      	add	r7, sp, #8
 80034e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e059      	b.n	80035a0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f007 f92e 	bl	800a768 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351a:	d102      	bne.n	8003522 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f003 ff37 	bl	800739a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7c1a      	ldrb	r2, [r3, #16]
 8003534:	f88d 2000 	strb.w	r2, [sp]
 8003538:	3304      	adds	r3, #4
 800353a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353c:	f003 feb8 	bl	80072b0 <USB_CoreInit>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e026      	b.n	80035a0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f003 ff2f 	bl	80073bc <USB_SetCurrentMode>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e017      	b.n	80035a0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7c1a      	ldrb	r2, [r3, #16]
 8003578:	f88d 2000 	strb.w	r2, [sp]
 800357c:	3304      	adds	r3, #4
 800357e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003580:	f004 f8d2 	bl	8007728 <USB_HostInit>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e004      	b.n	80035a0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af04      	add	r7, sp, #16
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	70fb      	strb	r3, [r7, #3]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70bb      	strb	r3, [r7, #2]
 80035be:	4613      	mov	r3, r2
 80035c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80035c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80035c4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_HCD_HC_Init+0x2c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e09d      	b.n	8003710 <HAL_HCD_HC_Init+0x168>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3319      	adds	r3, #25
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3314      	adds	r3, #20
 8003600:	787a      	ldrb	r2, [r7, #1]
 8003602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3315      	adds	r3, #21
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	; 0x26
 8003628:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800362c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	78bb      	ldrb	r3, [r7, #2]
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	b2d8      	uxtb	r0, r3
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3316      	adds	r3, #22
 8003646:	4602      	mov	r2, r0
 8003648:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fbc8 	bl	8003de4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003654:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da0a      	bge.n	8003672 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3317      	adds	r3, #23
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e009      	b.n	8003686 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3317      	adds	r3, #23
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f004 f9b0 	bl	80079f0 <USB_GetHostSpeed>
 8003690:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10b      	bne.n	80036b2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800369a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_HCD_HC_Init+0x10a>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d104      	bne.n	80036b2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2bbc      	cmp	r3, #188	; 0xbc
 80036ac:	d901      	bls.n	80036b2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036ae:	23bc      	movs	r3, #188	; 0xbc
 80036b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3318      	adds	r3, #24
 80036c2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80036c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	b298      	uxth	r0, r3
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3328      	adds	r3, #40	; 0x28
 80036dc:	4602      	mov	r2, r0
 80036de:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	787c      	ldrb	r4, [r7, #1]
 80036ea:	78ba      	ldrb	r2, [r7, #2]
 80036ec:	78f9      	ldrb	r1, [r7, #3]
 80036ee:	9302      	str	r3, [sp, #8]
 80036f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4623      	mov	r3, r4
 80036fe:	f004 f99f 	bl	8007a40 <USB_HC_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_HCD_HC_Halt+0x1e>
 8003732:	2302      	movs	r3, #2
 8003734:	e00f      	b.n	8003756 <HAL_HCD_HC_Halt+0x3e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f004 fd31 	bl	80081ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	70fb      	strb	r3, [r7, #3]
 8003772:	460b      	mov	r3, r1
 8003774:	70bb      	strb	r3, [r7, #2]
 8003776:	4613      	mov	r3, r2
 8003778:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3317      	adds	r3, #23
 800378a:	78ba      	ldrb	r2, [r7, #2]
 800378c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3326      	adds	r3, #38	; 0x26
 800379e:	787a      	ldrb	r2, [r7, #1]
 80037a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037a2:	7c3b      	ldrb	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d114      	bne.n	80037d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	332a      	adds	r3, #42	; 0x2a
 80037b8:	2203      	movs	r2, #3
 80037ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3319      	adds	r3, #25
 80037cc:	7f3a      	ldrb	r2, [r7, #28]
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e009      	b.n	80037e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	332a      	adds	r3, #42	; 0x2a
 80037e2:	2202      	movs	r2, #2
 80037e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037e6:	787b      	ldrb	r3, [r7, #1]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	f200 8102 	bhi.w	80039f2 <HAL_HCD_HC_SubmitRequest+0x292>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003805 	.word	0x08003805
 80037f8:	080039dd 	.word	0x080039dd
 80037fc:	080038c9 	.word	0x080038c9
 8003800:	08003953 	.word	0x08003953
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003804:	7c3b      	ldrb	r3, [r7, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 80f5 	bne.w	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800380c:	78bb      	ldrb	r3, [r7, #2]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d12d      	bne.n	800386e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003812:	8b3b      	ldrh	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	333d      	adds	r3, #61	; 0x3d
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	333d      	adds	r3, #61	; 0x3d
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	332a      	adds	r3, #42	; 0x2a
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003856:	e0ce      	b.n	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	332a      	adds	r3, #42	; 0x2a
 8003868:	2202      	movs	r2, #2
 800386a:	701a      	strb	r2, [r3, #0]
      break;
 800386c:	e0c3      	b.n	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	331a      	adds	r3, #26
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 80b8 	bne.w	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	333c      	adds	r3, #60	; 0x3c
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	332a      	adds	r3, #42	; 0x2a
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
      break;
 80038b0:	e0a1      	b.n	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	332a      	adds	r3, #42	; 0x2a
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
      break;
 80038c6:	e096      	b.n	80039f6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038c8:	78bb      	ldrb	r3, [r7, #2]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d120      	bne.n	8003910 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	333d      	adds	r3, #61	; 0x3d
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	332a      	adds	r3, #42	; 0x2a
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038f8:	e07e      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	332a      	adds	r3, #42	; 0x2a
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e073      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	333c      	adds	r3, #60	; 0x3c
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	332a      	adds	r3, #42	; 0x2a
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
      break;
 800393a:	e05d      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	332a      	adds	r3, #42	; 0x2a
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
      break;
 8003950:	e052      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003952:	78bb      	ldrb	r3, [r7, #2]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d120      	bne.n	800399a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	333d      	adds	r3, #61	; 0x3d
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	332a      	adds	r3, #42	; 0x2a
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003982:	e039      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	332a      	adds	r3, #42	; 0x2a
 8003994:	2202      	movs	r2, #2
 8003996:	701a      	strb	r2, [r3, #0]
      break;
 8003998:	e02e      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	333c      	adds	r3, #60	; 0x3c
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	332a      	adds	r3, #42	; 0x2a
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
      break;
 80039c4:	e018      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	332a      	adds	r3, #42	; 0x2a
 80039d6:	2202      	movs	r2, #2
 80039d8:	701a      	strb	r2, [r3, #0]
      break;
 80039da:	e00d      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	332a      	adds	r3, #42	; 0x2a
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
      break;
 80039f0:	e002      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80039f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	332c      	adds	r3, #44	; 0x2c
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	8b39      	ldrh	r1, [r7, #24]
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4403      	add	r3, r0
 8003a1c:	3334      	adds	r3, #52	; 0x34
 8003a1e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	334c      	adds	r3, #76	; 0x4c
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3338      	adds	r3, #56	; 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3315      	adds	r3, #21
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	334d      	adds	r3, #77	; 0x4d
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	1d19      	adds	r1, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	799b      	ldrb	r3, [r3, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f004 f904 	bl	8007c98 <USB_HC_StartXfer>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop

08003a9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fdf8 	bl	80076a8 <USB_GetMode>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f040 80fb 	bne.w	8003cb6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fdbb 	bl	8007640 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80f1 	beq.w	8003cb4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fdb2 	bl	8007640 <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae6:	d104      	bne.n	8003af2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fda2 	bl	8007640 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b06:	d104      	bne.n	8003b12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fd92 	bl	8007640 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b26:	d104      	bne.n	8003b32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fd82 	bl	8007640 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d103      	bne.n	8003b4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f003 fd74 	bl	8007640 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d120      	bne.n	8003ba6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d113      	bne.n	8003ba6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b7e:	2110      	movs	r1, #16
 8003b80:	6938      	ldr	r0, [r7, #16]
 8003b82:	f003 fc67 	bl	8007454 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b86:	6938      	ldr	r0, [r7, #16]
 8003b88:	f003 fc96 	bl	80074b8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7a5b      	ldrb	r3, [r3, #9]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d105      	bne.n	8003ba0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 fe88 	bl	80078b0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f006 fe51 	bl	800a848 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fd48 	bl	8007640 <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bba:	d102      	bne.n	8003bc2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f001 fd33 	bl	8005628 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fd3a 	bl	8007640 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d106      	bne.n	8003be4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f006 fe1a 	bl	800a810 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fd29 	bl	8007640 <USB_ReadInterrupts>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf8:	d139      	bne.n	8003c6e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fac4 	bl	800818c <USB_HC_ReadInterrupt>
 8003c04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e025      	b.n	8003c58 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d018      	beq.n	8003c52 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c36:	d106      	bne.n	8003c46 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f905 	bl	8003e4e <HCD_HC_IN_IRQHandler>
 8003c44:	e005      	b.n	8003c52 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 ff67 	bl	8004b20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	3301      	adds	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	795b      	ldrb	r3, [r3, #5]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d3d3      	bcc.n	8003c0c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fce4 	bl	8007640 <USB_ReadInterrupts>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d101      	bne.n	8003c86 <HAL_HCD_IRQHandler+0x1ea>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_HCD_IRQHandler+0x1ec>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d014      	beq.n	8003cb6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0210 	bic.w	r2, r2, #16
 8003c9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 fbe4 	bl	800546a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0210 	orr.w	r2, r2, #16
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	e000      	b.n	8003cb6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cb4:	bf00      	nop
    }
  }
}
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_HCD_Start+0x16>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e013      	b.n	8003cfa <HAL_HCD_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fe4c 	bl	800797e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f003 fb44 	bl	8007378 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_HCD_Stop+0x16>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e00d      	b.n	8003d34 <HAL_HCD_Stop+0x32>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fb9f 	bl	8008468 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fdee 	bl	800792a <USB_ResetPort>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	781b      	ldrb	r3, [r3, #0]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3338      	adds	r3, #56	; 0x38
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 fe30 	bl	8007a1e <USB_GetCurrentFrame>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fe0b 	bl	80079f0 <USB_GetHostSpeed>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	331a      	adds	r3, #26
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	331b      	adds	r3, #27
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3325      	adds	r3, #37	; 0x25
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 fbfa 	bl	8007666 <USB_ReadChInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d11a      	bne.n	8003eb2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334d      	adds	r3, #77	; 0x4d
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 f97f 	bl	80081ae <USB_HC_Halt>
 8003eb0:	e09e      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 fbd3 	bl	8007666 <USB_ReadChInterrupts>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d11b      	bne.n	8003f04 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ede:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	334d      	adds	r3, #77	; 0x4d
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 f956 	bl	80081ae <USB_HC_Halt>
 8003f02:	e075      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fbaa 	bl	8007666 <USB_ReadChInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d11a      	bne.n	8003f52 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334d      	adds	r3, #77	; 0x4d
 8003f3e:	2206      	movs	r2, #6
 8003f40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 f92f 	bl	80081ae <USB_HC_Halt>
 8003f50:	e04e      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 fb83 	bl	8007666 <USB_ReadChInterrupts>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d11b      	bne.n	8003fa4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	334d      	adds	r3, #77	; 0x4d
 8003f90:	2209      	movs	r2, #9
 8003f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f004 f906 	bl	80081ae <USB_HC_Halt>
 8003fa2:	e025      	b.n	8003ff0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 fb5a 	bl	8007666 <USB_ReadChInterrupts>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d119      	bne.n	8003ff0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	334d      	adds	r3, #77	; 0x4d
 8003fde:	2207      	movs	r2, #7
 8003fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 f8df 	bl	80081ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f003 fb34 	bl	8007666 <USB_ReadChInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d112      	bne.n	8004030 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f004 f8cb 	bl	80081ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	461a      	mov	r2, r3
 8004026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800402a:	6093      	str	r3, [r2, #8]
 800402c:	f000 bd75 	b.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f003 fb14 	bl	8007666 <USB_ReadChInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8128 	bne.w	800429a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2320      	movs	r3, #32
 800405a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	331b      	adds	r3, #27
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d119      	bne.n	80040a6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	331b      	adds	r3, #27
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	440a      	add	r2, r1
 800409c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	799b      	ldrb	r3, [r3, #6]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3330      	adds	r3, #48	; 0x30
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	1ac9      	subs	r1, r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4403      	add	r3, r0
 80040e2:	3338      	adds	r3, #56	; 0x38
 80040e4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334d      	adds	r3, #77	; 0x4d
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3344      	adds	r3, #68	; 0x44
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	461a      	mov	r2, r3
 800411c:	2301      	movs	r3, #1
 800411e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3326      	adds	r3, #38	; 0x26
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	3326      	adds	r3, #38	; 0x26
 8004146:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004148:	2b02      	cmp	r3, #2
 800414a:	d110      	bne.n	800416e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f004 f82a 	bl	80081ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2310      	movs	r3, #16
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	e03d      	b.n	80041ea <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3326      	adds	r3, #38	; 0x26
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d00a      	beq.n	800419a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	3326      	adds	r3, #38	; 0x26
 8004194:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004196:	2b01      	cmp	r3, #1
 8004198:	d127      	bne.n	80041ea <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	334c      	adds	r3, #76	; 0x4c
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334c      	adds	r3, #76	; 0x4c
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f006 fb3d 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d13b      	bne.n	800426a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3338      	adds	r3, #56	; 0x38
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4403      	add	r3, r0
 8004212:	3328      	adds	r3, #40	; 0x28
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	440b      	add	r3, r1
 8004218:	1e59      	subs	r1, r3, #1
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4403      	add	r3, r0
 8004228:	3328      	adds	r3, #40	; 0x28
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8470 	beq.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	333c      	adds	r3, #60	; 0x3c
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	f083 0301 	eor.w	r3, r3, #1
 8004252:	b2d8      	uxtb	r0, r3
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	333c      	adds	r3, #60	; 0x3c
 8004262:	4602      	mov	r2, r0
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	f000 bc58 	b.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	333c      	adds	r3, #60	; 0x3c
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	f083 0301 	eor.w	r3, r3, #1
 8004282:	b2d8      	uxtb	r0, r3
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	333c      	adds	r3, #60	; 0x3c
 8004292:	4602      	mov	r2, r0
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	f000 bc40 	b.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f9df 	bl	8007666 <USB_ReadChInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d131      	bne.n	8004316 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	2320      	movs	r3, #32
 80042c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	331a      	adds	r3, #26
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	f040 841f 	bne.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	331b      	adds	r3, #27
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	334d      	adds	r3, #77	; 0x4d
 8004300:	2203      	movs	r2, #3
 8004302:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f003 ff4e 	bl	80081ae <USB_HC_Halt>
 8004312:	f000 bc02 	b.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f003 f9a1 	bl	8007666 <USB_ReadChInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	f040 8305 	bne.w	800493a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	461a      	mov	r2, r3
 800433e:	2302      	movs	r3, #2
 8004340:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	334d      	adds	r3, #77	; 0x4d
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d114      	bne.n	8004382 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	334d      	adds	r3, #77	; 0x4d
 8004368:	2202      	movs	r2, #2
 800436a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334c      	adds	r3, #76	; 0x4c
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e2cc      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	; 0x4d
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b06      	cmp	r3, #6
 8004396:	d114      	bne.n	80043c2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334d      	adds	r3, #77	; 0x4d
 80043a8:	2202      	movs	r2, #2
 80043aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334c      	adds	r3, #76	; 0x4c
 80043bc:	2205      	movs	r2, #5
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e2ac      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334d      	adds	r3, #77	; 0x4d
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b07      	cmp	r3, #7
 80043d6:	d00b      	beq.n	80043f0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	334d      	adds	r3, #77	; 0x4d
 80043e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	f040 80a6 	bne.w	800453c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	334d      	adds	r3, #77	; 0x4d
 8004400:	2202      	movs	r2, #2
 8004402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3344      	adds	r3, #68	; 0x44
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	1c59      	adds	r1, r3, #1
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4403      	add	r3, r0
 8004424:	3344      	adds	r3, #68	; 0x44
 8004426:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3344      	adds	r3, #68	; 0x44
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d943      	bls.n	80044c6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3344      	adds	r3, #68	; 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	331a      	adds	r3, #26
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d123      	bne.n	80044b0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	331b      	adds	r3, #27
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	331c      	adds	r3, #28
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ae:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334c      	adds	r3, #76	; 0x4c
 80044c0:	2204      	movs	r2, #4
 80044c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c4:	e229      	b.n	800491a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	334c      	adds	r3, #76	; 0x4c
 80044d6:	2202      	movs	r2, #2
 80044d8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3326      	adds	r3, #38	; 0x26
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3326      	adds	r3, #38	; 0x26
 8004500:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004502:	2b02      	cmp	r3, #2
 8004504:	f040 8209 	bne.w	800491a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800451e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004526:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	461a      	mov	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800453a:	e1ee      	b.n	800491a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	334d      	adds	r3, #77	; 0x4d
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b05      	cmp	r3, #5
 8004550:	f040 80c8 	bne.w	80046e4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	334d      	adds	r3, #77	; 0x4d
 8004564:	2202      	movs	r2, #2
 8004566:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	331b      	adds	r3, #27
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	f040 81ce 	bne.w	800491c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3326      	adds	r3, #38	; 0x26
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d16b      	bne.n	800466e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3348      	adds	r3, #72	; 0x48
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4403      	add	r3, r0
 80045b6:	3348      	adds	r3, #72	; 0x48
 80045b8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3348      	adds	r3, #72	; 0x48
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d943      	bls.n	8004658 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3348      	adds	r3, #72	; 0x48
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	331b      	adds	r3, #27
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	3344      	adds	r3, #68	; 0x44
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d809      	bhi.n	8004622 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	331c      	adds	r3, #28
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	334c      	adds	r3, #76	; 0x4c
 8004652:	2204      	movs	r2, #4
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e014      	b.n	8004682 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334c      	adds	r3, #76	; 0x4c
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e009      	b.n	8004682 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	334c      	adds	r3, #76	; 0x4c
 800467e:	2202      	movs	r2, #2
 8004680:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3326      	adds	r3, #38	; 0x26
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3326      	adds	r3, #38	; 0x26
 80046a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	f040 8136 	bne.w	800491c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	461a      	mov	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e11b      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	334d      	adds	r3, #77	; 0x4d
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	f040 8081 	bne.w	80047fe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	334d      	adds	r3, #77	; 0x4d
 800470c:	2202      	movs	r2, #2
 800470e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	331b      	adds	r3, #27
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	f040 80fa 	bne.w	800491c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334c      	adds	r3, #76	; 0x4c
 8004738:	2202      	movs	r2, #2
 800473a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	440a      	add	r2, r1
 8004752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	440a      	add	r2, r1
 8004772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	440a      	add	r2, r1
 8004792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004796:	f023 0320 	bic.w	r3, r3, #32
 800479a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	3326      	adds	r3, #38	; 0x26
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3326      	adds	r3, #38	; 0x26
 80047c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f040 80a9 	bne.w	800491c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e08e      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	334d      	adds	r3, #77	; 0x4d
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d143      	bne.n	800489c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	334d      	adds	r3, #77	; 0x4d
 8004824:	2202      	movs	r2, #2
 8004826:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	334c      	adds	r3, #76	; 0x4c
 8004838:	2202      	movs	r2, #2
 800483a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	3326      	adds	r3, #38	; 0x26
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3326      	adds	r3, #38	; 0x26
 8004862:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004864:	2b02      	cmp	r3, #2
 8004866:	d159      	bne.n	800491c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800487e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004886:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	461a      	mov	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e03f      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	334d      	adds	r3, #77	; 0x4d
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d126      	bne.n	8004900 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	334d      	adds	r3, #77	; 0x4d
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3344      	adds	r3, #68	; 0x44
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4403      	add	r3, r0
 80048e6:	3344      	adds	r3, #68	; 0x44
 80048e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	334c      	adds	r3, #76	; 0x4c
 80048fa:	2204      	movs	r2, #4
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e00d      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	334d      	adds	r3, #77	; 0x4d
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	f000 8100 	beq.w	8004b18 <HCD_HC_IN_IRQHandler+0xcca>
 8004918:	e000      	b.n	800491c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800491a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	334c      	adds	r3, #76	; 0x4c
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f005 ff96 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004938:	e0ef      	b.n	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f002 fe8f 	bl	8007666 <USB_ReadChInterrupts>
 8004948:	4603      	mov	r3, r0
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d12f      	bne.n	80049b2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	334d      	adds	r3, #77	; 0x4d
 8004974:	2205      	movs	r2, #5
 8004976:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	331a      	adds	r3, #26
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3344      	adds	r3, #68	; 0x44
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f003 fbff 	bl	80081ae <USB_HC_Halt>
 80049b0:	e0b3      	b.n	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f002 fe53 	bl	8007666 <USB_ReadChInterrupts>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	f040 80a7 	bne.w	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	3326      	adds	r3, #38	; 0x26
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d11b      	bne.n	8004a1a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	3344      	adds	r3, #68	; 0x44
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334d      	adds	r3, #77	; 0x4d
 8004a06:	2204      	movs	r2, #4
 8004a08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fbcb 	bl	80081ae <USB_HC_Halt>
 8004a18:	e03f      	b.n	8004a9a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3326      	adds	r3, #38	; 0x26
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3326      	adds	r3, #38	; 0x26
 8004a40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d129      	bne.n	8004a9a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3344      	adds	r3, #68	; 0x44
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	799b      	ldrb	r3, [r3, #6]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HCD_HC_IN_IRQHandler+0xc2a>
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	331b      	adds	r3, #27
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d110      	bne.n	8004a9a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	334d      	adds	r3, #77	; 0x4d
 8004a88:	2204      	movs	r2, #4
 8004a8a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 fb8a 	bl	80081ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	331b      	adds	r3, #27
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d129      	bne.n	8004b04 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	331b      	adds	r3, #27
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afe:	f043 0320 	orr.w	r3, r3, #32
 8004b02:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	2310      	movs	r3, #16
 8004b14:	6093      	str	r3, [r2, #8]
 8004b16:	e000      	b.n	8004b1a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b18:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f002 fd91 	bl	8007666 <USB_ReadChInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d11b      	bne.n	8004b86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	334d      	adds	r3, #77	; 0x4d
 8004b70:	2207      	movs	r2, #7
 8004b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 fb16 	bl	80081ae <USB_HC_Halt>
 8004b82:	f000 bc6f 	b.w	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 fd69 	bl	8007666 <USB_ReadChInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	f040 8082 	bne.w	8004ca4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	2320      	movs	r3, #32
 8004bb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3319      	adds	r3, #25
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d124      	bne.n	8004c12 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3319      	adds	r3, #25
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	334c      	adds	r3, #76	; 0x4c
 8004bec:	2202      	movs	r2, #2
 8004bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	334d      	adds	r3, #77	; 0x4d
 8004c00:	2203      	movs	r2, #3
 8004c02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f003 face 	bl	80081ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	331a      	adds	r3, #26
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 841d 	bne.w	8005464 <HCD_HC_OUT_IRQHandler+0x944>
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	331b      	adds	r3, #27
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 8411 	bne.w	8005464 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3326      	adds	r3, #38	; 0x26
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d009      	beq.n	8004c6c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	331b      	adds	r3, #27
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	334d      	adds	r3, #77	; 0x4d
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f003 fa90 	bl	80081ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3344      	adds	r3, #68	; 0x44
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e3df      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 fcda 	bl	8007666 <USB_ReadChInterrupts>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbc:	d111      	bne.n	8004ce2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fa67 	bl	80081ae <USB_HC_Halt>
 8004ce0:	e3c0      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f002 fcbb 	bl	8007666 <USB_ReadChInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d168      	bne.n	8004dcc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3344      	adds	r3, #68	; 0x44
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fca5 	bl	8007666 <USB_ReadChInterrupts>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d112      	bne.n	8004d4c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3319      	adds	r3, #25
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d46:	461a      	mov	r2, r3
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	331b      	adds	r3, #27
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d019      	beq.n	8004d96 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	331b      	adds	r3, #27
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	461a      	mov	r2, r3
 8004da4:	2301      	movs	r3, #1
 8004da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	334d      	adds	r3, #77	; 0x4d
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 f9f2 	bl	80081ae <USB_HC_Halt>
 8004dca:	e34b      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 fc46 	bl	8007666 <USB_ReadChInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d139      	bne.n	8004e58 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	334d      	adds	r3, #77	; 0x4d
 8004df4:	2205      	movs	r2, #5
 8004df6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	331a      	adds	r3, #26
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3319      	adds	r3, #25
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3344      	adds	r3, #68	; 0x44
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f003 f9b5 	bl	80081ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	6093      	str	r3, [r2, #8]
 8004e56:	e305      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f002 fc00 	bl	8007666 <USB_ReadChInterrupts>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d11a      	bne.n	8004ea6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2308      	movs	r3, #8
 8004e80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	334d      	adds	r3, #77	; 0x4d
 8004e92:	2206      	movs	r2, #6
 8004e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 f985 	bl	80081ae <USB_HC_Halt>
 8004ea4:	e2de      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 fbd9 	bl	8007666 <USB_ReadChInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d144      	bne.n	8004f48 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3344      	adds	r3, #68	; 0x44
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	334d      	adds	r3, #77	; 0x4d
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3319      	adds	r3, #25
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d114      	bne.n	8004f26 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3319      	adds	r3, #25
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 f93d 	bl	80081ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	2310      	movs	r3, #16
 8004f44:	6093      	str	r3, [r2, #8]
 8004f46:	e28d      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fb88 	bl	8007666 <USB_ReadChInterrupts>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d169      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	799b      	ldrb	r3, [r3, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d111      	bne.n	8004f8c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	334d      	adds	r3, #77	; 0x4d
 8004f78:	2207      	movs	r2, #7
 8004f7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 f912 	bl	80081ae <USB_HC_Halt>
 8004f8a:	e049      	b.n	8005020 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	3344      	adds	r3, #68	; 0x44
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4403      	add	r3, r0
 8004fac:	3344      	adds	r3, #68	; 0x44
 8004fae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3344      	adds	r3, #68	; 0x44
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d922      	bls.n	800500c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3344      	adds	r3, #68	; 0x44
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334c      	adds	r3, #76	; 0x4c
 8004fea:	2204      	movs	r2, #4
 8004fec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	334c      	adds	r3, #76	; 0x4c
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f005 fc2d 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 800500a:	e009      	b.n	8005020 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	334c      	adds	r3, #76	; 0x4c
 800501c:	2202      	movs	r2, #2
 800501e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	461a      	mov	r2, r3
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	6093      	str	r3, [r2, #8]
 8005032:	e217      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f002 fb12 	bl	8007666 <USB_ReadChInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d11b      	bne.n	8005086 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	334d      	adds	r3, #77	; 0x4d
 800505e:	2209      	movs	r2, #9
 8005060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f003 f89f 	bl	80081ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507c:	461a      	mov	r2, r3
 800507e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005082:	6093      	str	r3, [r2, #8]
 8005084:	e1ee      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f002 fae9 	bl	8007666 <USB_ReadChInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	f040 81df 	bne.w	800545e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	461a      	mov	r2, r3
 80050ae:	2302      	movs	r3, #2
 80050b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	334d      	adds	r3, #77	; 0x4d
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 8093 	bne.w	80051f0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	334d      	adds	r3, #77	; 0x4d
 80050da:	2202      	movs	r2, #2
 80050dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	334c      	adds	r3, #76	; 0x4c
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3326      	adds	r3, #38	; 0x26
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d00b      	beq.n	8005120 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3326      	adds	r3, #38	; 0x26
 8005118:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800511a:	2b03      	cmp	r3, #3
 800511c:	f040 8190 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	799b      	ldrb	r3, [r3, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	333d      	adds	r3, #61	; 0x3d
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	f083 0301 	eor.w	r3, r3, #1
 8005140:	b2d8      	uxtb	r0, r3
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	333d      	adds	r3, #61	; 0x3d
 8005150:	4602      	mov	r2, r0
 8005152:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	799b      	ldrb	r3, [r3, #6]
 8005158:	2b01      	cmp	r3, #1
 800515a:	f040 8171 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3334      	adds	r3, #52	; 0x34
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8165 	beq.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	3334      	adds	r3, #52	; 0x34
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4403      	add	r3, r0
 8005196:	3328      	adds	r3, #40	; 0x28
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	440b      	add	r3, r1
 800519c:	1e59      	subs	r1, r3, #1
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4403      	add	r3, r0
 80051ac:	3328      	adds	r3, #40	; 0x28
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 813f 	beq.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	333d      	adds	r3, #61	; 0x3d
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	f083 0301 	eor.w	r3, r3, #1
 80051da:	b2d8      	uxtb	r0, r3
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	333d      	adds	r3, #61	; 0x3d
 80051ea:	4602      	mov	r2, r0
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e127      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	334d      	adds	r3, #77	; 0x4d
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d120      	bne.n	8005248 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	334d      	adds	r3, #77	; 0x4d
 8005216:	2202      	movs	r2, #2
 8005218:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	331b      	adds	r3, #27
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 8107 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	334c      	adds	r3, #76	; 0x4c
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e0fb      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	334d      	adds	r3, #77	; 0x4d
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d13a      	bne.n	80052d4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	334d      	adds	r3, #77	; 0x4d
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	334c      	adds	r3, #76	; 0x4c
 8005282:	2202      	movs	r2, #2
 8005284:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	331b      	adds	r3, #27
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	f040 80d1 	bne.w	8005440 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	331b      	adds	r3, #27
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	e0b5      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	334d      	adds	r3, #77	; 0x4d
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d114      	bne.n	8005314 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	334d      	adds	r3, #77	; 0x4d
 80052fa:	2202      	movs	r2, #2
 80052fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	334c      	adds	r3, #76	; 0x4c
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e095      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	334d      	adds	r3, #77	; 0x4d
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b06      	cmp	r3, #6
 8005328:	d114      	bne.n	8005354 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	334d      	adds	r3, #77	; 0x4d
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	334c      	adds	r3, #76	; 0x4c
 800534e:	2205      	movs	r2, #5
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e075      	b.n	8005440 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	334d      	adds	r3, #77	; 0x4d
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b07      	cmp	r3, #7
 8005368:	d00a      	beq.n	8005380 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334d      	adds	r3, #77	; 0x4d
 800537a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800537c:	2b09      	cmp	r3, #9
 800537e:	d170      	bne.n	8005462 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	334d      	adds	r3, #77	; 0x4d
 8005390:	2202      	movs	r2, #2
 8005392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3344      	adds	r3, #68	; 0x44
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4403      	add	r3, r0
 80053b4:	3344      	adds	r3, #68	; 0x44
 80053b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3344      	adds	r3, #68	; 0x44
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d914      	bls.n	80053f8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3344      	adds	r3, #68	; 0x44
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	334c      	adds	r3, #76	; 0x4c
 80053f2:	2204      	movs	r2, #4
 80053f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053f6:	e022      	b.n	800543e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	334c      	adds	r3, #76	; 0x4c
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005422:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	461a      	mov	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800543e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	334c      	adds	r3, #76	; 0x4c
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f005 fa04 	bl	800a864 <HAL_HCD_HC_NotifyURBChange_Callback>
 800545c:	e002      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005462:	bf00      	nop
  }
}
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b08a      	sub	sp, #40	; 0x28
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	0c5b      	lsrs	r3, r3, #17
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800549e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d004      	beq.n	80054b0 <HCD_RXQLVL_IRQHandler+0x46>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	f000 80b6 	beq.w	800561a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054ae:	e0b7      	b.n	8005620 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80b3 	beq.w	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4613      	mov	r3, r2
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	332c      	adds	r3, #44	; 0x2c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80a7 	beq.w	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3338      	adds	r3, #56	; 0x38
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	18d1      	adds	r1, r2, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	3334      	adds	r3, #52	; 0x34
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4299      	cmp	r1, r3
 80054fa:	f200 8083 	bhi.w	8005604 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4613      	mov	r3, r2
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	332c      	adds	r3, #44	; 0x2c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	b292      	uxth	r2, r2
 8005518:	4619      	mov	r1, r3
 800551a:	f002 f839 	bl	8007590 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	332c      	adds	r3, #44	; 0x2c
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	18d1      	adds	r1, r2, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4613      	mov	r3, r2
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4403      	add	r3, r0
 8005542:	332c      	adds	r3, #44	; 0x2c
 8005544:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3338      	adds	r3, #56	; 0x38
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	18d1      	adds	r1, r2, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4613      	mov	r3, r2
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4403      	add	r3, r0
 800556a:	3338      	adds	r3, #56	; 0x38
 800556c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	0cdb      	lsrs	r3, r3, #19
 800557e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005582:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	3328      	adds	r3, #40	; 0x28
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4293      	cmp	r3, r2
 800559c:	d13f      	bne.n	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03c      	beq.n	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	333c      	adds	r3, #60	; 0x3c
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b2d8      	uxtb	r0, r3
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	333c      	adds	r3, #60	; 0x3c
 80055fe:	4602      	mov	r2, r0
 8005600:	701a      	strb	r2, [r3, #0]
      break;
 8005602:	e00c      	b.n	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334c      	adds	r3, #76	; 0x4c
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]
      break;
 8005618:	e001      	b.n	800561e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800561e:	bf00      	nop
  }
}
 8005620:	bf00      	nop
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005654:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d10b      	bne.n	8005678 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f005 f8de 	bl	800a82c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f043 0302 	orr.w	r3, r3, #2
 8005676:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b08      	cmp	r3, #8
 8005680:	d132      	bne.n	80056e8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0308 	orr.w	r3, r3, #8
 8005688:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d126      	bne.n	80056e2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	7a5b      	ldrb	r3, [r3, #9]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d113      	bne.n	80056c4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80056a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a6:	d106      	bne.n	80056b6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2102      	movs	r1, #2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f002 f8fe 	bl	80078b0 <USB_InitFSLSPClkSel>
 80056b4:	e011      	b.n	80056da <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 f8f7 	bl	80078b0 <USB_InitFSLSPClkSel>
 80056c2:	e00a      	b.n	80056da <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	79db      	ldrb	r3, [r3, #7]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d2:	461a      	mov	r2, r3
 80056d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80056d8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f005 f8d0 	bl	800a880 <HAL_HCD_PortEnabled_Callback>
 80056e0:	e002      	b.n	80056e8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f005 f8da 	bl	800a89c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d103      	bne.n	80056fa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f043 0320 	orr.w	r3, r3, #32
 80056f8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6013      	str	r3, [r2, #0]
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e267      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d075      	beq.n	800581a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800572e:	4b88      	ldr	r3, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b04      	cmp	r3, #4
 8005738:	d00c      	beq.n	8005754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005742:	2b08      	cmp	r3, #8
 8005744:	d112      	bne.n	800576c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005746:	4b82      	ldr	r3, [pc, #520]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d10b      	bne.n	800576c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005754:	4b7e      	ldr	r3, [pc, #504]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05b      	beq.n	8005818 <HAL_RCC_OscConfig+0x108>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d157      	bne.n	8005818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e242      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d106      	bne.n	8005784 <HAL_RCC_OscConfig+0x74>
 8005776:	4b76      	ldr	r3, [pc, #472]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a75      	ldr	r2, [pc, #468]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e01d      	b.n	80057c0 <HAL_RCC_OscConfig+0xb0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x98>
 800578e:	4b70      	ldr	r3, [pc, #448]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a6f      	ldr	r2, [pc, #444]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b6d      	ldr	r3, [pc, #436]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6c      	ldr	r2, [pc, #432]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e00b      	b.n	80057c0 <HAL_RCC_OscConfig+0xb0>
 80057a8:	4b69      	ldr	r3, [pc, #420]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a68      	ldr	r2, [pc, #416]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b66      	ldr	r3, [pc, #408]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a65      	ldr	r2, [pc, #404]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd fafe 	bl	8002dc8 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fd fafa 	bl	8002dc8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e207      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	4b5b      	ldr	r3, [pc, #364]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0xc0>
 80057ee:	e014      	b.n	800581a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd faea 	bl	8002dc8 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fd fae6 	bl	8002dc8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e1f3      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580a:	4b51      	ldr	r3, [pc, #324]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0xe8>
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d063      	beq.n	80058ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005826:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800583a:	2b08      	cmp	r3, #8
 800583c:	d11c      	bne.n	8005878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583e:	4b44      	ldr	r3, [pc, #272]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_RCC_OscConfig+0x152>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e1c7      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4937      	ldr	r1, [pc, #220]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005876:	e03a      	b.n	80058ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d020      	beq.n	80058c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005880:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x244>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fa9f 	bl	8002dc8 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800588e:	f7fd fa9b 	bl	8002dc8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e1a8      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ac:	4b28      	ldr	r3, [pc, #160]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4925      	ldr	r1, [pc, #148]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]
 80058c0:	e015      	b.n	80058ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_OscConfig+0x244>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fd fa7e 	bl	8002dc8 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d0:	f7fd fa7a 	bl	8002dc8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e187      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d036      	beq.n	8005968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <HAL_RCC_OscConfig+0x248>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd fa5e 	bl	8002dc8 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd fa5a 	bl	8002dc8 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e167      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_OscConfig+0x240>)
 8005924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x200>
 800592e:	e01b      	b.n	8005968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_RCC_OscConfig+0x248>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005936:	f7fd fa47 	bl	8002dc8 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	e00e      	b.n	800595c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800593e:	f7fd fa43 	bl	8002dc8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d907      	bls.n	800595c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e150      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
 8005950:	40023800 	.word	0x40023800
 8005954:	42470000 	.word	0x42470000
 8005958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595c:	4b88      	ldr	r3, [pc, #544]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 800595e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ea      	bne.n	800593e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8097 	beq.w	8005aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597a:	4b81      	ldr	r3, [pc, #516]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	4b7d      	ldr	r3, [pc, #500]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	4a7c      	ldr	r2, [pc, #496]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6413      	str	r3, [r2, #64]	; 0x40
 8005996:	4b7a      	ldr	r3, [pc, #488]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a6:	4b77      	ldr	r3, [pc, #476]	; (8005b84 <HAL_RCC_OscConfig+0x474>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d118      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b2:	4b74      	ldr	r3, [pc, #464]	; (8005b84 <HAL_RCC_OscConfig+0x474>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a73      	ldr	r2, [pc, #460]	; (8005b84 <HAL_RCC_OscConfig+0x474>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fd fa03 	bl	8002dc8 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fd f9ff 	bl	8002dc8 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e10c      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	4b6a      	ldr	r3, [pc, #424]	; (8005b84 <HAL_RCC_OscConfig+0x474>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <HAL_RCC_OscConfig+0x2ea>
 80059ec:	4b64      	ldr	r3, [pc, #400]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a63      	ldr	r2, [pc, #396]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
 80059f8:	e01c      	b.n	8005a34 <HAL_RCC_OscConfig+0x324>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x30c>
 8005a02:	4b5f      	ldr	r3, [pc, #380]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a5e      	ldr	r2, [pc, #376]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a08:	f043 0304 	orr.w	r3, r3, #4
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	4b5c      	ldr	r3, [pc, #368]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a5b      	ldr	r2, [pc, #364]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0x324>
 8005a1c:	4b58      	ldr	r3, [pc, #352]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a57      	ldr	r2, [pc, #348]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6713      	str	r3, [r2, #112]	; 0x70
 8005a28:	4b55      	ldr	r3, [pc, #340]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a54      	ldr	r2, [pc, #336]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a2e:	f023 0304 	bic.w	r3, r3, #4
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fd f9c4 	bl	8002dc8 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fd f9c0 	bl	8002dc8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0cb      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5a:	4b49      	ldr	r3, [pc, #292]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0ee      	beq.n	8005a44 <HAL_RCC_OscConfig+0x334>
 8005a66:	e014      	b.n	8005a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a68:	f7fd f9ae 	bl	8002dc8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a70:	f7fd f9aa 	bl	8002dc8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e0b5      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a86:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ee      	bne.n	8005a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a98:	4b39      	ldr	r3, [pc, #228]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	4a38      	ldr	r2, [pc, #224]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a1 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aae:	4b34      	ldr	r3, [pc, #208]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d05c      	beq.n	8005b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d141      	bne.n	8005b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <HAL_RCC_OscConfig+0x478>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fd f97e 	bl	8002dc8 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd f97a 	bl	8002dc8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e087      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	019b      	lsls	r3, r3, #6
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	3b01      	subs	r3, #1
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	491b      	ldr	r1, [pc, #108]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCC_OscConfig+0x478>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fd f953 	bl	8002dc8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fd f94f 	bl	8002dc8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e05c      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x416>
 8005b44:	e054      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_RCC_OscConfig+0x478>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fd f93c 	bl	8002dc8 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fd f938 	bl	8002dc8 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e045      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_OscConfig+0x470>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x444>
 8005b72:	e03d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e038      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
 8005b80:	40023800 	.word	0x40023800
 8005b84:	40007000 	.word	0x40007000
 8005b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <HAL_RCC_OscConfig+0x4ec>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d028      	beq.n	8005bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d121      	bne.n	8005bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d11a      	bne.n	8005bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d111      	bne.n	8005bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d107      	bne.n	8005bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800

08005c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0cc      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c14:	4b68      	ldr	r3, [pc, #416]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d90c      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b65      	ldr	r3, [pc, #404]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0b8      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	494d      	ldr	r1, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d044      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d119      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d107      	bne.n	8005cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cce:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e067      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 0203 	bic.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4934      	ldr	r1, [pc, #208]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf0:	f7fd f86a 	bl	8002dc8 <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf8:	f7fd f866 	bl	8002dc8 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e04f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 020c 	and.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d1eb      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d20c      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e032      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4916      	ldr	r1, [pc, #88]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	490e      	ldr	r1, [pc, #56]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d86:	f000 f821 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc ffca 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023c00 	.word	0x40023c00
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	0800ddac 	.word	0x0800ddac
 8005dc4:	2000005c 	.word	0x2000005c
 8005dc8:	20000060 	.word	0x20000060

08005dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd0:	b094      	sub	sp, #80	; 0x50
 8005dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd8:	2300      	movs	r3, #0
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ddc:	2300      	movs	r3, #0
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005de4:	4b79      	ldr	r3, [pc, #484]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d00d      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x40>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	f200 80e1 	bhi.w	8005fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x34>
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dfe:	e0db      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e00:	4b73      	ldr	r3, [pc, #460]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e04:	e0db      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e06:	4b73      	ldr	r3, [pc, #460]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e0a:	e0d8      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e0c:	4b6f      	ldr	r3, [pc, #444]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e16:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d063      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e22:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	2200      	movs	r2, #0
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
 8005e36:	2300      	movs	r3, #0
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	0159      	lsls	r1, r3, #5
 8005e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e50:	0150      	lsls	r0, r2, #5
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4621      	mov	r1, r4
 8005e58:	1a51      	subs	r1, r2, r1
 8005e5a:	6139      	str	r1, [r7, #16]
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e70:	4659      	mov	r1, fp
 8005e72:	018b      	lsls	r3, r1, #6
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	018a      	lsls	r2, r1, #6
 8005e7e:	4651      	mov	r1, sl
 8005e80:	ebb2 0801 	subs.w	r8, r2, r1
 8005e84:	4659      	mov	r1, fp
 8005e86:	eb63 0901 	sbc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	462b      	mov	r3, r5
 8005eac:	eb49 0303 	adc.w	r3, r9, r3
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	024b      	lsls	r3, r1, #9
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ec8:	4621      	mov	r1, r4
 8005eca:	024a      	lsls	r2, r1, #9
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005edc:	f7fa fe64 	bl	8000ba8 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee8:	e058      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	2300      	movs	r3, #0
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	f04f 0000 	mov.w	r0, #0
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	0159      	lsls	r1, r3, #5
 8005f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f16:	0150      	lsls	r0, r2, #5
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f22:	4649      	mov	r1, r9
 8005f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f40:	eb63 050b 	sbc.w	r5, r3, fp
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	00eb      	lsls	r3, r5, #3
 8005f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f52:	00e2      	lsls	r2, r4, #3
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	4643      	mov	r3, r8
 8005f5a:	18e3      	adds	r3, r4, r3
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	464b      	mov	r3, r9
 8005f60:	eb45 0303 	adc.w	r3, r5, r3
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f72:	4629      	mov	r1, r5
 8005f74:	028b      	lsls	r3, r1, #10
 8005f76:	4621      	mov	r1, r4
 8005f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	028a      	lsls	r2, r1, #10
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	2200      	movs	r2, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	61fa      	str	r2, [r7, #28]
 8005f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f90:	f7fa fe0a 	bl	8000ba8 <__aeabi_uldivmod>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4613      	mov	r3, r2
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fb6:	e002      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3750      	adds	r7, #80	; 0x50
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	007a1200 	.word	0x007a1200

08005fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <HAL_RCC_GetHCLKFreq+0x14>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	2000005c 	.word	0x2000005c

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ff4:	f7ff fff0 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	0a9b      	lsrs	r3, r3, #10
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	4903      	ldr	r1, [pc, #12]	; (8006014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006006:	5ccb      	ldrb	r3, [r1, r3]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40023800 	.word	0x40023800
 8006014:	0800ddbc 	.word	0x0800ddbc

08006018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800601c:	f7ff ffdc 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0b5b      	lsrs	r3, r3, #13
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK2Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	0800ddbc 	.word	0x0800ddbc

08006040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07b      	b.n	800614a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006062:	d009      	beq.n	8006078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e005      	b.n	8006078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fb1e 	bl	80026d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	f003 0104 	and.w	r1, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0210 	and.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e042      	b.n	80061ea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7fc faf3 	bl	8002764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2224      	movs	r2, #36	; 0x24
 8006182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006194:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fe16 	bl	8006dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e04a      	b.n	800629a <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc faa3 	bl	8002764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006234:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fdc6 	bl	8006dc8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800625a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08a      	sub	sp, #40	; 0x28
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d175      	bne.n	80063ae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_UART_Transmit+0x2c>
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e06e      	b.n	80063b0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e0:	f7fc fd72 	bl	8002dc8 <HAL_GetTick>
 80062e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d108      	bne.n	800630e <HAL_UART_Transmit+0x6c>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e003      	b.n	8006316 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006316:	e02e      	b.n	8006376 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	2180      	movs	r1, #128	; 0x80
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fb20 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e03a      	b.n	80063b0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	3302      	adds	r3, #2
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e007      	b.n	8006368 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1cb      	bne.n	8006318 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	2140      	movs	r1, #64	; 0x40
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 faec 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e006      	b.n	80063b0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d112      	bne.n	80063f8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Receive_IT+0x26>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e00b      	b.n	80063fa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fb13 	bl	8006a1a <UART_Start_Receive_IT>
 80063f4:	4603      	mov	r3, r0
 80063f6:	e000      	b.n	80063fa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b0ba      	sub	sp, #232	; 0xe8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_UART_IRQHandler+0x66>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fbf2 	bl	8006c4c <UART_Receive_IT>
      return;
 8006468:	e25b      	b.n	8006922 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800646a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80de 	beq.w	8006630 <HAL_UART_IRQHandler+0x22c>
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80d1 	beq.w	8006630 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_UART_IRQHandler+0xae>
 800649a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_UART_IRQHandler+0xd2>
 80064be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f043 0202 	orr.w	r2, r3, #2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0xf6>
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <HAL_UART_IRQHandler+0x126>
 8006506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	f043 0208 	orr.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 81f2 	beq.w	8006918 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_UART_IRQHandler+0x14e>
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fb7d 	bl	8006c4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <HAL_UART_IRQHandler+0x17a>
 8006576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d04f      	beq.n	800661e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa85 	bl	8006a8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d141      	bne.n	8006616 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3314      	adds	r3, #20
 80065ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1d9      	bne.n	8006592 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d013      	beq.n	800660e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	4a7e      	ldr	r2, [pc, #504]	; (80067e4 <HAL_UART_IRQHandler+0x3e0>)
 80065ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fc fd99 	bl	800312a <HAL_DMA_Abort_IT>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	e00e      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f994 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	e00a      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f990 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e006      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f98c 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800662a:	e175      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	bf00      	nop
    return;
 800662e:	e173      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 814f 	bne.w	80068d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8148 	beq.w	80068d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8141 	beq.w	80068d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	f040 80b6 	bne.w	80067e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8145 	beq.w	800691c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800669a:	429a      	cmp	r2, r3
 800669c:	f080 813e 	bcs.w	800691c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	f000 8088 	beq.w	80067c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1d9      	bne.n	80066b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006726:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800672a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800672e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e1      	bne.n	8006702 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800674e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006764:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e3      	bne.n	800673e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80067aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e3      	bne.n	8006784 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fc fc42 	bl	800304a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f8b7 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e2:	e09b      	b.n	800691c <HAL_UART_IRQHandler+0x518>
 80067e4:	08006b55 	.word	0x08006b55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 808e 	beq.w	8006920 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8089 	beq.w	8006920 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006832:	647a      	str	r2, [r7, #68]	; 0x44
 8006834:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	623b      	str	r3, [r7, #32]
   return(result);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800686a:	633a      	str	r2, [r7, #48]	; 0x30
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60fb      	str	r3, [r7, #12]
   return(result);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69b9      	ldr	r1, [r7, #24]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	617b      	str	r3, [r7, #20]
   return(result);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e3      	bne.n	800688c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f83d 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d6:	e023      	b.n	8006920 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <HAL_UART_IRQHandler+0x4f4>
 80068e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f943 	bl	8006b7c <UART_Transmit_IT>
    return;
 80068f6:	e014      	b.n	8006922 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <HAL_UART_IRQHandler+0x51e>
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f983 	bl	8006c1c <UART_EndTransmit_IT>
    return;
 8006916:	e004      	b.n	8006922 <HAL_UART_IRQHandler+0x51e>
    return;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <HAL_UART_IRQHandler+0x51e>
      return;
 800691c:	bf00      	nop
 800691e:	e000      	b.n	8006922 <HAL_UART_IRQHandler+0x51e>
      return;
 8006920:	bf00      	nop
  }
}
 8006922:	37e8      	adds	r7, #232	; 0xe8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	e03b      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d037      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fc fa21 	bl	8002dc8 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6a3a      	ldr	r2, [r7, #32]
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <UART_WaitOnFlagUntilTimeout+0x30>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e03a      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d023      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d020      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d01d      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d116      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f857 	bl	8006a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2208      	movs	r2, #8
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e00f      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d0b4      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b085      	sub	sp, #20
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	4613      	mov	r3, r2
 8006a26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2222      	movs	r2, #34	; 0x22
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0220 	orr.w	r2, r2, #32
 8006a7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b095      	sub	sp, #84	; 0x54
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab6:	643a      	str	r2, [r7, #64]	; 0x40
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3314      	adds	r3, #20
 8006ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e5      	bne.n	8006aca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d119      	bne.n	8006b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f023 0310 	bic.w	r3, r3, #16
 8006b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b26:	61ba      	str	r2, [r7, #24]
 8006b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	613b      	str	r3, [r7, #16]
   return(result);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b48:	bf00      	nop
 8006b4a:	3754      	adds	r7, #84	; 0x54
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fee4 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b21      	cmp	r3, #33	; 0x21
 8006b8e:	d13e      	bne.n	8006c0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b98:	d114      	bne.n	8006bc4 <UART_Transmit_IT+0x48>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d110      	bne.n	8006bc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]
 8006bc2:	e008      	b.n	8006bd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6211      	str	r1, [r2, #32]
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4619      	mov	r1, r3
 8006be4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e000      	b.n	8006c10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fe73 	bl	8006928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08c      	sub	sp, #48	; 0x30
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b22      	cmp	r3, #34	; 0x22
 8006c5e:	f040 80ae 	bne.w	8006dbe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d117      	bne.n	8006c9c <UART_Receive_IT+0x50>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d113      	bne.n	8006c9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	1c9a      	adds	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
 8006c9a:	e026      	b.n	8006cea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d007      	beq.n	8006cc0 <UART_Receive_IT+0x74>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <UART_Receive_IT+0x82>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e008      	b.n	8006ce0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d15d      	bne.n	8006dba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0220 	bic.w	r2, r2, #32
 8006d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d135      	bne.n	8006db0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	623a      	str	r2, [r7, #32]
 8006d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	69f9      	ldr	r1, [r7, #28]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d10a      	bne.n	8006da2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fdd1 	bl	8006950 <HAL_UARTEx_RxEventCallback>
 8006dae:	e002      	b.n	8006db6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7fb fc43 	bl	800263c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e002      	b.n	8006dc0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3730      	adds	r7, #48	; 0x30
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b0c0      	sub	sp, #256	; 0x100
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	ea40 0301 	orr.w	r3, r0, r1
 8006df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e20:	f021 010c 	bic.w	r1, r1, #12
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	6999      	ldr	r1, [r3, #24]
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	ea40 0301 	orr.w	r3, r0, r1
 8006e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <UART_SetConfig+0x2cc>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d005      	beq.n	8006e68 <UART_SetConfig+0xa0>
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b8d      	ldr	r3, [pc, #564]	; (8007098 <UART_SetConfig+0x2d0>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d104      	bne.n	8006e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7ff f8d6 	bl	8006018 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e70:	e003      	b.n	8006e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7ff f8bd 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8006e76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e84:	f040 810c 	bne.w	80070a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eaa:	4621      	mov	r1, r4
 8006eac:	eb12 0801 	adds.w	r8, r2, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	eb43 0901 	adc.w	r9, r3, r1
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eca:	4690      	mov	r8, r2
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	eb18 0303 	adds.w	r3, r8, r3
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed8:	462b      	mov	r3, r5
 8006eda:	eb49 0303 	adc.w	r3, r9, r3
 8006ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	18db      	adds	r3, r3, r3
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
 8006efc:	4613      	mov	r3, r2
 8006efe:	eb42 0303 	adc.w	r3, r2, r3
 8006f02:	657b      	str	r3, [r7, #84]	; 0x54
 8006f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f0c:	f7f9 fe4c 	bl	8000ba8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <UART_SetConfig+0x2d4>)
 8006f16:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	011c      	lsls	r4, r3, #4
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f40:	4641      	mov	r1, r8
 8006f42:	eb12 0a01 	adds.w	sl, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb43 0b01 	adc.w	fp, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f60:	4692      	mov	sl, r2
 8006f62:	469b      	mov	fp, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	eb1a 0303 	adds.w	r3, sl, r3
 8006f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	eb4b 0303 	adc.w	r3, fp, r3
 8006f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
 8006f92:	4613      	mov	r3, r2
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fa2:	f7f9 fe01 	bl	8000ba8 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <UART_SetConfig+0x2d4>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2264      	movs	r2, #100	; 0x64
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <UART_SetConfig+0x2d4>)
 8006fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fec:	415b      	adcs	r3, r3
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007040:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800705a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800705e:	f7f9 fda3 	bl	8000ba8 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <UART_SetConfig+0x2d4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	; (800709c <UART_SetConfig+0x2d4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 0207 	and.w	r2, r3, #7
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007090:	e106      	b.n	80072a0 <UART_SetConfig+0x4d8>
 8007092:	bf00      	nop
 8007094:	40011000 	.word	0x40011000
 8007098:	40011400 	.word	0x40011400
 800709c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	6239      	str	r1, [r7, #32]
 80070ba:	415b      	adcs	r3, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070c2:	4641      	mov	r1, r8
 80070c4:	1854      	adds	r4, r2, r1
 80070c6:	4649      	mov	r1, r9
 80070c8:	eb43 0501 	adc.w	r5, r3, r1
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	00eb      	lsls	r3, r5, #3
 80070d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070da:	00e2      	lsls	r2, r4, #3
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	4643      	mov	r3, r8
 80070e2:	18e3      	adds	r3, r4, r3
 80070e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070e8:	464b      	mov	r3, r9
 80070ea:	eb45 0303 	adc.w	r3, r5, r3
 80070ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800710e:	4629      	mov	r1, r5
 8007110:	008b      	lsls	r3, r1, #2
 8007112:	4621      	mov	r1, r4
 8007114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007118:	4621      	mov	r1, r4
 800711a:	008a      	lsls	r2, r1, #2
 800711c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007120:	f7f9 fd42 	bl	8000ba8 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4b60      	ldr	r3, [pc, #384]	; (80072ac <UART_SetConfig+0x4e4>)
 800712a:	fba3 2302 	umull	r2, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	011c      	lsls	r4, r3, #4
 8007132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800713c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	61b9      	str	r1, [r7, #24]
 800714c:	415b      	adcs	r3, r3
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6139      	str	r1, [r7, #16]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007188:	464b      	mov	r3, r9
 800718a:	460a      	mov	r2, r1
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	67bb      	str	r3, [r7, #120]	; 0x78
 800719e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071ac:	4649      	mov	r1, r9
 80071ae:	008b      	lsls	r3, r1, #2
 80071b0:	4641      	mov	r1, r8
 80071b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b6:	4641      	mov	r1, r8
 80071b8:	008a      	lsls	r2, r1, #2
 80071ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071be:	f7f9 fcf3 	bl	8000ba8 <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	4b38      	ldr	r3, [pc, #224]	; (80072ac <UART_SetConfig+0x4e4>)
 80071ca:	fba3 2301 	umull	r2, r3, r3, r1
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	2264      	movs	r2, #100	; 0x64
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	1acb      	subs	r3, r1, r3
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	3332      	adds	r3, #50	; 0x32
 80071dc:	4a33      	ldr	r2, [pc, #204]	; (80072ac <UART_SetConfig+0x4e4>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071e8:	441c      	add	r4, r3
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	673b      	str	r3, [r7, #112]	; 0x70
 80071f2:	677a      	str	r2, [r7, #116]	; 0x74
 80071f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	415b      	adcs	r3, r3
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	66bb      	str	r3, [r7, #104]	; 0x68
 800723a:	464b      	mov	r3, r9
 800723c:	460a      	mov	r2, r1
 800723e:	eb42 0303 	adc.w	r3, r2, r3
 8007242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	663b      	str	r3, [r7, #96]	; 0x60
 800724e:	667a      	str	r2, [r7, #100]	; 0x64
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800725c:	4649      	mov	r1, r9
 800725e:	008b      	lsls	r3, r1, #2
 8007260:	4641      	mov	r1, r8
 8007262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007266:	4641      	mov	r1, r8
 8007268:	008a      	lsls	r2, r1, #2
 800726a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800726e:	f7f9 fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <UART_SetConfig+0x4e4>)
 8007278:	fba3 1302 	umull	r1, r3, r3, r2
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	2164      	movs	r1, #100	; 0x64
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	3332      	adds	r3, #50	; 0x32
 800728a:	4a08      	ldr	r2, [pc, #32]	; (80072ac <UART_SetConfig+0x4e4>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	f003 020f 	and.w	r2, r3, #15
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4422      	add	r2, r4
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072a6:	46bd      	mov	sp, r7
 80072a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ac:	51eb851f 	.word	0x51eb851f

080072b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072b0:	b084      	sub	sp, #16
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	f107 001c 	add.w	r0, r7, #28
 80072be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d123      	bne.n	8007312 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80072de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d105      	bne.n	8007306 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9dc 	bl	80076c4 <USB_CoreReset>
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
 8007310:	e01b      	b.n	800734a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9d0 	bl	80076c4 <USB_CoreReset>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007328:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
 800733c:	e005      	b.n	800734a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800734a:	7fbb      	ldrb	r3, [r7, #30]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10b      	bne.n	8007368 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f043 0206 	orr.w	r2, r3, #6
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f043 0220 	orr.w	r2, r3, #32
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007374:	b004      	add	sp, #16
 8007376:	4770      	bx	lr

08007378 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f043 0201 	orr.w	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f023 0201 	bic.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d115      	bne.n	800740a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073ea:	200a      	movs	r0, #10
 80073ec:	f7fb fcf8 	bl	8002de0 <HAL_Delay>
      ms += 10U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	330a      	adds	r3, #10
 80073f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f956 	bl	80076a8 <USB_GetMode>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d01e      	beq.n	8007440 <USB_SetCurrentMode+0x84>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2bc7      	cmp	r3, #199	; 0xc7
 8007406:	d9f0      	bls.n	80073ea <USB_SetCurrentMode+0x2e>
 8007408:	e01a      	b.n	8007440 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d115      	bne.n	800743c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800741c:	200a      	movs	r0, #10
 800741e:	f7fb fcdf 	bl	8002de0 <HAL_Delay>
      ms += 10U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	330a      	adds	r3, #10
 8007426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f93d 	bl	80076a8 <USB_GetMode>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <USB_SetCurrentMode+0x84>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2bc7      	cmp	r3, #199	; 0xc7
 8007438:	d9f0      	bls.n	800741c <USB_SetCurrentMode+0x60>
 800743a:	e001      	b.n	8007440 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e005      	b.n	800744c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2bc8      	cmp	r3, #200	; 0xc8
 8007444:	d101      	bne.n	800744a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800746e:	d901      	bls.n	8007474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e01b      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	daf2      	bge.n	8007462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	019b      	lsls	r3, r3, #6
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007498:	d901      	bls.n	800749e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e006      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d0f0      	beq.n	800748c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074d0:	d901      	bls.n	80074d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e018      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	daf2      	bge.n	80074c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2210      	movs	r2, #16
 80074e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074f4:	d901      	bls.n	80074fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e006      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d0f0      	beq.n	80074e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007514:	b480      	push	{r7}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	460b      	mov	r3, r1
 8007524:	71fb      	strb	r3, [r7, #7]
 8007526:	4613      	mov	r3, r2
 8007528:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007532:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d123      	bne.n	8007582 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800753a:	88bb      	ldrh	r3, [r7, #4]
 800753c:	3303      	adds	r3, #3
 800753e:	089b      	lsrs	r3, r3, #2
 8007540:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007542:	2300      	movs	r3, #0
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e018      	b.n	800757a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	031a      	lsls	r2, r3, #12
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4413      	add	r3, r2
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	461a      	mov	r2, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	3301      	adds	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3301      	adds	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3301      	adds	r3, #1
 8007572:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3301      	adds	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	429a      	cmp	r2, r3
 8007580:	d3e2      	bcc.n	8007548 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3724      	adds	r7, #36	; 0x24
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007590:	b480      	push	{r7}
 8007592:	b08b      	sub	sp, #44	; 0x2c
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	089b      	lsrs	r3, r3, #2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	623b      	str	r3, [r7, #32]
 80075ba:	e014      	b.n	80075e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	3301      	adds	r3, #1
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	3301      	adds	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	3301      	adds	r3, #1
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	3301      	adds	r3, #1
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	3301      	adds	r3, #1
 80075e4:	623b      	str	r3, [r7, #32]
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d3e6      	bcc.n	80075bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075ee:	8bfb      	ldrh	r3, [r7, #30]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01e      	beq.n	8007632 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fe:	461a      	mov	r2, r3
 8007600:	f107 0310 	add.w	r3, r7, #16
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	b2da      	uxtb	r2, r3
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	701a      	strb	r2, [r3, #0]
      i++;
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	3301      	adds	r3, #1
 800761e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	3301      	adds	r3, #1
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007626:	8bfb      	ldrh	r3, [r7, #30]
 8007628:	3b01      	subs	r3, #1
 800762a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800762c:	8bfb      	ldrh	r3, [r7, #30]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1ea      	bne.n	8007608 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007634:	4618      	mov	r0, r3
 8007636:	372c      	adds	r7, #44	; 0x2c
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	4013      	ands	r3, r2
 8007698:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800769a:	68bb      	ldr	r3, [r7, #8]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0301 	and.w	r3, r3, #1
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076dc:	d901      	bls.n	80076e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e01b      	b.n	800771a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	daf2      	bge.n	80076d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3301      	adds	r3, #1
 80076fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007706:	d901      	bls.n	800770c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e006      	b.n	800771a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b01      	cmp	r3, #1
 8007716:	d0f0      	beq.n	80076fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007728:	b084      	sub	sp, #16
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007748:	461a      	mov	r2, r3
 800774a:	2300      	movs	r3, #0
 800774c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d119      	bne.n	80077b2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800777e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007782:	2b01      	cmp	r3, #1
 8007784:	d10a      	bne.n	800779c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007794:	f043 0304 	orr.w	r3, r3, #4
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e014      	b.n	80077c6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077aa:	f023 0304 	bic.w	r3, r3, #4
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	e009      	b.n	80077c6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077c0:	f023 0304 	bic.w	r3, r3, #4
 80077c4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077c6:	2110      	movs	r1, #16
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff fe43 	bl	8007454 <USB_FlushTxFifo>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fe6d 	bl	80074b8 <USB_FlushRxFifo>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80077e8:	2300      	movs	r3, #0
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	e015      	b.n	800781a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fa:	461a      	mov	r2, r3
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007800:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780e:	461a      	mov	r2, r3
 8007810:	2300      	movs	r3, #0
 8007812:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3301      	adds	r3, #1
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800781e:	461a      	mov	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4293      	cmp	r3, r2
 8007824:	d3e3      	bcc.n	80077ee <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f04f 32ff 	mov.w	r2, #4294967295
 8007832:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a18      	ldr	r2, [pc, #96]	; (8007898 <USB_HostInit+0x170>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10b      	bne.n	8007854 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a15      	ldr	r2, [pc, #84]	; (800789c <USB_HostInit+0x174>)
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a14      	ldr	r2, [pc, #80]	; (80078a0 <USB_HostInit+0x178>)
 800784e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007852:	e009      	b.n	8007868 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2280      	movs	r2, #128	; 0x80
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <USB_HostInit+0x17c>)
 800785e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <USB_HostInit+0x180>)
 8007864:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f043 0210 	orr.w	r2, r3, #16
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <USB_HostInit+0x184>)
 8007882:	4313      	orrs	r3, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007894:	b004      	add	sp, #16
 8007896:	4770      	bx	lr
 8007898:	40040000 	.word	0x40040000
 800789c:	01000200 	.word	0x01000200
 80078a0:	00e00300 	.word	0x00e00300
 80078a4:	00600080 	.word	0x00600080
 80078a8:	004000e0 	.word	0x004000e0
 80078ac:	a3200008 	.word	0xa3200008

080078b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078e8:	4313      	orrs	r3, r2
 80078ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d107      	bne.n	8007902 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f8:	461a      	mov	r2, r3
 80078fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	e00c      	b.n	800791c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d107      	bne.n	8007918 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790e:	461a      	mov	r2, r3
 8007910:	f241 7370 	movw	r3, #6000	; 0x1770
 8007914:	6053      	str	r3, [r2, #4]
 8007916:	e001      	b.n	800791c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800794a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007958:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800795a:	2064      	movs	r0, #100	; 0x64
 800795c:	f7fb fa40 	bl	8002de0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800796c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800796e:	200a      	movs	r0, #10
 8007970:	f7fb fa36 	bl	8002de0 <HAL_Delay>

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <USB_DriveVbus+0x44>
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d106      	bne.n	80079c2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079c0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d109      	bne.n	80079e2 <USB_DriveVbus+0x64>
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	0c5b      	lsrs	r3, r3, #17
 8007a0e:	f003 0303 	and.w	r3, r3, #3
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	b29b      	uxth	r3, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	4608      	mov	r0, r1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	70fb      	strb	r3, [r7, #3]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70bb      	strb	r3, [r7, #2]
 8007a56:	4613      	mov	r3, r2
 8007a58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d87c      	bhi.n	8007b78 <USB_HC_Init+0x138>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <USB_HC_Init+0x44>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007b3b 	.word	0x08007b3b
 8007a8c:	08007a95 	.word	0x08007a95
 8007a90:	08007afd 	.word	0x08007afd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f240 439d 	movw	r3, #1181	; 0x49d
 8007aa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da10      	bge.n	8007ad2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ace:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007ad0:	e055      	b.n	8007b7e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a6f      	ldr	r2, [pc, #444]	; (8007c94 <USB_HC_Init+0x254>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d151      	bne.n	8007b7e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007af8:	60d3      	str	r3, [r2, #12]
      break;
 8007afa:	e040      	b.n	8007b7e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	da34      	bge.n	8007b82 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b38:	e023      	b.n	8007b82 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b46:	461a      	mov	r2, r3
 8007b48:	f240 2325 	movw	r3, #549	; 0x225
 8007b4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da17      	bge.n	8007b86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b76:	e006      	b.n	8007b86 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	77fb      	strb	r3, [r7, #31]
      break;
 8007b7c:	e004      	b.n	8007b88 <USB_HC_Init+0x148>
      break;
 8007b7e:	bf00      	nop
 8007b80:	e002      	b.n	8007b88 <USB_HC_Init+0x148>
      break;
 8007b82:	bf00      	nop
 8007b84:	e000      	b.n	8007b88 <USB_HC_Init+0x148>
      break;
 8007b86:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f303 	lsl.w	r3, r1, r3
 8007bce:	6939      	ldr	r1, [r7, #16]
 8007bd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da03      	bge.n	8007bf4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e001      	b.n	8007bf8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fef9 	bl	80079f0 <USB_GetHostSpeed>
 8007bfe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d106      	bne.n	8007c16 <USB_HC_Init+0x1d6>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d003      	beq.n	8007c16 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e001      	b.n	8007c1a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c1a:	787b      	ldrb	r3, [r7, #1]
 8007c1c:	059b      	lsls	r3, r3, #22
 8007c1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c22:	78bb      	ldrb	r3, [r7, #2]
 8007c24:	02db      	lsls	r3, r3, #11
 8007c26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c30:	049b      	lsls	r3, r3, #18
 8007c32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007c38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c3e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	0151      	lsls	r1, r2, #5
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	440a      	add	r2, r1
 8007c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c58:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d003      	beq.n	8007c6a <USB_HC_Init+0x22a>
 8007c62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d10f      	bne.n	8007c8a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40040000 	.word	0x40040000

08007c98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cb4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a5d      	ldr	r2, [pc, #372]	; (8007e30 <USB_HC_StartXfer+0x198>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d12f      	bne.n	8007d1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d11c      	bne.n	8007cfe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	7c9b      	ldrb	r3, [r3, #18]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <USB_HC_StartXfer+0x3c>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	7c9b      	ldrb	r3, [r3, #18]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d124      	bne.n	8007d1e <USB_HC_StartXfer+0x86>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	799b      	ldrb	r3, [r3, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d120      	bne.n	8007d1e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfa:	60d3      	str	r3, [r2, #12]
 8007cfc:	e00f      	b.n	8007d1e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	791b      	ldrb	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <USB_HC_StartXfer+0x86>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	795b      	ldrb	r3, [r3, #5]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d107      	bne.n	8007d1e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	4619      	mov	r1, r3
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fb6b 	bl	80083f0 <USB_DoPing>
        return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e232      	b.n	8008184 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	799b      	ldrb	r3, [r3, #6]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d158      	bne.n	8007dd8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007d26:	2301      	movs	r3, #1
 8007d28:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	8a92      	ldrh	r2, [r2, #20]
 8007d38:	fb03 f202 	mul.w	r2, r3, r2
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	61da      	str	r2, [r3, #28]
 8007d40:	e07c      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	7c9b      	ldrb	r3, [r3, #18]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d130      	bne.n	8007dac <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	2bbc      	cmp	r3, #188	; 0xbc
 8007d50:	d918      	bls.n	8007d84 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	8a9b      	ldrh	r3, [r3, #20]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	69da      	ldr	r2, [r3, #28]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d003      	beq.n	8007d74 <USB_HC_StartXfer+0xdc>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d103      	bne.n	8007d7c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2202      	movs	r2, #2
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	e05f      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	e05b      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d007      	beq.n	8007da4 <USB_HC_StartXfer+0x10c>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d003      	beq.n	8007da4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	e04b      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2203      	movs	r2, #3
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	e047      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d10d      	bne.n	8007dce <USB_HC_StartXfer+0x136>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	8a92      	ldrh	r2, [r2, #20]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d907      	bls.n	8007dce <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	8a92      	ldrh	r2, [r2, #20]
 8007dc4:	fb03 f202 	mul.w	r2, r3, r2
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	61da      	str	r2, [r3, #28]
 8007dcc:	e036      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	61da      	str	r2, [r3, #28]
 8007dd6:	e031      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d018      	beq.n	8007e12 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	8a92      	ldrh	r2, [r2, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	3b01      	subs	r3, #1
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	8a92      	ldrh	r2, [r2, #20]
 8007df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007df4:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8007df6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007df8:	8b7b      	ldrh	r3, [r7, #26]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d90b      	bls.n	8007e16 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007dfe:	8b7b      	ldrh	r3, [r7, #26]
 8007e00:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	8a92      	ldrh	r2, [r2, #20]
 8007e08:	fb03 f202 	mul.w	r2, r3, r2
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61da      	str	r2, [r3, #28]
 8007e10:	e001      	b.n	8007e16 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007e12:	2301      	movs	r3, #1
 8007e14:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	8a92      	ldrh	r2, [r2, #20]
 8007e24:	fb03 f202 	mul.w	r2, r3, r2
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	61da      	str	r2, [r3, #28]
 8007e2c:	e006      	b.n	8007e3c <USB_HC_StartXfer+0x1a4>
 8007e2e:	bf00      	nop
 8007e30:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6a1a      	ldr	r2, [r3, #32]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e46:	04d9      	lsls	r1, r3, #19
 8007e48:	4ba3      	ldr	r3, [pc, #652]	; (80080d8 <USB_HC_StartXfer+0x440>)
 8007e4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	7d9b      	ldrb	r3, [r3, #22]
 8007e52:	075b      	lsls	r3, r3, #29
 8007e54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e58:	69f9      	ldr	r1, [r7, #28]
 8007e5a:	0148      	lsls	r0, r1, #5
 8007e5c:	6a39      	ldr	r1, [r7, #32]
 8007e5e:	4401      	add	r1, r0
 8007e60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6999      	ldr	r1, [r3, #24]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7e:	460a      	mov	r2, r1
 8007e80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bf0c      	ite	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	2300      	movne	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	6a3a      	ldr	r2, [r7, #32]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007eb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	7e7b      	ldrb	r3, [r7, #25]
 8007eca:	075b      	lsls	r3, r3, #29
 8007ecc:	69f9      	ldr	r1, [r7, #28]
 8007ece:	0148      	lsls	r0, r1, #5
 8007ed0:	6a39      	ldr	r1, [r7, #32]
 8007ed2:	4401      	add	r1, r0
 8007ed4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	799b      	ldrb	r3, [r3, #6]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	f040 80c3 	bne.w	800806c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	7c5b      	ldrb	r3, [r3, #17]
 8007eea:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007f02:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	6a3a      	ldr	r2, [r7, #32]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	79db      	ldrb	r3, [r3, #7]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d123      	bne.n	8007f74 <USB_HC_StartXfer+0x2dc>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	78db      	ldrb	r3, [r3, #3]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11f      	bne.n	8007f74 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f52:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f72:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	7c9b      	ldrb	r3, [r3, #18]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d003      	beq.n	8007f84 <USB_HC_StartXfer+0x2ec>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	7c9b      	ldrb	r3, [r3, #18]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d117      	bne.n	8007fb4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d113      	bne.n	8007fb4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	78db      	ldrb	r3, [r3, #3]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d10f      	bne.n	8007fb4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	7c9b      	ldrb	r3, [r3, #18]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d162      	bne.n	8008082 <USB_HC_StartXfer+0x3ea>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	78db      	ldrb	r3, [r3, #3]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d15e      	bne.n	8008082 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d858      	bhi.n	8008080 <USB_HC_StartXfer+0x3e8>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <USB_HC_StartXfer+0x33c>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fe5 	.word	0x08007fe5
 8007fd8:	08008007 	.word	0x08008007
 8007fdc:	08008029 	.word	0x08008029
 8007fe0:	0800804b 	.word	0x0800804b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008002:	6053      	str	r3, [r2, #4]
          break;
 8008004:	e03d      	b.n	8008082 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	6a3a      	ldr	r2, [r7, #32]
 800801a:	440a      	add	r2, r1
 800801c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008020:	f043 030e 	orr.w	r3, r3, #14
 8008024:	6053      	str	r3, [r2, #4]
          break;
 8008026:	e02c      	b.n	8008082 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	440a      	add	r2, r1
 800803e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008046:	6053      	str	r3, [r2, #4]
          break;
 8008048:	e01b      	b.n	8008082 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	4413      	add	r3, r2
 8008052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	6a3a      	ldr	r2, [r7, #32]
 800805e:	440a      	add	r2, r1
 8008060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008068:	6053      	str	r3, [r2, #4]
          break;
 800806a:	e00a      	b.n	8008082 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008078:	461a      	mov	r2, r3
 800807a:	2300      	movs	r3, #0
 800807c:	6053      	str	r3, [r2, #4]
 800807e:	e000      	b.n	8008082 <USB_HC_StartXfer+0x3ea>
          break;
 8008080:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008098:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	e003      	b.n	80080b4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080b2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c8:	461a      	mov	r2, r3
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e055      	b.n	8008184 <USB_HC_StartXfer+0x4ec>
 80080d8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	78db      	ldrb	r3, [r3, #3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d14e      	bne.n	8008182 <USB_HC_StartXfer+0x4ea>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d04a      	beq.n	8008182 <USB_HC_StartXfer+0x4ea>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	79db      	ldrb	r3, [r3, #7]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d146      	bne.n	8008182 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	7c9b      	ldrb	r3, [r3, #18]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d831      	bhi.n	8008160 <USB_HC_StartXfer+0x4c8>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USB_HC_StartXfer+0x46c>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008115 	.word	0x08008115
 8008108:	08008139 	.word	0x08008139
 800810c:	08008115 	.word	0x08008115
 8008110:	08008139 	.word	0x08008139
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	3303      	adds	r3, #3
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800811e:	8afa      	ldrh	r2, [r7, #22]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	b29b      	uxth	r3, r3
 8008126:	429a      	cmp	r2, r3
 8008128:	d91c      	bls.n	8008164 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f043 0220 	orr.w	r2, r3, #32
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	619a      	str	r2, [r3, #24]
        }
        break;
 8008136:	e015      	b.n	8008164 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	3303      	adds	r3, #3
 800813e:	089b      	lsrs	r3, r3, #2
 8008140:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008142:	8afa      	ldrh	r2, [r7, #22]
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	b29b      	uxth	r3, r3
 800814e:	429a      	cmp	r2, r3
 8008150:	d90a      	bls.n	8008168 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	619a      	str	r2, [r3, #24]
        }
        break;
 800815e:	e003      	b.n	8008168 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008160:	bf00      	nop
 8008162:	e002      	b.n	800816a <USB_HC_StartXfer+0x4d2>
        break;
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <USB_HC_StartXfer+0x4d2>
        break;
 8008168:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6999      	ldr	r1, [r3, #24]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	785a      	ldrb	r2, [r3, #1]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	b29b      	uxth	r3, r3
 8008178:	2000      	movs	r0, #0
 800817a:	9000      	str	r0, [sp, #0]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff f9c9 	bl	8007514 <USB_WritePacket>
  }

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3728      	adds	r7, #40	; 0x28
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	b29b      	uxth	r3, r3
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b089      	sub	sp, #36	; 0x24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	0c9b      	lsrs	r3, r3, #18
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	0fdb      	lsrs	r3, r3, #31
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	0fdb      	lsrs	r3, r3, #31
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b20      	cmp	r3, #32
 8008212:	d10d      	bne.n	8008230 <USB_HC_Halt+0x82>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <USB_HC_Halt+0x82>
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d002      	beq.n	800822c <USB_HC_Halt+0x7e>
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d101      	bne.n	8008230 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	e0d8      	b.n	80083e2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <USB_HC_Halt+0x8e>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d173      	bne.n	8008324 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800825a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 0320 	and.w	r3, r3, #32
 8008264:	2b00      	cmp	r3, #0
 8008266:	d14a      	bne.n	80082fe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d133      	bne.n	80082dc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	440a      	add	r2, r1
 800828a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008292:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082b2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	3301      	adds	r3, #1
 80082b8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082c0:	d82e      	bhi.n	8008320 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d8:	d0ec      	beq.n	80082b4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082da:	e081      	b.n	80083e0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082fc:	e070      	b.n	80083e0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800831c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800831e:	e05f      	b.n	80083e0 <USB_HC_Halt+0x232>
            break;
 8008320:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008322:	e05d      	b.n	80083e0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	440a      	add	r2, r1
 800833a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008342:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d133      	bne.n	80083bc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	440a      	add	r2, r1
 800836a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800836e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008372:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	440a      	add	r2, r1
 800838a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800838e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008392:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3301      	adds	r3, #1
 8008398:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a0:	d81d      	bhi.n	80083de <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b8:	d0ec      	beq.n	8008394 <USB_HC_Halt+0x1e6>
 80083ba:	e011      	b.n	80083e0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	0151      	lsls	r1, r2, #5
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	440a      	add	r2, r1
 80083d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	e000      	b.n	80083e0 <USB_HC_Halt+0x232>
          break;
 80083de:	bf00      	nop
    }
  }

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3724      	adds	r7, #36	; 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008404:	2301      	movs	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	04da      	lsls	r2, r3, #19
 800840c:	4b15      	ldr	r3, [pc, #84]	; (8008464 <USB_DoPing+0x74>)
 800840e:	4013      	ands	r3, r2
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	440a      	add	r2, r1
 8008418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800841c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008420:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008438:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008440:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	461a      	mov	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	1ff80000 	.word	0x1ff80000

08008468 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7fe ff8c 	bl	800739a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008482:	2110      	movs	r1, #16
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe ffe5 	bl	8007454 <USB_FlushTxFifo>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff f80f 	bl	80074b8 <USB_FlushRxFifo>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084a4:	2300      	movs	r3, #0
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	e01f      	b.n	80084ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084de:	461a      	mov	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	3301      	adds	r3, #1
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b0f      	cmp	r3, #15
 80084ee:	d9dc      	bls.n	80084aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e034      	b.n	8008560 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800850c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800851c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852a:	461a      	mov	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800853c:	d80c      	bhi.n	8008558 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008554:	d0ec      	beq.n	8008530 <USB_StopHost+0xc8>
 8008556:	e000      	b.n	800855a <USB_StopHost+0xf2>
        break;
 8008558:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	3301      	adds	r3, #1
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d9c7      	bls.n	80084f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800856c:	461a      	mov	r2, r3
 800856e:	f04f 33ff 	mov.w	r3, #4294967295
 8008572:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe fefb 	bl	8007378 <USB_EnableGlobalInt>

  return ret;
 8008582:	7ffb      	ldrb	r3, [r7, #31]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3720      	adds	r7, #32
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b089      	sub	sp, #36	; 0x24
 8008590:	af04      	add	r7, sp, #16
 8008592:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008594:	2301      	movs	r3, #1
 8008596:	2202      	movs	r2, #2
 8008598:	2102      	movs	r1, #2
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fc85 	bl	8008eaa <USBH_FindInterface>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2bff      	cmp	r3, #255	; 0xff
 80085a8:	d002      	beq.n	80085b0 <USBH_CDC_InterfaceInit+0x24>
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d901      	bls.n	80085b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085b0:	2302      	movs	r3, #2
 80085b2:	e13d      	b.n	8008830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc5a 	bl	8008e72 <USBH_SelectInterface>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80085c8:	2302      	movs	r3, #2
 80085ca:	e131      	b.n	8008830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80085d2:	2050      	movs	r0, #80	; 0x50
 80085d4:	f002 fb66 	bl	800aca4 <malloc>
 80085d8:	4603      	mov	r3, r0
 80085da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80085ec:	2302      	movs	r3, #2
 80085ee:	e11f      	b.n	8008830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80085f0:	2250      	movs	r2, #80	; 0x50
 80085f2:	2100      	movs	r1, #0
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f003 f97c 	bl	800b8f2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	211a      	movs	r1, #26
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	4413      	add	r3, r2
 8008606:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b25b      	sxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	da15      	bge.n	800863e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	211a      	movs	r1, #26
 8008618:	fb01 f303 	mul.w	r3, r1, r3
 800861c:	4413      	add	r3, r2
 800861e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	211a      	movs	r1, #26
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008638:	881a      	ldrh	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 ffce 	bl	800a5e6 <USBH_AllocPipe>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	7819      	ldrb	r1, [r3, #0]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	7858      	ldrb	r0, [r3, #1]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	8952      	ldrh	r2, [r2, #10]
 800866a:	9202      	str	r2, [sp, #8]
 800866c:	2203      	movs	r2, #3
 800866e:	9201      	str	r2, [sp, #4]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4623      	mov	r3, r4
 8008674:	4602      	mov	r2, r0
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 ff86 	bl	800a588 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2200      	movs	r2, #0
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f002 fa87 	bl	800ab98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800868a:	2300      	movs	r3, #0
 800868c:	2200      	movs	r2, #0
 800868e:	210a      	movs	r1, #10
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc0a 	bl	8008eaa <USBH_FindInterface>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2bff      	cmp	r3, #255	; 0xff
 800869e:	d002      	beq.n	80086a6 <USBH_CDC_InterfaceInit+0x11a>
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d901      	bls.n	80086aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086a6:	2302      	movs	r3, #2
 80086a8:	e0c2      	b.n	8008830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	211a      	movs	r1, #26
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b25b      	sxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da16      	bge.n	80086f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	211a      	movs	r1, #26
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	211a      	movs	r1, #26
 80086de:	fb01 f303 	mul.w	r3, r1, r3
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	835a      	strh	r2, [r3, #26]
 80086ee:	e015      	b.n	800871c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	211a      	movs	r1, #26
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	211a      	movs	r1, #26
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	4413      	add	r3, r2
 8008712:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008716:	881a      	ldrh	r2, [r3, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	211a      	movs	r1, #26
 8008722:	fb01 f303 	mul.w	r3, r1, r3
 8008726:	4413      	add	r3, r2
 8008728:	f203 3356 	addw	r3, r3, #854	; 0x356
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b25b      	sxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	da16      	bge.n	8008762 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	211a      	movs	r1, #26
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008744:	781a      	ldrb	r2, [r3, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	211a      	movs	r1, #26
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	4413      	add	r3, r2
 8008756:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800875a:	881a      	ldrh	r2, [r3, #0]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	835a      	strh	r2, [r3, #26]
 8008760:	e015      	b.n	800878e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	211a      	movs	r1, #26
 8008768:	fb01 f303 	mul.w	r3, r1, r3
 800876c:	4413      	add	r3, r2
 800876e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	211a      	movs	r1, #26
 800877e:	fb01 f303 	mul.w	r3, r1, r3
 8008782:	4413      	add	r3, r2
 8008784:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008788:	881a      	ldrh	r2, [r3, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	7b9b      	ldrb	r3, [r3, #14]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 ff26 	bl	800a5e6 <USBH_AllocPipe>
 800879a:	4603      	mov	r3, r0
 800879c:	461a      	mov	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	7bdb      	ldrb	r3, [r3, #15]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 ff1c 	bl	800a5e6 <USBH_AllocPipe>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	7b59      	ldrb	r1, [r3, #13]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	7b98      	ldrb	r0, [r3, #14]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	8b12      	ldrh	r2, [r2, #24]
 80087ce:	9202      	str	r2, [sp, #8]
 80087d0:	2202      	movs	r2, #2
 80087d2:	9201      	str	r2, [sp, #4]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	4623      	mov	r3, r4
 80087d8:	4602      	mov	r2, r0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fed4 	bl	800a588 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	7b19      	ldrb	r1, [r3, #12]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	7bd8      	ldrb	r0, [r3, #15]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	8b52      	ldrh	r2, [r2, #26]
 80087f8:	9202      	str	r2, [sp, #8]
 80087fa:	2202      	movs	r2, #2
 80087fc:	9201      	str	r2, [sp, #4]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4623      	mov	r3, r4
 8008802:	4602      	mov	r2, r0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 febf 	bl	800a588 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	7b5b      	ldrb	r3, [r3, #13]
 8008816:	2200      	movs	r2, #0
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f002 f9bc 	bl	800ab98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	7b1b      	ldrb	r3, [r3, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f002 f9b5 	bl	800ab98 <USBH_LL_SetToggle>

  return USBH_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}

08008838 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00e      	beq.n	8008870 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 feb4 	bl	800a5c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f001 fedf 	bl	800a628 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	7b1b      	ldrb	r3, [r3, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00e      	beq.n	8008896 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	7b1b      	ldrb	r3, [r3, #12]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fea1 	bl	800a5c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7b1b      	ldrb	r3, [r3, #12]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fecc 	bl	800a628 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	7b5b      	ldrb	r3, [r3, #13]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	7b5b      	ldrb	r3, [r3, #13]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fe8e 	bl	800a5c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7b5b      	ldrb	r3, [r3, #13]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 feb9 	bl	800a628 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f002 f9ef 	bl	800acb4 <free>
    phost->pActiveClass->pData = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088dc:	2200      	movs	r2, #0
 80088de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3340      	adds	r3, #64	; 0x40
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f8b1 	bl	8008a6a <GetLineCoding>
 8008908:	4603      	mov	r3, r0
 800890a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008918:	2102      	movs	r1, #2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800891e:	7afb      	ldrb	r3, [r7, #11]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008930:	2301      	movs	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008948:	2b04      	cmp	r3, #4
 800894a:	d877      	bhi.n	8008a3c <USBH_CDC_Process+0x114>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <USBH_CDC_Process+0x2c>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008969 	.word	0x08008969
 8008958:	0800896f 	.word	0x0800896f
 800895c:	0800899f 	.word	0x0800899f
 8008960:	08008a13 	.word	0x08008a13
 8008964:	08008a21 	.word	0x08008a21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
      break;
 800896c:	e06d      	b.n	8008a4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f897 	bl	8008aa8 <SetLineCoding>
 800897a:	4603      	mov	r3, r0
 800897c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800898c:	e058      	b.n	8008a40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d055      	beq.n	8008a40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2204      	movs	r2, #4
 8008998:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800899c:	e050      	b.n	8008a40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3340      	adds	r3, #64	; 0x40
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f860 	bl	8008a6a <GetLineCoding>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d126      	bne.n	8008a02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089c6:	791b      	ldrb	r3, [r3, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d13b      	bne.n	8008a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089d8:	429a      	cmp	r2, r3
 80089da:	d133      	bne.n	8008a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d12b      	bne.n	8008a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d124      	bne.n	8008a44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f958 	bl	8008cb0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a00:	e020      	b.n	8008a44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d01d      	beq.n	8008a44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008a10:	e018      	b.n	8008a44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f867 	bl	8008ae6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f8da 	bl	8008bd2 <CDC_ProcessReception>
      break;
 8008a1e:	e014      	b.n	8008a4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 f822 	bl	8009a6c <USBH_ClrFeature>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008a3a:	e005      	b.n	8008a48 <USBH_CDC_Process+0x120>

    default:
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e004      	b.n	8008a4a <USBH_CDC_Process+0x122>
      break;
 8008a40:	bf00      	nop
 8008a42:	e002      	b.n	8008a4a <USBH_CDC_Process+0x122>
      break;
 8008a44:	bf00      	nop
 8008a46:	e000      	b.n	8008a4a <USBH_CDC_Process+0x122>
      break;
 8008a48:	bf00      	nop

  }

  return status;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	22a1      	movs	r2, #161	; 0xa1
 8008a78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2221      	movs	r2, #33	; 0x21
 8008a7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2207      	movs	r2, #7
 8008a90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2207      	movs	r2, #7
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fb23 	bl	800a0e4 <USBH_CtlReq>
 8008a9e:	4603      	mov	r3, r0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2207      	movs	r2, #7
 8008ace:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2207      	movs	r2, #7
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fb04 	bl	800a0e4 <USBH_CtlReq>
 8008adc:	4603      	mov	r3, r0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af02      	add	r7, sp, #8
 8008aec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008af8:	2300      	movs	r3, #0
 8008afa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d002      	beq.n	8008b0c <CDC_ProcessTransmission+0x26>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d023      	beq.n	8008b52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008b0a:	e05e      	b.n	8008bca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	8b12      	ldrh	r2, [r2, #24]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d90b      	bls.n	8008b30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	69d9      	ldr	r1, [r3, #28]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8b1a      	ldrh	r2, [r3, #24]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	7b5b      	ldrb	r3, [r3, #13]
 8008b24:	2001      	movs	r0, #1
 8008b26:	9000      	str	r0, [sp, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fcea 	bl	800a502 <USBH_BulkSendData>
 8008b2e:	e00b      	b.n	8008b48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	7b5b      	ldrb	r3, [r3, #13]
 8008b3e:	2001      	movs	r0, #1
 8008b40:	9000      	str	r0, [sp, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 fcdd 	bl	800a502 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b50:	e03b      	b.n	8008bca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	7b5b      	ldrb	r3, [r3, #13]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fff3 	bl	800ab44 <USBH_LL_GetURBState>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d128      	bne.n	8008bba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	8b12      	ldrh	r2, [r2, #24]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d90e      	bls.n	8008b92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	8b12      	ldrh	r2, [r2, #24]
 8008b7c:	1a9a      	subs	r2, r3, r2
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	8b12      	ldrh	r2, [r2, #24]
 8008b8a:	441a      	add	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	61da      	str	r2, [r3, #28]
 8008b90:	e002      	b.n	8008b98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ba8:	e00e      	b.n	8008bc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f868 	bl	8008c88 <USBH_CDC_TransmitCallback>
      break;
 8008bb8:	e006      	b.n	8008bc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d103      	bne.n	8008bc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008bc8:	bf00      	nop
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d002      	beq.n	8008bf8 <CDC_ProcessReception+0x26>
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d00e      	beq.n	8008c14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008bf6:	e043      	b.n	8008c80 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a19      	ldr	r1, [r3, #32]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	8b5a      	ldrh	r2, [r3, #26]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	7b1b      	ldrb	r3, [r3, #12]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fca1 	bl	800a54c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c12:	e035      	b.n	8008c80 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	7b1b      	ldrb	r3, [r3, #12]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 ff92 	bl	800ab44 <USBH_LL_GetURBState>
 8008c20:	4603      	mov	r3, r0
 8008c22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c24:	7cfb      	ldrb	r3, [r7, #19]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d129      	bne.n	8008c7e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	7b1b      	ldrb	r3, [r3, #12]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 fef5 	bl	800aa20 <USBH_LL_GetLastXferSize>
 8008c36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d016      	beq.n	8008c70 <CDC_ProcessReception+0x9e>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	8b5b      	ldrh	r3, [r3, #26]
 8008c46:	461a      	mov	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d910      	bls.n	8008c70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad2      	subs	r2, r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	6a1a      	ldr	r2, [r3, #32]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	441a      	add	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c6e:	e006      	b.n	8008c7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f80f 	bl	8008c9c <USBH_CDC_ReceiveCallback>
      break;
 8008c7e:	bf00      	nop
  }
}
 8008c80:	bf00      	nop
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e029      	b.n	8008d30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	79fa      	ldrb	r2, [r7, #7]
 8008ce0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f81f 	bl	8008d38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f001 fdc5 	bl	800a8b8 <USBH_LL_Init>

  return USBH_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e009      	b.n	8008d5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	33e0      	adds	r3, #224	; 0xe0
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	2200      	movs	r2, #0
 8008d56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b0f      	cmp	r3, #15
 8008d62:	d9f2      	bls.n	8008d4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e009      	b.n	8008d7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d84:	d3f1      	bcc.n	8008d6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2240      	movs	r2, #64	; 0x40
 8008daa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	331c      	adds	r3, #28
 8008dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 fd88 	bl	800b8f2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f002 fd7f 	bl	800b8f2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008dfa:	2212      	movs	r2, #18
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f002 fd77 	bl	800b8f2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e0a:	223e      	movs	r2, #62	; 0x3e
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f002 fd6f 	bl	800b8f2 <memset>

  return USBH_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10e      	bne.n	8008e5a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e42:	1c59      	adds	r1, r3, #1
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	33de      	adds	r3, #222	; 0xde
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e004      	b.n	8008e64 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	e001      	b.n	8008e64 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e60:	2302      	movs	r3, #2
 8008e62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d204      	bcs.n	8008e98 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008e96:	e001      	b.n	8008e9c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4603      	mov	r3, r0
 8008eba:	70fb      	strb	r3, [r7, #3]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70bb      	strb	r3, [r7, #2]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ed2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ed4:	e025      	b.n	8008f22 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	221a      	movs	r2, #26
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
 8008ede:	3308      	adds	r3, #8
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	795b      	ldrb	r3, [r3, #5]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d002      	beq.n	8008ef8 <USBH_FindInterface+0x4e>
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	2bff      	cmp	r3, #255	; 0xff
 8008ef6:	d111      	bne.n	8008f1c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008efc:	78ba      	ldrb	r2, [r7, #2]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d002      	beq.n	8008f08 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f02:	78bb      	ldrb	r3, [r7, #2]
 8008f04:	2bff      	cmp	r3, #255	; 0xff
 8008f06:	d109      	bne.n	8008f1c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f0c:	787a      	ldrb	r2, [r7, #1]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d002      	beq.n	8008f18 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f12:	787b      	ldrb	r3, [r7, #1]
 8008f14:	2bff      	cmp	r3, #255	; 0xff
 8008f16:	d101      	bne.n	8008f1c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	e006      	b.n	8008f2a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d9d6      	bls.n	8008ed6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f28:	23ff      	movs	r3, #255	; 0xff
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 fcf6 	bl	800a930 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f44:	2101      	movs	r1, #1
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fe0f 	bl	800ab6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af04      	add	r7, sp, #16
 8008f5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f60:	2302      	movs	r3, #2
 8008f62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d102      	bne.n	8008f7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2203      	movs	r2, #3
 8008f78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b0b      	cmp	r3, #11
 8008f82:	f200 81be 	bhi.w	8009302 <USBH_Process+0x3aa>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <USBH_Process+0x34>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fbd 	.word	0x08008fbd
 8008f90:	08008fef 	.word	0x08008fef
 8008f94:	08009057 	.word	0x08009057
 8008f98:	0800929d 	.word	0x0800929d
 8008f9c:	08009303 	.word	0x08009303
 8008fa0:	080090fb 	.word	0x080090fb
 8008fa4:	08009243 	.word	0x08009243
 8008fa8:	08009131 	.word	0x08009131
 8008fac:	08009151 	.word	0x08009151
 8008fb0:	08009171 	.word	0x08009171
 8008fb4:	080091b5 	.word	0x080091b5
 8008fb8:	08009285 	.word	0x08009285
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 819e 	beq.w	8009306 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008fd0:	20c8      	movs	r0, #200	; 0xc8
 8008fd2:	f001 fe14 	bl	800abfe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fd07 	bl	800a9ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fec:	e18b      	b.n	8009306 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d107      	bne.n	8009008 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009006:	e18d      	b.n	8009324 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800900e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009012:	d914      	bls.n	800903e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800901a:	3301      	adds	r3, #1
 800901c:	b2da      	uxtb	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800902a:	2b03      	cmp	r3, #3
 800902c:	d903      	bls.n	8009036 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	220d      	movs	r2, #13
 8009032:	701a      	strb	r2, [r3, #0]
      break;
 8009034:	e176      	b.n	8009324 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
      break;
 800903c:	e172      	b.n	8009324 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009044:	f103 020a 	add.w	r2, r3, #10
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800904e:	200a      	movs	r0, #10
 8009050:	f001 fdd5 	bl	800abfe <USBH_Delay>
      break;
 8009054:	e166      	b.n	8009324 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009066:	2104      	movs	r1, #4
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800906c:	2064      	movs	r0, #100	; 0x64
 800906e:	f001 fdc6 	bl	800abfe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 fc92 	bl	800a99c <USBH_LL_GetSpeed>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2205      	movs	r2, #5
 8009086:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009088:	2100      	movs	r1, #0
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 faab 	bl	800a5e6 <USBH_AllocPipe>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009098:	2180      	movs	r1, #128	; 0x80
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 faa3 	bl	800a5e6 <USBH_AllocPipe>
 80090a0:	4603      	mov	r3, r0
 80090a2:	461a      	mov	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7919      	ldrb	r1, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090bc:	b292      	uxth	r2, r2
 80090be:	9202      	str	r2, [sp, #8]
 80090c0:	2200      	movs	r2, #0
 80090c2:	9201      	str	r2, [sp, #4]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4603      	mov	r3, r0
 80090c8:	2280      	movs	r2, #128	; 0x80
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 fa5c 	bl	800a588 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	7959      	ldrb	r1, [r3, #5]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80090e4:	b292      	uxth	r2, r2
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4603      	mov	r3, r0
 80090f0:	2200      	movs	r2, #0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fa48 	bl	800a588 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090f8:	e114      	b.n	8009324 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f918 	bl	8009330 <USBH_HandleEnum>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 80fe 	bne.w	800930a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800911c:	2b01      	cmp	r3, #1
 800911e:	d103      	bne.n	8009128 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2208      	movs	r2, #8
 8009124:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009126:	e0f0      	b.n	800930a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2207      	movs	r2, #7
 800912c:	701a      	strb	r2, [r3, #0]
      break;
 800912e:	e0ec      	b.n	800930a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80e9 	beq.w	800930e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009142:	2101      	movs	r1, #1
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2208      	movs	r2, #8
 800914c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800914e:	e0de      	b.n	800930e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009156:	b29b      	uxth	r3, r3
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc3f 	bl	80099de <USBH_SetCfg>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	f040 80d5 	bne.w	8009312 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2209      	movs	r2, #9
 800916c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800916e:	e0d0      	b.n	8009312 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d016      	beq.n	80091ac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800917e:	2101      	movs	r1, #1
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fc4f 	bl	8009a24 <USBH_SetFeature>
 8009186:	4603      	mov	r3, r0
 8009188:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d103      	bne.n	800919a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	220a      	movs	r2, #10
 8009196:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009198:	e0bd      	b.n	8009316 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	f040 80b9 	bne.w	8009316 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	220a      	movs	r2, #10
 80091a8:	701a      	strb	r2, [r3, #0]
      break;
 80091aa:	e0b4      	b.n	8009316 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	220a      	movs	r2, #10
 80091b0:	701a      	strb	r2, [r3, #0]
      break;
 80091b2:	e0b0      	b.n	8009316 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80ad 	beq.w	800931a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e016      	b.n	80091fc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091ce:	7bfa      	ldrb	r2, [r7, #15]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	32de      	adds	r2, #222	; 0xde
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	791a      	ldrb	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d108      	bne.n	80091f6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80091e4:	7bfa      	ldrb	r2, [r7, #15]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	32de      	adds	r2, #222	; 0xde
 80091ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80091f4:	e005      	b.n	8009202 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	3301      	adds	r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0e5      	beq.n	80091ce <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d016      	beq.n	800923a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2206      	movs	r2, #6
 8009222:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800922a:	2103      	movs	r1, #3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009230:	e073      	b.n	800931a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220d      	movs	r2, #13
 8009236:	701a      	strb	r2, [r3, #0]
      break;
 8009238:	e06f      	b.n	800931a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	220d      	movs	r2, #13
 800923e:	701a      	strb	r2, [r3, #0]
      break;
 8009240:	e06b      	b.n	800931a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d017      	beq.n	800927c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	4798      	blx	r3
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	220b      	movs	r2, #11
 8009268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800926a:	e058      	b.n	800931e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b02      	cmp	r3, #2
 8009272:	d154      	bne.n	800931e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	220d      	movs	r2, #13
 8009278:	701a      	strb	r2, [r3, #0]
      break;
 800927a:	e050      	b.n	800931e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	220d      	movs	r2, #13
 8009280:	701a      	strb	r2, [r3, #0]
      break;
 8009282:	e04c      	b.n	800931e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d049      	beq.n	8009322 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
      }
      break;
 800929a:	e042      	b.n	8009322 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff fd47 	bl	8008d38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d009      	beq.n	80092c8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092d8:	2105      	movs	r1, #5
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d107      	bne.n	80092fa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fe1f 	bl	8008f36 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092f8:	e014      	b.n	8009324 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fb18 	bl	800a930 <USBH_LL_Start>
      break;
 8009300:	e010      	b.n	8009324 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009302:	bf00      	nop
 8009304:	e00e      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 8009306:	bf00      	nop
 8009308:	e00c      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 800930a:	bf00      	nop
 800930c:	e00a      	b.n	8009324 <USBH_Process+0x3cc>
    break;
 800930e:	bf00      	nop
 8009310:	e008      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 8009312:	bf00      	nop
 8009314:	e006      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 8009316:	bf00      	nop
 8009318:	e004      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 800931a:	bf00      	nop
 800931c:	e002      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <USBH_Process+0x3cc>
      break;
 8009322:	bf00      	nop
  }
  return USBH_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop

08009330 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af04      	add	r7, sp, #16
 8009336:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800933c:	2301      	movs	r3, #1
 800933e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b07      	cmp	r3, #7
 8009346:	f200 81c1 	bhi.w	80096cc <USBH_HandleEnum+0x39c>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <USBH_HandleEnum+0x20>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009371 	.word	0x08009371
 8009354:	0800942f 	.word	0x0800942f
 8009358:	08009499 	.word	0x08009499
 800935c:	08009527 	.word	0x08009527
 8009360:	08009591 	.word	0x08009591
 8009364:	08009601 	.word	0x08009601
 8009368:	08009647 	.word	0x08009647
 800936c:	0800968d 	.word	0x0800968d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009370:	2108      	movs	r1, #8
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa50 	bl	8009818 <USBH_Get_DevDesc>
 8009378:	4603      	mov	r3, r0
 800937a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d130      	bne.n	80093e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	7919      	ldrb	r1, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093a6:	b292      	uxth	r2, r2
 80093a8:	9202      	str	r2, [sp, #8]
 80093aa:	2200      	movs	r2, #0
 80093ac:	9201      	str	r2, [sp, #4]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4603      	mov	r3, r0
 80093b2:	2280      	movs	r2, #128	; 0x80
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 f8e7 	bl	800a588 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	7959      	ldrb	r1, [r3, #5]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ce:	b292      	uxth	r2, r2
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	9201      	str	r2, [sp, #4]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	4603      	mov	r3, r0
 80093da:	2200      	movs	r2, #0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f8d3 	bl	800a588 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093e2:	e175      	b.n	80096d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	f040 8172 	bne.w	80096d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093f2:	3301      	adds	r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009402:	2b03      	cmp	r3, #3
 8009404:	d903      	bls.n	800940e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	220d      	movs	r2, #13
 800940a:	701a      	strb	r2, [r3, #0]
      break;
 800940c:	e160      	b.n	80096d0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	795b      	ldrb	r3, [r3, #5]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f907 	bl	800a628 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f901 	bl	800a628 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	701a      	strb	r2, [r3, #0]
      break;
 800942c:	e150      	b.n	80096d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800942e:	2112      	movs	r1, #18
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9f1 	bl	8009818 <USBH_Get_DevDesc>
 8009436:	4603      	mov	r3, r0
 8009438:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009446:	e145      	b.n	80096d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b03      	cmp	r3, #3
 800944c:	f040 8142 	bne.w	80096d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009456:	3301      	adds	r3, #1
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009466:	2b03      	cmp	r3, #3
 8009468:	d903      	bls.n	8009472 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	220d      	movs	r2, #13
 800946e:	701a      	strb	r2, [r3, #0]
      break;
 8009470:	e130      	b.n	80096d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	795b      	ldrb	r3, [r3, #5]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f8d5 	bl	800a628 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	791b      	ldrb	r3, [r3, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f8cf 	bl	800a628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
      break;
 8009496:	e11d      	b.n	80096d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009498:	2101      	movs	r1, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa7b 	bl	8009996 <USBH_SetAddress>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d132      	bne.n	8009510 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80094aa:	2002      	movs	r0, #2
 80094ac:	f001 fba7 	bl	800abfe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2203      	movs	r2, #3
 80094bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7919      	ldrb	r1, [r3, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094d2:	b292      	uxth	r2, r2
 80094d4:	9202      	str	r2, [sp, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	9201      	str	r2, [sp, #4]
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	4603      	mov	r3, r0
 80094de:	2280      	movs	r2, #128	; 0x80
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 f851 	bl	800a588 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7959      	ldrb	r1, [r3, #5]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094fa:	b292      	uxth	r2, r2
 80094fc:	9202      	str	r2, [sp, #8]
 80094fe:	2200      	movs	r2, #0
 8009500:	9201      	str	r2, [sp, #4]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	4603      	mov	r3, r0
 8009506:	2200      	movs	r2, #0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f83d 	bl	800a588 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800950e:	e0e3      	b.n	80096d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b03      	cmp	r3, #3
 8009514:	f040 80e0 	bne.w	80096d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	220d      	movs	r2, #13
 800951c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	705a      	strb	r2, [r3, #1]
      break;
 8009524:	e0d8      	b.n	80096d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009526:	2109      	movs	r1, #9
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f9a1 	bl	8009870 <USBH_Get_CfgDesc>
 800952e:	4603      	mov	r3, r0
 8009530:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2204      	movs	r2, #4
 800953c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800953e:	e0cd      	b.n	80096dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b03      	cmp	r3, #3
 8009544:	f040 80ca 	bne.w	80096dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800954e:	3301      	adds	r3, #1
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800955e:	2b03      	cmp	r3, #3
 8009560:	d903      	bls.n	800956a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	220d      	movs	r2, #13
 8009566:	701a      	strb	r2, [r3, #0]
      break;
 8009568:	e0b8      	b.n	80096dc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	795b      	ldrb	r3, [r3, #5]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 f859 	bl	800a628 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	791b      	ldrb	r3, [r3, #4]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 f853 	bl	800a628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
      break;
 800958e:	e0a5      	b.n	80096dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f969 	bl	8009870 <USBH_Get_CfgDesc>
 800959e:	4603      	mov	r3, r0
 80095a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2205      	movs	r2, #5
 80095ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095ae:	e097      	b.n	80096e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	f040 8094 	bne.w	80096e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095be:	3301      	adds	r3, #1
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d903      	bls.n	80095da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	220d      	movs	r2, #13
 80095d6:	701a      	strb	r2, [r3, #0]
      break;
 80095d8:	e082      	b.n	80096e0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	795b      	ldrb	r3, [r3, #5]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 f821 	bl	800a628 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	791b      	ldrb	r3, [r3, #4]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f81b 	bl	800a628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
      break;
 80095fe:	e06f      	b.n	80096e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009606:	2b00      	cmp	r3, #0
 8009608:	d019      	beq.n	800963e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009616:	23ff      	movs	r3, #255	; 0xff
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f953 	bl	80098c4 <USBH_Get_StringDesc>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d103      	bne.n	8009630 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2206      	movs	r2, #6
 800962c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800962e:	e059      	b.n	80096e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d156      	bne.n	80096e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2206      	movs	r2, #6
 800963a:	705a      	strb	r2, [r3, #1]
      break;
 800963c:	e052      	b.n	80096e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2206      	movs	r2, #6
 8009642:	705a      	strb	r2, [r3, #1]
      break;
 8009644:	e04e      	b.n	80096e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800964c:	2b00      	cmp	r3, #0
 800964e:	d019      	beq.n	8009684 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800965c:	23ff      	movs	r3, #255	; 0xff
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f930 	bl	80098c4 <USBH_Get_StringDesc>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2207      	movs	r2, #7
 8009672:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009674:	e038      	b.n	80096e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b03      	cmp	r3, #3
 800967a:	d135      	bne.n	80096e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2207      	movs	r2, #7
 8009680:	705a      	strb	r2, [r3, #1]
      break;
 8009682:	e031      	b.n	80096e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2207      	movs	r2, #7
 8009688:	705a      	strb	r2, [r3, #1]
      break;
 800968a:	e02d      	b.n	80096e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009692:	2b00      	cmp	r3, #0
 8009694:	d017      	beq.n	80096c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80096a2:	23ff      	movs	r3, #255	; 0xff
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f90d 	bl	80098c4 <USBH_Get_StringDesc>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80096b8:	e018      	b.n	80096ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d115      	bne.n	80096ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
      break;
 80096c4:	e012      	b.n	80096ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ca:	e00f      	b.n	80096ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 80096cc:	bf00      	nop
 80096ce:	e00e      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096d0:	bf00      	nop
 80096d2:	e00c      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096d4:	bf00      	nop
 80096d6:	e00a      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096d8:	bf00      	nop
 80096da:	e008      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096dc:	bf00      	nop
 80096de:	e006      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <USBH_HandleEnum+0x3be>
      break;
 80096ec:	bf00      	nop
  }
  return Status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f804 	bl	800973a <USBH_HandleSof>
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b0b      	cmp	r3, #11
 800974a:	d10a      	bne.n	8009762 <USBH_HandleSof+0x28>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
  }
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800977a:	bf00      	nop
}
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009796:	bf00      	nop
}
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 f8b8 	bl	800a966 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	791b      	ldrb	r3, [r3, #4]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 ff13 	bl	800a628 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	795b      	ldrb	r3, [r3, #5]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 ff0d 	bl	800a628 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009824:	887b      	ldrh	r3, [r7, #2]
 8009826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800982a:	d901      	bls.n	8009830 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800982c:	2303      	movs	r3, #3
 800982e:	e01b      	b.n	8009868 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009836:	887b      	ldrh	r3, [r7, #2]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009840:	2100      	movs	r1, #0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f872 	bl	800992c <USBH_GetDescriptor>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009858:	887a      	ldrh	r2, [r7, #2]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f929 	bl	8009ab4 <USBH_ParseDevDesc>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af02      	add	r7, sp, #8
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	331c      	adds	r3, #28
 8009880:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009882:	887b      	ldrh	r3, [r7, #2]
 8009884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009888:	d901      	bls.n	800988e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800988a:	2303      	movs	r3, #3
 800988c:	e016      	b.n	80098bc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009898:	2100      	movs	r1, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f846 	bl	800992c <USBH_GetDescriptor>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d107      	bne.n	80098ba <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80098aa:	887b      	ldrh	r3, [r7, #2]
 80098ac:	461a      	mov	r2, r3
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f9b3 	bl	8009c1c <USBH_ParseCfgDesc>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	461a      	mov	r2, r3
 80098d0:	460b      	mov	r3, r1
 80098d2:	72fb      	strb	r3, [r7, #11]
 80098d4:	4613      	mov	r3, r2
 80098d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80098d8:	893b      	ldrh	r3, [r7, #8]
 80098da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098de:	d802      	bhi.n	80098e6 <USBH_Get_StringDesc+0x22>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e01c      	b.n	8009924 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098f2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	460b      	mov	r3, r1
 8009900:	2100      	movs	r1, #0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f812 	bl	800992c <USBH_GetDescriptor>
 8009908:	4603      	mov	r3, r0
 800990a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009918:	893a      	ldrh	r2, [r7, #8]
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fb93 	bl	800a048 <USBH_ParseStringDesc>
  }

  return status;
 8009922:	7dfb      	ldrb	r3, [r7, #23]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	607b      	str	r3, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	72fb      	strb	r3, [r7, #11]
 800993a:	4613      	mov	r3, r2
 800993c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	789b      	ldrb	r3, [r3, #2]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d11c      	bne.n	8009980 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009946:	7afb      	ldrb	r3, [r7, #11]
 8009948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800994c:	b2da      	uxtb	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2206      	movs	r2, #6
 8009956:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	893a      	ldrh	r2, [r7, #8]
 800995c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800995e:	893b      	ldrh	r3, [r7, #8]
 8009960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009968:	d104      	bne.n	8009974 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f240 4209 	movw	r2, #1033	; 0x409
 8009970:	829a      	strh	r2, [r3, #20]
 8009972:	e002      	b.n	800997a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8b3a      	ldrh	r2, [r7, #24]
 800997e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009980:	8b3b      	ldrh	r3, [r7, #24]
 8009982:	461a      	mov	r2, r3
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fbac 	bl	800a0e4 <USBH_CtlReq>
 800998c:	4603      	mov	r3, r0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	789b      	ldrb	r3, [r3, #2]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d10f      	bne.n	80099ca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2205      	movs	r2, #5
 80099b4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099ca:	2200      	movs	r2, #0
 80099cc:	2100      	movs	r1, #0
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb88 	bl	800a0e4 <USBH_CtlReq>
 80099d4:	4603      	mov	r3, r0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	789b      	ldrb	r3, [r3, #2]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10e      	bne.n	8009a10 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2209      	movs	r2, #9
 80099fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	887a      	ldrh	r2, [r7, #2]
 8009a02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a10:	2200      	movs	r2, #0
 8009a12:	2100      	movs	r1, #0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fb65 	bl	800a0e4 <USBH_CtlReq>
 8009a1a:	4603      	mov	r3, r0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	789b      	ldrb	r3, [r3, #2]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d10f      	bne.n	8009a58 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2203      	movs	r2, #3
 8009a42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb41 	bl	800a0e4 <USBH_CtlReq>
 8009a62:	4603      	mov	r3, r0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	789b      	ldrb	r3, [r3, #2]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d10f      	bne.n	8009aa0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb1d 	bl	800a0e4 <USBH_CtlReq>
 8009aaa:	4603      	mov	r3, r0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f203 3326 	addw	r3, r3, #806	; 0x326
 8009ac8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e098      	b.n	8009c0a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	785a      	ldrb	r2, [r3, #1]
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3302      	adds	r3, #2
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	3303      	adds	r3, #3
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	021b      	lsls	r3, r3, #8
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4313      	orrs	r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	791a      	ldrb	r2, [r3, #4]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	795a      	ldrb	r2, [r3, #5]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	799a      	ldrb	r2, [r3, #6]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	79da      	ldrb	r2, [r3, #7]
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d004      	beq.n	8009b38 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d11b      	bne.n	8009b70 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	79db      	ldrb	r3, [r3, #7]
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	dc0f      	bgt.n	8009b60 <USBH_ParseDevDesc+0xac>
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	db0f      	blt.n	8009b64 <USBH_ParseDevDesc+0xb0>
 8009b44:	3b08      	subs	r3, #8
 8009b46:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <USBH_ParseDevDesc+0x164>)
 8009b48:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bf14      	ite	ne
 8009b54:	2301      	movne	r3, #1
 8009b56:	2300      	moveq	r3, #0
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <USBH_ParseDevDesc+0xb8>
 8009b5e:	e001      	b.n	8009b64 <USBH_ParseDevDesc+0xb0>
 8009b60:	2b40      	cmp	r3, #64	; 0x40
 8009b62:	d003      	beq.n	8009b6c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2208      	movs	r2, #8
 8009b68:	71da      	strb	r2, [r3, #7]
        break;
 8009b6a:	e000      	b.n	8009b6e <USBH_ParseDevDesc+0xba>
        break;
 8009b6c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b6e:	e00e      	b.n	8009b8e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d107      	bne.n	8009b8a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	79db      	ldrb	r3, [r3, #7]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d005      	beq.n	8009b8e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2208      	movs	r2, #8
 8009b86:	71da      	strb	r2, [r3, #7]
 8009b88:	e001      	b.n	8009b8e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	2b08      	cmp	r3, #8
 8009b92:	d939      	bls.n	8009c08 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	3308      	adds	r3, #8
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3309      	adds	r3, #9
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	330a      	adds	r3, #10
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	330b      	adds	r3, #11
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	330c      	adds	r3, #12
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	330d      	adds	r3, #13
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	021b      	lsls	r3, r3, #8
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4313      	orrs	r3, r2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	7b9a      	ldrb	r2, [r3, #14]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	7bda      	ldrb	r2, [r3, #15]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	7c1a      	ldrb	r2, [r3, #16]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	7c5a      	ldrb	r2, [r3, #17]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	01000101 	.word	0x01000101

08009c1c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08c      	sub	sp, #48	; 0x30
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c30:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e0db      	b.n	8009e06 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	781a      	ldrb	r2, [r3, #0]
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	785a      	ldrb	r2, [r3, #1]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	3302      	adds	r3, #2
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3303      	adds	r3, #3
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7e:	bf28      	it	cs
 8009c80:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	791a      	ldrb	r2, [r3, #4]
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	795a      	ldrb	r2, [r3, #5]
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	799a      	ldrb	r2, [r3, #6]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	79da      	ldrb	r2, [r3, #7]
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	7a1a      	ldrb	r2, [r3, #8]
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	d002      	beq.n	8009cc0 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	2209      	movs	r2, #9
 8009cbe:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	2b09      	cmp	r3, #9
 8009cc4:	f240 809d 	bls.w	8009e02 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cc8:	2309      	movs	r3, #9
 8009cca:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cd0:	e081      	b.n	8009dd6 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cd2:	f107 0316 	add.w	r3, r7, #22
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cda:	f000 f9e8 	bl	800a0ae <USBH_GetNextDesc>
 8009cde:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d176      	bne.n	8009dd6 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d002      	beq.n	8009cf6 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	2209      	movs	r2, #9
 8009cf4:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cfa:	221a      	movs	r2, #26
 8009cfc:	fb02 f303 	mul.w	r3, r2, r3
 8009d00:	3308      	adds	r3, #8
 8009d02:	6a3a      	ldr	r2, [r7, #32]
 8009d04:	4413      	add	r3, r2
 8009d06:	3302      	adds	r3, #2
 8009d08:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0c:	69f8      	ldr	r0, [r7, #28]
 8009d0e:	f000 f87e 	bl	8009e0e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d1c:	e043      	b.n	8009da6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d1e:	f107 0316 	add.w	r3, r7, #22
 8009d22:	4619      	mov	r1, r3
 8009d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d26:	f000 f9c2 	bl	800a0ae <USBH_GetNextDesc>
 8009d2a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d138      	bne.n	8009da6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	795b      	ldrb	r3, [r3, #5]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d113      	bne.n	8009d64 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d003      	beq.n	8009d4c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	799b      	ldrb	r3, [r3, #6]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d10b      	bne.n	8009d64 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	79db      	ldrb	r3, [r3, #7]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <USBH_ParseCfgDesc+0x150>
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b09      	cmp	r3, #9
 8009d5a:	d007      	beq.n	8009d6c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	2209      	movs	r2, #9
 8009d60:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d62:	e003      	b.n	8009d6c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2207      	movs	r2, #7
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	e000      	b.n	8009d6e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d6c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d76:	3201      	adds	r2, #1
 8009d78:	00d2      	lsls	r2, r2, #3
 8009d7a:	211a      	movs	r1, #26
 8009d7c:	fb01 f303 	mul.w	r3, r1, r3
 8009d80:	4413      	add	r3, r2
 8009d82:	3308      	adds	r3, #8
 8009d84:	6a3a      	ldr	r2, [r7, #32]
 8009d86:	4413      	add	r3, r2
 8009d88:	3304      	adds	r3, #4
 8009d8a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d8e:	69b9      	ldr	r1, [r7, #24]
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f870 	bl	8009e76 <USBH_ParseEPDesc>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009da0:	3301      	adds	r3, #1
 8009da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d204      	bcs.n	8009dbc <USBH_ParseCfgDesc+0x1a0>
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	885a      	ldrh	r2, [r3, #2]
 8009db6:	8afb      	ldrh	r3, [r7, #22]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d8b0      	bhi.n	8009d1e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	791b      	ldrb	r3, [r3, #4]
 8009dc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d201      	bcs.n	8009dcc <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e01c      	b.n	8009e06 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8009dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d805      	bhi.n	8009dea <USBH_ParseCfgDesc+0x1ce>
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	885a      	ldrh	r2, [r3, #2]
 8009de2:	8afb      	ldrh	r3, [r7, #22]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	f63f af74 	bhi.w	8009cd2 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	791b      	ldrb	r3, [r3, #4]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	bf28      	it	cs
 8009df2:	2302      	movcs	r3, #2
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d201      	bcs.n	8009e02 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e001      	b.n	8009e06 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8009e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3730      	adds	r7, #48	; 0x30
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	785a      	ldrb	r2, [r3, #1]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	789a      	ldrb	r2, [r3, #2]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	78da      	ldrb	r2, [r3, #3]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	bf28      	it	cs
 8009e42:	2302      	movcs	r3, #2
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	795a      	ldrb	r2, [r3, #5]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	799a      	ldrb	r2, [r3, #6]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	79da      	ldrb	r2, [r3, #7]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	7a1a      	ldrb	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	721a      	strb	r2, [r3, #8]
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	781a      	ldrb	r2, [r3, #0]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	785a      	ldrb	r2, [r3, #1]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	789a      	ldrb	r2, [r3, #2]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	78da      	ldrb	r2, [r3, #3]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3305      	adds	r3, #5
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	799a      	ldrb	r2, [r3, #6]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	889b      	ldrh	r3, [r3, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eda:	d804      	bhi.n	8009ee6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ee4:	d901      	bls.n	8009eea <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d136      	bne.n	8009f62 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	78db      	ldrb	r3, [r3, #3]
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d108      	bne.n	8009f12 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	889b      	ldrh	r3, [r3, #4]
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f08:	f240 8097 	bls.w	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e093      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	78db      	ldrb	r3, [r3, #3]
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d107      	bne.n	8009f2e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	889b      	ldrh	r3, [r3, #4]
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	f240 8089 	bls.w	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	75fb      	strb	r3, [r7, #23]
 8009f2c:	e085      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	78db      	ldrb	r3, [r3, #3]
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d005      	beq.n	8009f46 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	78db      	ldrb	r3, [r3, #3]
 8009f3e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d10a      	bne.n	8009f5c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	799b      	ldrb	r3, [r3, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <USBH_ParseEPDesc+0xe0>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	799b      	ldrb	r3, [r3, #6]
 8009f52:	2b10      	cmp	r3, #16
 8009f54:	d970      	bls.n	800a038 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f56:	2303      	movs	r3, #3
 8009f58:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f5a:	e06d      	b.n	800a038 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	75fb      	strb	r3, [r7, #23]
 8009f60:	e06b      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d13c      	bne.n	8009fe6 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	78db      	ldrb	r3, [r3, #3]
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d005      	beq.n	8009f84 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	78db      	ldrb	r3, [r3, #3]
 8009f7c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	889b      	ldrh	r3, [r3, #4]
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d956      	bls.n	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f90:	e053      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	78db      	ldrb	r3, [r3, #3]
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10e      	bne.n	8009fbc <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	799b      	ldrb	r3, [r3, #6]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d007      	beq.n	8009fb6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009faa:	2b10      	cmp	r3, #16
 8009fac:	d803      	bhi.n	8009fb6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009fb2:	2b40      	cmp	r3, #64	; 0x40
 8009fb4:	d941      	bls.n	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	75fb      	strb	r3, [r7, #23]
 8009fba:	e03e      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	78db      	ldrb	r3, [r3, #3]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d10b      	bne.n	8009fe0 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	799b      	ldrb	r3, [r3, #6]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <USBH_ParseEPDesc+0x164>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	889b      	ldrh	r3, [r3, #4]
 8009fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fd8:	d32f      	bcc.n	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	75fb      	strb	r3, [r7, #23]
 8009fde:	e02c      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	75fb      	strb	r3, [r7, #23]
 8009fe4:	e029      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d120      	bne.n	800a032 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	78db      	ldrb	r3, [r3, #3]
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	889b      	ldrh	r3, [r3, #4]
 800a000:	2b08      	cmp	r3, #8
 800a002:	d01a      	beq.n	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
 800a008:	e017      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b03      	cmp	r3, #3
 800a014:	d10a      	bne.n	800a02c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	799b      	ldrb	r3, [r3, #6]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <USBH_ParseEPDesc+0x1b0>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	889b      	ldrh	r3, [r3, #4]
 800a022:	2b08      	cmp	r3, #8
 800a024:	d909      	bls.n	800a03a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a026:	2303      	movs	r3, #3
 800a028:	75fb      	strb	r3, [r7, #23]
 800a02a:	e006      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a02c:	2303      	movs	r3, #3
 800a02e:	75fb      	strb	r3, [r7, #23]
 800a030:	e003      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a032:	2303      	movs	r3, #3
 800a034:	75fb      	strb	r3, [r7, #23]
 800a036:	e000      	b.n	800a03a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a038:	bf00      	nop
  }

  return status;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d120      	bne.n	800a0a2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	1e9a      	subs	r2, r3, #2
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	4293      	cmp	r3, r2
 800a06a:	bf28      	it	cs
 800a06c:	4613      	movcs	r3, r2
 800a06e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3302      	adds	r3, #2
 800a074:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a076:	2300      	movs	r3, #0
 800a078:	82fb      	strh	r3, [r7, #22]
 800a07a:	e00b      	b.n	800a094 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a07c:	8afb      	ldrh	r3, [r7, #22]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	781a      	ldrb	r2, [r3, #0]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a08e:	8afb      	ldrh	r3, [r7, #22]
 800a090:	3302      	adds	r3, #2
 800a092:	82fb      	strh	r3, [r7, #22]
 800a094:	8afa      	ldrh	r2, [r7, #22]
 800a096:	8abb      	ldrh	r3, [r7, #20]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3ef      	bcc.n	800a07c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	881a      	ldrh	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	789b      	ldrb	r3, [r3, #2]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d002      	beq.n	800a104 <USBH_CtlReq+0x20>
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d00f      	beq.n	800a122 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a102:	e027      	b.n	800a154 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	88fa      	ldrh	r2, [r7, #6]
 800a10e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2202      	movs	r2, #2
 800a11a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
      break;
 800a120:	e018      	b.n	800a154 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f81c 	bl	800a160 <USBH_HandleControl>
 800a128:	4603      	mov	r3, r0
 800a12a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <USBH_CtlReq+0x54>
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	2b03      	cmp	r3, #3
 800a136:	d106      	bne.n	800a146 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	761a      	strb	r2, [r3, #24]
      break;
 800a144:	e005      	b.n	800a152 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d102      	bne.n	800a152 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	709a      	strb	r2, [r3, #2]
      break;
 800a152:	bf00      	nop
  }
  return status;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7e1b      	ldrb	r3, [r3, #24]
 800a174:	3b01      	subs	r3, #1
 800a176:	2b0a      	cmp	r3, #10
 800a178:	f200 8156 	bhi.w	800a428 <USBH_HandleControl+0x2c8>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <USBH_HandleControl+0x24>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a1b1 	.word	0x0800a1b1
 800a188:	0800a1cb 	.word	0x0800a1cb
 800a18c:	0800a235 	.word	0x0800a235
 800a190:	0800a25b 	.word	0x0800a25b
 800a194:	0800a293 	.word	0x0800a293
 800a198:	0800a2bd 	.word	0x0800a2bd
 800a19c:	0800a30f 	.word	0x0800a30f
 800a1a0:	0800a331 	.word	0x0800a331
 800a1a4:	0800a36d 	.word	0x0800a36d
 800a1a8:	0800a393 	.word	0x0800a393
 800a1ac:	0800a3d1 	.word	0x0800a3d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f103 0110 	add.w	r1, r3, #16
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	795b      	ldrb	r3, [r3, #5]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f943 	bl	800a448 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	761a      	strb	r2, [r3, #24]
      break;
 800a1c8:	e139      	b.n	800a43e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fcb7 	bl	800ab44 <USBH_LL_GetURBState>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d11e      	bne.n	800a21e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7c1b      	ldrb	r3, [r3, #16]
 800a1e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8adb      	ldrh	r3, [r3, #22]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a1f2:	7b7b      	ldrb	r3, [r7, #13]
 800a1f4:	2b80      	cmp	r3, #128	; 0x80
 800a1f6:	d103      	bne.n	800a200 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2203      	movs	r2, #3
 800a1fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1fe:	e115      	b.n	800a42c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2205      	movs	r2, #5
 800a204:	761a      	strb	r2, [r3, #24]
      break;
 800a206:	e111      	b.n	800a42c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a208:	7b7b      	ldrb	r3, [r7, #13]
 800a20a:	2b80      	cmp	r3, #128	; 0x80
 800a20c:	d103      	bne.n	800a216 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2209      	movs	r2, #9
 800a212:	761a      	strb	r2, [r3, #24]
      break;
 800a214:	e10a      	b.n	800a42c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2207      	movs	r2, #7
 800a21a:	761a      	strb	r2, [r3, #24]
      break;
 800a21c:	e106      	b.n	800a42c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b04      	cmp	r3, #4
 800a222:	d003      	beq.n	800a22c <USBH_HandleControl+0xcc>
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b02      	cmp	r3, #2
 800a228:	f040 8100 	bne.w	800a42c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	220b      	movs	r2, #11
 800a230:	761a      	strb	r2, [r3, #24]
      break;
 800a232:	e0fb      	b.n	800a42c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6899      	ldr	r1, [r3, #8]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	899a      	ldrh	r2, [r3, #12]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	791b      	ldrb	r3, [r3, #4]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f93a 	bl	800a4c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2204      	movs	r2, #4
 800a256:	761a      	strb	r2, [r3, #24]
      break;
 800a258:	e0f1      	b.n	800a43e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fc6f 	bl	800ab44 <USBH_LL_GetURBState>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d102      	bne.n	800a276 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2209      	movs	r2, #9
 800a274:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	2b05      	cmp	r3, #5
 800a27a:	d102      	bne.n	800a282 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a27c:	2303      	movs	r3, #3
 800a27e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a280:	e0d6      	b.n	800a430 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b04      	cmp	r3, #4
 800a286:	f040 80d3 	bne.w	800a430 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	220b      	movs	r2, #11
 800a28e:	761a      	strb	r2, [r3, #24]
      break;
 800a290:	e0ce      	b.n	800a430 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6899      	ldr	r1, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	899a      	ldrh	r2, [r3, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	795b      	ldrb	r3, [r3, #5]
 800a29e:	2001      	movs	r0, #1
 800a2a0:	9000      	str	r0, [sp, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f8ea 	bl	800a47c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	761a      	strb	r2, [r3, #24]
      break;
 800a2ba:	e0c0      	b.n	800a43e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	795b      	ldrb	r3, [r3, #5]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fc3e 	bl	800ab44 <USBH_LL_GetURBState>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d103      	bne.n	800a2da <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2207      	movs	r2, #7
 800a2d6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2d8:	e0ac      	b.n	800a434 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b05      	cmp	r3, #5
 800a2de:	d105      	bne.n	800a2ec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	220c      	movs	r2, #12
 800a2e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ea:	e0a3      	b.n	800a434 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d103      	bne.n	800a2fa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2205      	movs	r2, #5
 800a2f6:	761a      	strb	r2, [r3, #24]
      break;
 800a2f8:	e09c      	b.n	800a434 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	f040 8099 	bne.w	800a434 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	220b      	movs	r2, #11
 800a306:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	73fb      	strb	r3, [r7, #15]
      break;
 800a30c:	e092      	b.n	800a434 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	791b      	ldrb	r3, [r3, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f8d5 	bl	800a4c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2208      	movs	r2, #8
 800a32c:	761a      	strb	r2, [r3, #24]

      break;
 800a32e:	e086      	b.n	800a43e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	791b      	ldrb	r3, [r3, #4]
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fc04 	bl	800ab44 <USBH_LL_GetURBState>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d105      	bne.n	800a352 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	220d      	movs	r2, #13
 800a34a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a350:	e072      	b.n	800a438 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	2b04      	cmp	r3, #4
 800a356:	d103      	bne.n	800a360 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	220b      	movs	r2, #11
 800a35c:	761a      	strb	r2, [r3, #24]
      break;
 800a35e:	e06b      	b.n	800a438 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	2b05      	cmp	r3, #5
 800a364:	d168      	bne.n	800a438 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a366:	2303      	movs	r3, #3
 800a368:	73fb      	strb	r3, [r7, #15]
      break;
 800a36a:	e065      	b.n	800a438 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	795b      	ldrb	r3, [r3, #5]
 800a370:	2201      	movs	r2, #1
 800a372:	9200      	str	r2, [sp, #0]
 800a374:	2200      	movs	r2, #0
 800a376:	2100      	movs	r1, #0
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f87f 	bl	800a47c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a384:	b29a      	uxth	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	220a      	movs	r2, #10
 800a38e:	761a      	strb	r2, [r3, #24]
      break;
 800a390:	e055      	b.n	800a43e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fbd3 	bl	800ab44 <USBH_LL_GetURBState>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d105      	bne.n	800a3b4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	220d      	movs	r2, #13
 800a3b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3b2:	e043      	b.n	800a43c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d103      	bne.n	800a3c2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2209      	movs	r2, #9
 800a3be:	761a      	strb	r2, [r3, #24]
      break;
 800a3c0:	e03c      	b.n	800a43c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d139      	bne.n	800a43c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	220b      	movs	r2, #11
 800a3cc:	761a      	strb	r2, [r3, #24]
      break;
 800a3ce:	e035      	b.n	800a43c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7e5b      	ldrb	r3, [r3, #25]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	765a      	strb	r2, [r3, #25]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	7e5b      	ldrb	r3, [r3, #25]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d806      	bhi.n	800a3f2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a3f0:	e025      	b.n	800a43e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3f8:	2106      	movs	r1, #6
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	795b      	ldrb	r3, [r3, #5]
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f90c 	bl	800a628 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f906 	bl	800a628 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a422:	2302      	movs	r3, #2
 800a424:	73fb      	strb	r3, [r7, #15]
      break;
 800a426:	e00a      	b.n	800a43e <USBH_HandleControl+0x2de>

    default:
      break;
 800a428:	bf00      	nop
 800a42a:	e008      	b.n	800a43e <USBH_HandleControl+0x2de>
      break;
 800a42c:	bf00      	nop
 800a42e:	e006      	b.n	800a43e <USBH_HandleControl+0x2de>
      break;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <USBH_HandleControl+0x2de>
      break;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <USBH_HandleControl+0x2de>
      break;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <USBH_HandleControl+0x2de>
      break;
 800a43c:	bf00      	nop
  }

  return status;
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af04      	add	r7, sp, #16
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a456:	79f9      	ldrb	r1, [r7, #7]
 800a458:	2300      	movs	r3, #0
 800a45a:	9303      	str	r3, [sp, #12]
 800a45c:	2308      	movs	r3, #8
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	2300      	movs	r3, #0
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	2300      	movs	r3, #0
 800a46a:	2200      	movs	r2, #0
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 fb38 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af04      	add	r7, sp, #16
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	460b      	mov	r3, r1
 800a48c:	80fb      	strh	r3, [r7, #6]
 800a48e:	4613      	mov	r3, r2
 800a490:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4a0:	7979      	ldrb	r1, [r7, #5]
 800a4a2:	7e3b      	ldrb	r3, [r7, #24]
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	88fb      	ldrh	r3, [r7, #6]
 800a4a8:	9302      	str	r3, [sp, #8]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fb13 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b088      	sub	sp, #32
 800a4ca:	af04      	add	r7, sp, #16
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	80fb      	strh	r3, [r7, #6]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4dc:	7979      	ldrb	r1, [r7, #5]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9303      	str	r3, [sp, #12]
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 faf5 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a4f8:	2300      	movs	r3, #0

}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	af04      	add	r7, sp, #16
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	4611      	mov	r1, r2
 800a50e:	461a      	mov	r2, r3
 800a510:	460b      	mov	r3, r1
 800a512:	80fb      	strh	r3, [r7, #6]
 800a514:	4613      	mov	r3, r2
 800a516:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a526:	7979      	ldrb	r1, [r7, #5]
 800a528:	7e3b      	ldrb	r3, [r7, #24]
 800a52a:	9303      	str	r3, [sp, #12]
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	9302      	str	r3, [sp, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	2301      	movs	r3, #1
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	2302      	movs	r3, #2
 800a53a:	2200      	movs	r2, #0
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fad0 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af04      	add	r7, sp, #16
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	460b      	mov	r3, r1
 800a55c:	80fb      	strh	r3, [r7, #6]
 800a55e:	4613      	mov	r3, r2
 800a560:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a562:	7979      	ldrb	r1, [r7, #5]
 800a564:	2300      	movs	r3, #0
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	9302      	str	r3, [sp, #8]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	2301      	movs	r3, #1
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	2302      	movs	r3, #2
 800a576:	2201      	movs	r2, #1
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fab2 	bl	800aae2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	4608      	mov	r0, r1
 800a592:	4611      	mov	r1, r2
 800a594:	461a      	mov	r2, r3
 800a596:	4603      	mov	r3, r0
 800a598:	70fb      	strb	r3, [r7, #3]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70bb      	strb	r3, [r7, #2]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a5a2:	7878      	ldrb	r0, [r7, #1]
 800a5a4:	78ba      	ldrb	r2, [r7, #2]
 800a5a6:	78f9      	ldrb	r1, [r7, #3]
 800a5a8:	8b3b      	ldrh	r3, [r7, #24]
 800a5aa:	9302      	str	r3, [sp, #8]
 800a5ac:	7d3b      	ldrb	r3, [r7, #20]
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	7c3b      	ldrb	r3, [r7, #16]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa45 	bl	800aa46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa64 	bl	800aaa4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f836 	bl	800a664 <USBH_GetFreePipe>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a5fc:	89fb      	ldrh	r3, [r7, #14]
 800a5fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a602:	4293      	cmp	r3, r2
 800a604:	d00a      	beq.n	800a61c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a606:	78fa      	ldrb	r2, [r7, #3]
 800a608:	89fb      	ldrh	r3, [r7, #14]
 800a60a:	f003 030f 	and.w	r3, r3, #15
 800a60e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	33e0      	adds	r3, #224	; 0xe0
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a61c:	89fb      	ldrh	r3, [r7, #14]
 800a61e:	b2db      	uxtb	r3, r3
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	2b0f      	cmp	r3, #15
 800a638:	d80d      	bhi.n	800a656 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	33e0      	adds	r3, #224	; 0xe0
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	33e0      	adds	r3, #224	; 0xe0
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]
 800a674:	e00f      	b.n	800a696 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	33e0      	adds	r3, #224	; 0xe0
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	e007      	b.n	800a6a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	3301      	adds	r3, #1
 800a694:	73fb      	strb	r3, [r7, #15]
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	2b0f      	cmp	r3, #15
 800a69a:	d9ec      	bls.n	800a676 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	490e      	ldr	r1, [pc, #56]	; (800a6ec <MX_USB_HOST_Init+0x40>)
 800a6b4:	480e      	ldr	r0, [pc, #56]	; (800a6f0 <MX_USB_HOST_Init+0x44>)
 800a6b6:	f7fe fb05 	bl	8008cc4 <USBH_Init>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a6c0:	f7f7 ffda 	bl	8002678 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a6c4:	490b      	ldr	r1, [pc, #44]	; (800a6f4 <MX_USB_HOST_Init+0x48>)
 800a6c6:	480a      	ldr	r0, [pc, #40]	; (800a6f0 <MX_USB_HOST_Init+0x44>)
 800a6c8:	f7fe fba9 	bl	8008e1e <USBH_RegisterClass>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a6d2:	f7f7 ffd1 	bl	8002678 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a6d6:	4806      	ldr	r0, [pc, #24]	; (800a6f0 <MX_USB_HOST_Init+0x44>)
 800a6d8:	f7fe fc2d 	bl	8008f36 <USBH_Start>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a6e2:	f7f7 ffc9 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0800a70d 	.word	0x0800a70d
 800a6f0:	200004cc 	.word	0x200004cc
 800a6f4:	20000068 	.word	0x20000068

0800a6f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a6fc:	4802      	ldr	r0, [pc, #8]	; (800a708 <MX_USB_HOST_Process+0x10>)
 800a6fe:	f7fe fc2b 	bl	8008f58 <USBH_Process>
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200004cc 	.word	0x200004cc

0800a70c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d819      	bhi.n	800a754 <USBH_UserProcess+0x48>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <USBH_UserProcess+0x1c>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a755 	.word	0x0800a755
 800a72c:	0800a745 	.word	0x0800a745
 800a730:	0800a755 	.word	0x0800a755
 800a734:	0800a74d 	.word	0x0800a74d
 800a738:	0800a73d 	.word	0x0800a73d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <USBH_UserProcess+0x58>)
 800a73e:	2203      	movs	r2, #3
 800a740:	701a      	strb	r2, [r3, #0]
  break;
 800a742:	e008      	b.n	800a756 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a744:	4b07      	ldr	r3, [pc, #28]	; (800a764 <USBH_UserProcess+0x58>)
 800a746:	2202      	movs	r2, #2
 800a748:	701a      	strb	r2, [r3, #0]
  break;
 800a74a:	e004      	b.n	800a756 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <USBH_UserProcess+0x58>)
 800a74e:	2201      	movs	r2, #1
 800a750:	701a      	strb	r2, [r3, #0]
  break;
 800a752:	e000      	b.n	800a756 <USBH_UserProcess+0x4a>

  default:
  break;
 800a754:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a756:	bf00      	nop
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	200008a4 	.word	0x200008a4

0800a768 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	; 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	609a      	str	r2, [r3, #8]
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a788:	d13a      	bne.n	800a800 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	4b1e      	ldr	r3, [pc, #120]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	4a1d      	ldr	r2, [pc, #116]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a794:	f043 0301 	orr.w	r3, r3, #1
 800a798:	6313      	str	r3, [r2, #48]	; 0x30
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a7a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7b8:	230a      	movs	r3, #10
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7bc:	f107 0314 	add.w	r3, r7, #20
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4812      	ldr	r0, [pc, #72]	; (800a80c <HAL_HCD_MspInit+0xa4>)
 800a7c4:	f7f8 fcd4 	bl	8003170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7cc:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d2:	6353      	str	r3, [r2, #52]	; 0x34
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7dc:	4a0a      	ldr	r2, [pc, #40]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a7de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e2:	6453      	str	r3, [r2, #68]	; 0x44
 800a7e4:	4b08      	ldr	r3, [pc, #32]	; (800a808 <HAL_HCD_MspInit+0xa0>)
 800a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	2043      	movs	r0, #67	; 0x43
 800a7f6:	f7f8 fbf2 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7fa:	2043      	movs	r0, #67	; 0x43
 800a7fc:	f7f8 fc0b 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a800:	bf00      	nop
 800a802:	3728      	adds	r7, #40	; 0x28
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40023800 	.word	0x40023800
 800a80c:	40020000 	.word	0x40020000

0800a810 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe ff79 	bl	8009716 <USBH_LL_IncTimer>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe ffb1 	bl	80097a2 <USBH_LL_Connect>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe ffba 	bl	80097d0 <USBH_LL_Disconnect>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
 800a870:	4613      	mov	r3, r2
 800a872:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe ff6b 	bl	800976a <USBH_LL_PortEnabled>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe ff6b 	bl	8009786 <USBH_LL_PortDisabled>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d12a      	bne.n	800a920 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a8ca:	4a18      	ldr	r2, [pc, #96]	; (800a92c <USBH_LL_Init+0x74>)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a15      	ldr	r2, [pc, #84]	; (800a92c <USBH_LL_Init+0x74>)
 800a8d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8da:	4b14      	ldr	r3, [pc, #80]	; (800a92c <USBH_LL_Init+0x74>)
 800a8dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <USBH_LL_Init+0x74>)
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a8e8:	4b10      	ldr	r3, [pc, #64]	; (800a92c <USBH_LL_Init+0x74>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <USBH_LL_Init+0x74>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <USBH_LL_Init+0x74>)
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <USBH_LL_Init+0x74>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a900:	480a      	ldr	r0, [pc, #40]	; (800a92c <USBH_LL_Init+0x74>)
 800a902:	f7f8 fdea 	bl	80034da <HAL_HCD_Init>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a90c:	f7f7 feb4 	bl	8002678 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a910:	4806      	ldr	r0, [pc, #24]	; (800a92c <USBH_LL_Init+0x74>)
 800a912:	f7f9 fa4b 	bl	8003dac <HAL_HCD_GetCurrentFrame>
 800a916:	4603      	mov	r3, r0
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fe feec 	bl	80096f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	200008a8 	.word	0x200008a8

0800a930 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a946:	4618      	mov	r0, r3
 800a948:	f7f9 f9b8 	bl	8003cbc <HAL_HCD_Start>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f95e 	bl	800ac14 <USBH_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7f9 f9c0 	bl	8003d02 <HAL_HCD_Stop>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 f943 	bl	800ac14 <USBH_Get_USB_Status>
 800a98e:	4603      	mov	r3, r0
 800a990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a992:	7bbb      	ldrb	r3, [r7, #14]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f9 fa0a 	bl	8003dc8 <HAL_HCD_GetCurrentSpeed>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d00c      	beq.n	800a9d4 <USBH_LL_GetSpeed+0x38>
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d80d      	bhi.n	800a9da <USBH_LL_GetSpeed+0x3e>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <USBH_LL_GetSpeed+0x2c>
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d003      	beq.n	800a9ce <USBH_LL_GetSpeed+0x32>
 800a9c6:	e008      	b.n	800a9da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a9cc:	e008      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d2:	e005      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d8:	e002      	b.n	800a9e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9de:	bf00      	nop
  }
  return  speed;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f9 f99b 	bl	8003d3c <HAL_HCD_ResetPort>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f901 	bl	800ac14 <USBH_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa32:	78fa      	ldrb	r2, [r7, #3]
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f9 f9a3 	bl	8003d82 <HAL_HCD_HC_GetXferCount>
 800aa3c:	4603      	mov	r3, r0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa46:	b590      	push	{r4, r7, lr}
 800aa48:	b089      	sub	sp, #36	; 0x24
 800aa4a:	af04      	add	r7, sp, #16
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4611      	mov	r1, r2
 800aa52:	461a      	mov	r2, r3
 800aa54:	4603      	mov	r3, r0
 800aa56:	70fb      	strb	r3, [r7, #3]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70bb      	strb	r3, [r7, #2]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa6e:	787c      	ldrb	r4, [r7, #1]
 800aa70:	78ba      	ldrb	r2, [r7, #2]
 800aa72:	78f9      	ldrb	r1, [r7, #3]
 800aa74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa76:	9302      	str	r3, [sp, #8]
 800aa78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4623      	mov	r3, r4
 800aa86:	f7f8 fd8f 	bl	80035a8 <HAL_HCD_HC_Init>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 f8bf 	bl	800ac14 <USBH_Get_USB_Status>
 800aa96:	4603      	mov	r3, r0
 800aa98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f8 fe28 	bl	8003718 <HAL_HCD_HC_Halt>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f8a0 	bl	800ac14 <USBH_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aae2:	b590      	push	{r4, r7, lr}
 800aae4:	b089      	sub	sp, #36	; 0x24
 800aae6:	af04      	add	r7, sp, #16
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	70fb      	strb	r3, [r7, #3]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70bb      	strb	r3, [r7, #2]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab0a:	787c      	ldrb	r4, [r7, #1]
 800ab0c:	78ba      	ldrb	r2, [r7, #2]
 800ab0e:	78f9      	ldrb	r1, [r7, #3]
 800ab10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab18:	9302      	str	r3, [sp, #8]
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4623      	mov	r3, r4
 800ab26:	f7f8 fe1b 	bl	8003760 <HAL_HCD_HC_SubmitRequest>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 f86f 	bl	800ac14 <USBH_Get_USB_Status>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd90      	pop	{r4, r7, pc}

0800ab44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f9 f8fc 	bl	8003d58 <HAL_HCD_HC_GetURBState>
 800ab60:	4603      	mov	r3, r0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d103      	bne.n	800ab88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f872 	bl	800ac6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab88:	20c8      	movs	r0, #200	; 0xc8
 800ab8a:	f7f8 f929 	bl	8002de0 <HAL_Delay>
  return USBH_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
 800aba4:	4613      	mov	r3, r2
 800aba6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	4613      	mov	r3, r2
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	1a9b      	subs	r3, r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	440b      	add	r3, r1
 800abbe:	3317      	adds	r3, #23
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	68f9      	ldr	r1, [r7, #12]
 800abca:	4613      	mov	r3, r2
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	1a9b      	subs	r3, r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	440b      	add	r3, r1
 800abd4:	333c      	adds	r3, #60	; 0x3c
 800abd6:	78ba      	ldrb	r2, [r7, #2]
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e009      	b.n	800abf0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	4613      	mov	r3, r2
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	440b      	add	r3, r1
 800abea:	333d      	adds	r3, #61	; 0x3d
 800abec:	78ba      	ldrb	r2, [r7, #2]
 800abee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7f8 f8ea 	bl	8002de0 <HAL_Delay>
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d817      	bhi.n	800ac58 <USBH_Get_USB_Status+0x44>
 800ac28:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <USBH_Get_USB_Status+0x1c>)
 800ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2e:	bf00      	nop
 800ac30:	0800ac41 	.word	0x0800ac41
 800ac34:	0800ac47 	.word	0x0800ac47
 800ac38:	0800ac4d 	.word	0x0800ac4d
 800ac3c:	0800ac53 	.word	0x0800ac53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
    break;
 800ac44:	e00b      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ac46:	2302      	movs	r3, #2
 800ac48:	73fb      	strb	r3, [r7, #15]
    break;
 800ac4a:	e008      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac50:	e005      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	73fb      	strb	r3, [r7, #15]
    break;
 800ac56:	e002      	b.n	800ac5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5c:	bf00      	nop
  }
  return usb_status;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
 800ac84:	e001      	b.n	800ac8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	2101      	movs	r1, #1
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <MX_DriverVbusFS+0x34>)
 800ac92:	f7f8 fc09 	bl	80034a8 <HAL_GPIO_WritePin>
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	40020800 	.word	0x40020800

0800aca4 <malloc>:
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <malloc+0xc>)
 800aca6:	4601      	mov	r1, r0
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	f000 b82b 	b.w	800ad04 <_malloc_r>
 800acae:	bf00      	nop
 800acb0:	200000e0 	.word	0x200000e0

0800acb4 <free>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <free+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f001 bd27 	b.w	800c70c <_free_r>
 800acbe:	bf00      	nop
 800acc0:	200000e0 	.word	0x200000e0

0800acc4 <sbrk_aligned>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4e0e      	ldr	r6, [pc, #56]	; (800ad00 <sbrk_aligned+0x3c>)
 800acc8:	460c      	mov	r4, r1
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	4605      	mov	r5, r0
 800acce:	b911      	cbnz	r1, 800acd6 <sbrk_aligned+0x12>
 800acd0:	f000 fe50 	bl	800b974 <_sbrk_r>
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 fe4b 	bl	800b974 <_sbrk_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d00a      	beq.n	800acf8 <sbrk_aligned+0x34>
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d007      	beq.n	800acfc <sbrk_aligned+0x38>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 fe40 	bl	800b974 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d101      	bne.n	800acfc <sbrk_aligned+0x38>
 800acf8:	f04f 34ff 	mov.w	r4, #4294967295
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	20000c8c 	.word	0x20000c8c

0800ad04 <_malloc_r>:
 800ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad08:	1ccd      	adds	r5, r1, #3
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	4607      	mov	r7, r0
 800ad1a:	db01      	blt.n	800ad20 <_malloc_r+0x1c>
 800ad1c:	42a9      	cmp	r1, r5
 800ad1e:	d905      	bls.n	800ad2c <_malloc_r+0x28>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	2600      	movs	r6, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae00 <_malloc_r+0xfc>
 800ad30:	f000 f868 	bl	800ae04 <__malloc_lock>
 800ad34:	f8d8 3000 	ldr.w	r3, [r8]
 800ad38:	461c      	mov	r4, r3
 800ad3a:	bb5c      	cbnz	r4, 800ad94 <_malloc_r+0x90>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ffc0 	bl	800acc4 <sbrk_aligned>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	4604      	mov	r4, r0
 800ad48:	d155      	bne.n	800adf6 <_malloc_r+0xf2>
 800ad4a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad4e:	4626      	mov	r6, r4
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d145      	bne.n	800ade0 <_malloc_r+0xdc>
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	d048      	beq.n	800adea <_malloc_r+0xe6>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	eb04 0903 	add.w	r9, r4, r3
 800ad62:	f000 fe07 	bl	800b974 <_sbrk_r>
 800ad66:	4581      	cmp	r9, r0
 800ad68:	d13f      	bne.n	800adea <_malloc_r+0xe6>
 800ad6a:	6821      	ldr	r1, [r4, #0]
 800ad6c:	1a6d      	subs	r5, r5, r1
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ffa7 	bl	800acc4 <sbrk_aligned>
 800ad76:	3001      	adds	r0, #1
 800ad78:	d037      	beq.n	800adea <_malloc_r+0xe6>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	442b      	add	r3, r5
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	f8d8 3000 	ldr.w	r3, [r8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d038      	beq.n	800adfa <_malloc_r+0xf6>
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	42a2      	cmp	r2, r4
 800ad8c:	d12b      	bne.n	800ade6 <_malloc_r+0xe2>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
 800ad92:	e00f      	b.n	800adb4 <_malloc_r+0xb0>
 800ad94:	6822      	ldr	r2, [r4, #0]
 800ad96:	1b52      	subs	r2, r2, r5
 800ad98:	d41f      	bmi.n	800adda <_malloc_r+0xd6>
 800ad9a:	2a0b      	cmp	r2, #11
 800ad9c:	d917      	bls.n	800adce <_malloc_r+0xca>
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	6025      	str	r5, [r4, #0]
 800ada4:	bf18      	it	ne
 800ada6:	6059      	strne	r1, [r3, #4]
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	bf08      	it	eq
 800adac:	f8c8 1000 	streq.w	r1, [r8]
 800adb0:	5162      	str	r2, [r4, r5]
 800adb2:	604b      	str	r3, [r1, #4]
 800adb4:	4638      	mov	r0, r7
 800adb6:	f104 060b 	add.w	r6, r4, #11
 800adba:	f000 f829 	bl	800ae10 <__malloc_unlock>
 800adbe:	f026 0607 	bic.w	r6, r6, #7
 800adc2:	1d23      	adds	r3, r4, #4
 800adc4:	1af2      	subs	r2, r6, r3
 800adc6:	d0ae      	beq.n	800ad26 <_malloc_r+0x22>
 800adc8:	1b9b      	subs	r3, r3, r6
 800adca:	50a3      	str	r3, [r4, r2]
 800adcc:	e7ab      	b.n	800ad26 <_malloc_r+0x22>
 800adce:	42a3      	cmp	r3, r4
 800add0:	6862      	ldr	r2, [r4, #4]
 800add2:	d1dd      	bne.n	800ad90 <_malloc_r+0x8c>
 800add4:	f8c8 2000 	str.w	r2, [r8]
 800add8:	e7ec      	b.n	800adb4 <_malloc_r+0xb0>
 800adda:	4623      	mov	r3, r4
 800addc:	6864      	ldr	r4, [r4, #4]
 800adde:	e7ac      	b.n	800ad3a <_malloc_r+0x36>
 800ade0:	4634      	mov	r4, r6
 800ade2:	6876      	ldr	r6, [r6, #4]
 800ade4:	e7b4      	b.n	800ad50 <_malloc_r+0x4c>
 800ade6:	4613      	mov	r3, r2
 800ade8:	e7cc      	b.n	800ad84 <_malloc_r+0x80>
 800adea:	230c      	movs	r3, #12
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4638      	mov	r0, r7
 800adf0:	f000 f80e 	bl	800ae10 <__malloc_unlock>
 800adf4:	e797      	b.n	800ad26 <_malloc_r+0x22>
 800adf6:	6025      	str	r5, [r4, #0]
 800adf8:	e7dc      	b.n	800adb4 <_malloc_r+0xb0>
 800adfa:	605b      	str	r3, [r3, #4]
 800adfc:	deff      	udf	#255	; 0xff
 800adfe:	bf00      	nop
 800ae00:	20000c88 	.word	0x20000c88

0800ae04 <__malloc_lock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_lock+0x8>)
 800ae06:	f000 be02 	b.w	800ba0e <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20000dd0 	.word	0x20000dd0

0800ae10 <__malloc_unlock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_unlock+0x8>)
 800ae12:	f000 bdfd 	b.w	800ba10 <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	20000dd0 	.word	0x20000dd0

0800ae1c <__cvt>:
 800ae1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	ec55 4b10 	vmov	r4, r5, d0
 800ae24:	2d00      	cmp	r5, #0
 800ae26:	460e      	mov	r6, r1
 800ae28:	4619      	mov	r1, r3
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	bfbb      	ittet	lt
 800ae2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae32:	461d      	movlt	r5, r3
 800ae34:	2300      	movge	r3, #0
 800ae36:	232d      	movlt	r3, #45	; 0x2d
 800ae38:	700b      	strb	r3, [r1, #0]
 800ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae40:	4691      	mov	r9, r2
 800ae42:	f023 0820 	bic.w	r8, r3, #32
 800ae46:	bfbc      	itt	lt
 800ae48:	4622      	movlt	r2, r4
 800ae4a:	4614      	movlt	r4, r2
 800ae4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae50:	d005      	beq.n	800ae5e <__cvt+0x42>
 800ae52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae56:	d100      	bne.n	800ae5a <__cvt+0x3e>
 800ae58:	3601      	adds	r6, #1
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	e000      	b.n	800ae60 <__cvt+0x44>
 800ae5e:	2103      	movs	r1, #3
 800ae60:	ab03      	add	r3, sp, #12
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	ab02      	add	r3, sp, #8
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	ec45 4b10 	vmov	d0, r4, r5
 800ae6c:	4653      	mov	r3, sl
 800ae6e:	4632      	mov	r2, r6
 800ae70:	f000 fe5a 	bl	800bb28 <_dtoa_r>
 800ae74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae78:	4607      	mov	r7, r0
 800ae7a:	d102      	bne.n	800ae82 <__cvt+0x66>
 800ae7c:	f019 0f01 	tst.w	r9, #1
 800ae80:	d022      	beq.n	800aec8 <__cvt+0xac>
 800ae82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae86:	eb07 0906 	add.w	r9, r7, r6
 800ae8a:	d110      	bne.n	800aeae <__cvt+0x92>
 800ae8c:	783b      	ldrb	r3, [r7, #0]
 800ae8e:	2b30      	cmp	r3, #48	; 0x30
 800ae90:	d10a      	bne.n	800aea8 <__cvt+0x8c>
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae9e:	b918      	cbnz	r0, 800aea8 <__cvt+0x8c>
 800aea0:	f1c6 0601 	rsb	r6, r6, #1
 800aea4:	f8ca 6000 	str.w	r6, [sl]
 800aea8:	f8da 3000 	ldr.w	r3, [sl]
 800aeac:	4499      	add	r9, r3
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeba:	b108      	cbz	r0, 800aec0 <__cvt+0xa4>
 800aebc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aec0:	2230      	movs	r2, #48	; 0x30
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	454b      	cmp	r3, r9
 800aec6:	d307      	bcc.n	800aed8 <__cvt+0xbc>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aecc:	1bdb      	subs	r3, r3, r7
 800aece:	4638      	mov	r0, r7
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	b004      	add	sp, #16
 800aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed8:	1c59      	adds	r1, r3, #1
 800aeda:	9103      	str	r1, [sp, #12]
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e7f0      	b.n	800aec2 <__cvt+0xa6>

0800aee0 <__exponent>:
 800aee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aee2:	4603      	mov	r3, r0
 800aee4:	2900      	cmp	r1, #0
 800aee6:	bfb8      	it	lt
 800aee8:	4249      	neglt	r1, r1
 800aeea:	f803 2b02 	strb.w	r2, [r3], #2
 800aeee:	bfb4      	ite	lt
 800aef0:	222d      	movlt	r2, #45	; 0x2d
 800aef2:	222b      	movge	r2, #43	; 0x2b
 800aef4:	2909      	cmp	r1, #9
 800aef6:	7042      	strb	r2, [r0, #1]
 800aef8:	dd2a      	ble.n	800af50 <__exponent+0x70>
 800aefa:	f10d 0207 	add.w	r2, sp, #7
 800aefe:	4617      	mov	r7, r2
 800af00:	260a      	movs	r6, #10
 800af02:	4694      	mov	ip, r2
 800af04:	fb91 f5f6 	sdiv	r5, r1, r6
 800af08:	fb06 1415 	mls	r4, r6, r5, r1
 800af0c:	3430      	adds	r4, #48	; 0x30
 800af0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800af12:	460c      	mov	r4, r1
 800af14:	2c63      	cmp	r4, #99	; 0x63
 800af16:	f102 32ff 	add.w	r2, r2, #4294967295
 800af1a:	4629      	mov	r1, r5
 800af1c:	dcf1      	bgt.n	800af02 <__exponent+0x22>
 800af1e:	3130      	adds	r1, #48	; 0x30
 800af20:	f1ac 0402 	sub.w	r4, ip, #2
 800af24:	f802 1c01 	strb.w	r1, [r2, #-1]
 800af28:	1c41      	adds	r1, r0, #1
 800af2a:	4622      	mov	r2, r4
 800af2c:	42ba      	cmp	r2, r7
 800af2e:	d30a      	bcc.n	800af46 <__exponent+0x66>
 800af30:	f10d 0209 	add.w	r2, sp, #9
 800af34:	eba2 020c 	sub.w	r2, r2, ip
 800af38:	42bc      	cmp	r4, r7
 800af3a:	bf88      	it	hi
 800af3c:	2200      	movhi	r2, #0
 800af3e:	4413      	add	r3, r2
 800af40:	1a18      	subs	r0, r3, r0
 800af42:	b003      	add	sp, #12
 800af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af46:	f812 5b01 	ldrb.w	r5, [r2], #1
 800af4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800af4e:	e7ed      	b.n	800af2c <__exponent+0x4c>
 800af50:	2330      	movs	r3, #48	; 0x30
 800af52:	3130      	adds	r1, #48	; 0x30
 800af54:	7083      	strb	r3, [r0, #2]
 800af56:	70c1      	strb	r1, [r0, #3]
 800af58:	1d03      	adds	r3, r0, #4
 800af5a:	e7f1      	b.n	800af40 <__exponent+0x60>

0800af5c <_printf_float>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	ed2d 8b02 	vpush	{d8}
 800af64:	b08d      	sub	sp, #52	; 0x34
 800af66:	460c      	mov	r4, r1
 800af68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af6c:	4616      	mov	r6, r2
 800af6e:	461f      	mov	r7, r3
 800af70:	4605      	mov	r5, r0
 800af72:	f000 fcc7 	bl	800b904 <_localeconv_r>
 800af76:	f8d0 a000 	ldr.w	sl, [r0]
 800af7a:	4650      	mov	r0, sl
 800af7c:	f7f5 f978 	bl	8000270 <strlen>
 800af80:	2300      	movs	r3, #0
 800af82:	930a      	str	r3, [sp, #40]	; 0x28
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	f8d8 3000 	ldr.w	r3, [r8]
 800af8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af90:	3307      	adds	r3, #7
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	f103 0208 	add.w	r2, r3, #8
 800af9a:	f8c8 2000 	str.w	r2, [r8]
 800af9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	f8cd 8018 	str.w	r8, [sp, #24]
 800afac:	ee08 0a10 	vmov	s16, r0
 800afb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800afb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afb8:	4b9e      	ldr	r3, [pc, #632]	; (800b234 <_printf_float+0x2d8>)
 800afba:	f04f 32ff 	mov.w	r2, #4294967295
 800afbe:	f7f5 fdb5 	bl	8000b2c <__aeabi_dcmpun>
 800afc2:	bb88      	cbnz	r0, 800b028 <_printf_float+0xcc>
 800afc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc8:	4b9a      	ldr	r3, [pc, #616]	; (800b234 <_printf_float+0x2d8>)
 800afca:	f04f 32ff 	mov.w	r2, #4294967295
 800afce:	f7f5 fd8f 	bl	8000af0 <__aeabi_dcmple>
 800afd2:	bb48      	cbnz	r0, 800b028 <_printf_float+0xcc>
 800afd4:	2200      	movs	r2, #0
 800afd6:	2300      	movs	r3, #0
 800afd8:	4640      	mov	r0, r8
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 fd7e 	bl	8000adc <__aeabi_dcmplt>
 800afe0:	b110      	cbz	r0, 800afe8 <_printf_float+0x8c>
 800afe2:	232d      	movs	r3, #45	; 0x2d
 800afe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe8:	4a93      	ldr	r2, [pc, #588]	; (800b238 <_printf_float+0x2dc>)
 800afea:	4b94      	ldr	r3, [pc, #592]	; (800b23c <_printf_float+0x2e0>)
 800afec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aff0:	bf94      	ite	ls
 800aff2:	4690      	movls	r8, r2
 800aff4:	4698      	movhi	r8, r3
 800aff6:	2303      	movs	r3, #3
 800aff8:	6123      	str	r3, [r4, #16]
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	f023 0304 	bic.w	r3, r3, #4
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	9700      	str	r7, [sp, #0]
 800b008:	4633      	mov	r3, r6
 800b00a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b00c:	4621      	mov	r1, r4
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f9da 	bl	800b3c8 <_printf_common>
 800b014:	3001      	adds	r0, #1
 800b016:	f040 8090 	bne.w	800b13a <_printf_float+0x1de>
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295
 800b01e:	b00d      	add	sp, #52	; 0x34
 800b020:	ecbd 8b02 	vpop	{d8}
 800b024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b028:	4642      	mov	r2, r8
 800b02a:	464b      	mov	r3, r9
 800b02c:	4640      	mov	r0, r8
 800b02e:	4649      	mov	r1, r9
 800b030:	f7f5 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 800b034:	b140      	cbz	r0, 800b048 <_printf_float+0xec>
 800b036:	464b      	mov	r3, r9
 800b038:	2b00      	cmp	r3, #0
 800b03a:	bfbc      	itt	lt
 800b03c:	232d      	movlt	r3, #45	; 0x2d
 800b03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b042:	4a7f      	ldr	r2, [pc, #508]	; (800b240 <_printf_float+0x2e4>)
 800b044:	4b7f      	ldr	r3, [pc, #508]	; (800b244 <_printf_float+0x2e8>)
 800b046:	e7d1      	b.n	800afec <_printf_float+0x90>
 800b048:	6863      	ldr	r3, [r4, #4]
 800b04a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b04e:	9206      	str	r2, [sp, #24]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	d13f      	bne.n	800b0d4 <_printf_float+0x178>
 800b054:	2306      	movs	r3, #6
 800b056:	6063      	str	r3, [r4, #4]
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	6861      	ldr	r1, [r4, #4]
 800b05c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b060:	2300      	movs	r3, #0
 800b062:	9303      	str	r3, [sp, #12]
 800b064:	ab0a      	add	r3, sp, #40	; 0x28
 800b066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b06a:	ab09      	add	r3, sp, #36	; 0x24
 800b06c:	ec49 8b10 	vmov	d0, r8, r9
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fecf 	bl	800ae1c <__cvt>
 800b07e:	9b06      	ldr	r3, [sp, #24]
 800b080:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b082:	2b47      	cmp	r3, #71	; 0x47
 800b084:	4680      	mov	r8, r0
 800b086:	d108      	bne.n	800b09a <_printf_float+0x13e>
 800b088:	1cc8      	adds	r0, r1, #3
 800b08a:	db02      	blt.n	800b092 <_printf_float+0x136>
 800b08c:	6863      	ldr	r3, [r4, #4]
 800b08e:	4299      	cmp	r1, r3
 800b090:	dd41      	ble.n	800b116 <_printf_float+0x1ba>
 800b092:	f1ab 0302 	sub.w	r3, fp, #2
 800b096:	fa5f fb83 	uxtb.w	fp, r3
 800b09a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b09e:	d820      	bhi.n	800b0e2 <_printf_float+0x186>
 800b0a0:	3901      	subs	r1, #1
 800b0a2:	465a      	mov	r2, fp
 800b0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b0aa:	f7ff ff19 	bl	800aee0 <__exponent>
 800b0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0b0:	1813      	adds	r3, r2, r0
 800b0b2:	2a01      	cmp	r2, #1
 800b0b4:	4681      	mov	r9, r0
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	dc02      	bgt.n	800b0c0 <_printf_float+0x164>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	07d2      	lsls	r2, r2, #31
 800b0be:	d501      	bpl.n	800b0c4 <_printf_float+0x168>
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d09c      	beq.n	800b006 <_printf_float+0xaa>
 800b0cc:	232d      	movs	r3, #45	; 0x2d
 800b0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d2:	e798      	b.n	800b006 <_printf_float+0xaa>
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	2a47      	cmp	r2, #71	; 0x47
 800b0d8:	d1be      	bne.n	800b058 <_printf_float+0xfc>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1bc      	bne.n	800b058 <_printf_float+0xfc>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e7b9      	b.n	800b056 <_printf_float+0xfa>
 800b0e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0e6:	d118      	bne.n	800b11a <_printf_float+0x1be>
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	6863      	ldr	r3, [r4, #4]
 800b0ec:	dd0b      	ble.n	800b106 <_printf_float+0x1aa>
 800b0ee:	6121      	str	r1, [r4, #16]
 800b0f0:	b913      	cbnz	r3, 800b0f8 <_printf_float+0x19c>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	07d0      	lsls	r0, r2, #31
 800b0f6:	d502      	bpl.n	800b0fe <_printf_float+0x1a2>
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	440b      	add	r3, r1
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800b100:	f04f 0900 	mov.w	r9, #0
 800b104:	e7de      	b.n	800b0c4 <_printf_float+0x168>
 800b106:	b913      	cbnz	r3, 800b10e <_printf_float+0x1b2>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	07d2      	lsls	r2, r2, #31
 800b10c:	d501      	bpl.n	800b112 <_printf_float+0x1b6>
 800b10e:	3302      	adds	r3, #2
 800b110:	e7f4      	b.n	800b0fc <_printf_float+0x1a0>
 800b112:	2301      	movs	r3, #1
 800b114:	e7f2      	b.n	800b0fc <_printf_float+0x1a0>
 800b116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11c:	4299      	cmp	r1, r3
 800b11e:	db05      	blt.n	800b12c <_printf_float+0x1d0>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	6121      	str	r1, [r4, #16]
 800b124:	07d8      	lsls	r0, r3, #31
 800b126:	d5ea      	bpl.n	800b0fe <_printf_float+0x1a2>
 800b128:	1c4b      	adds	r3, r1, #1
 800b12a:	e7e7      	b.n	800b0fc <_printf_float+0x1a0>
 800b12c:	2900      	cmp	r1, #0
 800b12e:	bfd4      	ite	le
 800b130:	f1c1 0202 	rsble	r2, r1, #2
 800b134:	2201      	movgt	r2, #1
 800b136:	4413      	add	r3, r2
 800b138:	e7e0      	b.n	800b0fc <_printf_float+0x1a0>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	055a      	lsls	r2, r3, #21
 800b13e:	d407      	bmi.n	800b150 <_printf_float+0x1f4>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	4642      	mov	r2, r8
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	d12c      	bne.n	800b1a8 <_printf_float+0x24c>
 800b14e:	e764      	b.n	800b01a <_printf_float+0xbe>
 800b150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b154:	f240 80e0 	bls.w	800b318 <_printf_float+0x3bc>
 800b158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	f7f5 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b164:	2800      	cmp	r0, #0
 800b166:	d034      	beq.n	800b1d2 <_printf_float+0x276>
 800b168:	4a37      	ldr	r2, [pc, #220]	; (800b248 <_printf_float+0x2ec>)
 800b16a:	2301      	movs	r3, #1
 800b16c:	4631      	mov	r1, r6
 800b16e:	4628      	mov	r0, r5
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	f43f af51 	beq.w	800b01a <_printf_float+0xbe>
 800b178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b17c:	429a      	cmp	r2, r3
 800b17e:	db02      	blt.n	800b186 <_printf_float+0x22a>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	07d8      	lsls	r0, r3, #31
 800b184:	d510      	bpl.n	800b1a8 <_printf_float+0x24c>
 800b186:	ee18 3a10 	vmov	r3, s16
 800b18a:	4652      	mov	r2, sl
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f af41 	beq.w	800b01a <_printf_float+0xbe>
 800b198:	f04f 0800 	mov.w	r8, #0
 800b19c:	f104 091a 	add.w	r9, r4, #26
 800b1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	4543      	cmp	r3, r8
 800b1a6:	dc09      	bgt.n	800b1bc <_printf_float+0x260>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	079b      	lsls	r3, r3, #30
 800b1ac:	f100 8107 	bmi.w	800b3be <_printf_float+0x462>
 800b1b0:	68e0      	ldr	r0, [r4, #12]
 800b1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	bfb8      	it	lt
 800b1b8:	4618      	movlt	r0, r3
 800b1ba:	e730      	b.n	800b01e <_printf_float+0xc2>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	464a      	mov	r2, r9
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f af27 	beq.w	800b01a <_printf_float+0xbe>
 800b1cc:	f108 0801 	add.w	r8, r8, #1
 800b1d0:	e7e6      	b.n	800b1a0 <_printf_float+0x244>
 800b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc39      	bgt.n	800b24c <_printf_float+0x2f0>
 800b1d8:	4a1b      	ldr	r2, [pc, #108]	; (800b248 <_printf_float+0x2ec>)
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f43f af19 	beq.w	800b01a <_printf_float+0xbe>
 800b1e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	d102      	bne.n	800b1f6 <_printf_float+0x29a>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	d5d8      	bpl.n	800b1a8 <_printf_float+0x24c>
 800b1f6:	ee18 3a10 	vmov	r3, s16
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f af09 	beq.w	800b01a <_printf_float+0xbe>
 800b208:	f04f 0900 	mov.w	r9, #0
 800b20c:	f104 0a1a 	add.w	sl, r4, #26
 800b210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b212:	425b      	negs	r3, r3
 800b214:	454b      	cmp	r3, r9
 800b216:	dc01      	bgt.n	800b21c <_printf_float+0x2c0>
 800b218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21a:	e792      	b.n	800b142 <_printf_float+0x1e6>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4652      	mov	r2, sl
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	f43f aef7 	beq.w	800b01a <_printf_float+0xbe>
 800b22c:	f109 0901 	add.w	r9, r9, #1
 800b230:	e7ee      	b.n	800b210 <_printf_float+0x2b4>
 800b232:	bf00      	nop
 800b234:	7fefffff 	.word	0x7fefffff
 800b238:	0800ddc4 	.word	0x0800ddc4
 800b23c:	0800ddc8 	.word	0x0800ddc8
 800b240:	0800ddcc 	.word	0x0800ddcc
 800b244:	0800ddd0 	.word	0x0800ddd0
 800b248:	0800ddd4 	.word	0x0800ddd4
 800b24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b250:	429a      	cmp	r2, r3
 800b252:	bfa8      	it	ge
 800b254:	461a      	movge	r2, r3
 800b256:	2a00      	cmp	r2, #0
 800b258:	4691      	mov	r9, r2
 800b25a:	dc37      	bgt.n	800b2cc <_printf_float+0x370>
 800b25c:	f04f 0b00 	mov.w	fp, #0
 800b260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b264:	f104 021a 	add.w	r2, r4, #26
 800b268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	eba3 0309 	sub.w	r3, r3, r9
 800b270:	455b      	cmp	r3, fp
 800b272:	dc33      	bgt.n	800b2dc <_printf_float+0x380>
 800b274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b278:	429a      	cmp	r2, r3
 800b27a:	db3b      	blt.n	800b2f4 <_printf_float+0x398>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	07da      	lsls	r2, r3, #31
 800b280:	d438      	bmi.n	800b2f4 <_printf_float+0x398>
 800b282:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b286:	eba2 0903 	sub.w	r9, r2, r3
 800b28a:	9b05      	ldr	r3, [sp, #20]
 800b28c:	1ad2      	subs	r2, r2, r3
 800b28e:	4591      	cmp	r9, r2
 800b290:	bfa8      	it	ge
 800b292:	4691      	movge	r9, r2
 800b294:	f1b9 0f00 	cmp.w	r9, #0
 800b298:	dc35      	bgt.n	800b306 <_printf_float+0x3aa>
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2a2:	f104 0a1a 	add.w	sl, r4, #26
 800b2a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	eba3 0309 	sub.w	r3, r3, r9
 800b2b0:	4543      	cmp	r3, r8
 800b2b2:	f77f af79 	ble.w	800b1a8 <_printf_float+0x24c>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f43f aeaa 	beq.w	800b01a <_printf_float+0xbe>
 800b2c6:	f108 0801 	add.w	r8, r8, #1
 800b2ca:	e7ec      	b.n	800b2a6 <_printf_float+0x34a>
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d1c0      	bne.n	800b25c <_printf_float+0x300>
 800b2da:	e69e      	b.n	800b01a <_printf_float+0xbe>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	9205      	str	r2, [sp, #20]
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f ae97 	beq.w	800b01a <_printf_float+0xbe>
 800b2ec:	9a05      	ldr	r2, [sp, #20]
 800b2ee:	f10b 0b01 	add.w	fp, fp, #1
 800b2f2:	e7b9      	b.n	800b268 <_printf_float+0x30c>
 800b2f4:	ee18 3a10 	vmov	r3, s16
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	d1be      	bne.n	800b282 <_printf_float+0x326>
 800b304:	e689      	b.n	800b01a <_printf_float+0xbe>
 800b306:	9a05      	ldr	r2, [sp, #20]
 800b308:	464b      	mov	r3, r9
 800b30a:	4442      	add	r2, r8
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	d1c1      	bne.n	800b29a <_printf_float+0x33e>
 800b316:	e680      	b.n	800b01a <_printf_float+0xbe>
 800b318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b31a:	2a01      	cmp	r2, #1
 800b31c:	dc01      	bgt.n	800b322 <_printf_float+0x3c6>
 800b31e:	07db      	lsls	r3, r3, #31
 800b320:	d53a      	bpl.n	800b398 <_printf_float+0x43c>
 800b322:	2301      	movs	r3, #1
 800b324:	4642      	mov	r2, r8
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	47b8      	blx	r7
 800b32c:	3001      	adds	r0, #1
 800b32e:	f43f ae74 	beq.w	800b01a <_printf_float+0xbe>
 800b332:	ee18 3a10 	vmov	r3, s16
 800b336:	4652      	mov	r2, sl
 800b338:	4631      	mov	r1, r6
 800b33a:	4628      	mov	r0, r5
 800b33c:	47b8      	blx	r7
 800b33e:	3001      	adds	r0, #1
 800b340:	f43f ae6b 	beq.w	800b01a <_printf_float+0xbe>
 800b344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b348:	2200      	movs	r2, #0
 800b34a:	2300      	movs	r3, #0
 800b34c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b350:	f7f5 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 800b354:	b9d8      	cbnz	r0, 800b38e <_printf_float+0x432>
 800b356:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b35a:	f108 0201 	add.w	r2, r8, #1
 800b35e:	4631      	mov	r1, r6
 800b360:	4628      	mov	r0, r5
 800b362:	47b8      	blx	r7
 800b364:	3001      	adds	r0, #1
 800b366:	d10e      	bne.n	800b386 <_printf_float+0x42a>
 800b368:	e657      	b.n	800b01a <_printf_float+0xbe>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	f43f ae50 	beq.w	800b01a <_printf_float+0xbe>
 800b37a:	f108 0801 	add.w	r8, r8, #1
 800b37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b380:	3b01      	subs	r3, #1
 800b382:	4543      	cmp	r3, r8
 800b384:	dcf1      	bgt.n	800b36a <_printf_float+0x40e>
 800b386:	464b      	mov	r3, r9
 800b388:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b38c:	e6da      	b.n	800b144 <_printf_float+0x1e8>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	f104 0a1a 	add.w	sl, r4, #26
 800b396:	e7f2      	b.n	800b37e <_printf_float+0x422>
 800b398:	2301      	movs	r3, #1
 800b39a:	4642      	mov	r2, r8
 800b39c:	e7df      	b.n	800b35e <_printf_float+0x402>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	464a      	mov	r2, r9
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b8      	blx	r7
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	f43f ae36 	beq.w	800b01a <_printf_float+0xbe>
 800b3ae:	f108 0801 	add.w	r8, r8, #1
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b6:	1a5b      	subs	r3, r3, r1
 800b3b8:	4543      	cmp	r3, r8
 800b3ba:	dcf0      	bgt.n	800b39e <_printf_float+0x442>
 800b3bc:	e6f8      	b.n	800b1b0 <_printf_float+0x254>
 800b3be:	f04f 0800 	mov.w	r8, #0
 800b3c2:	f104 0919 	add.w	r9, r4, #25
 800b3c6:	e7f4      	b.n	800b3b2 <_printf_float+0x456>

0800b3c8 <_printf_common>:
 800b3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3cc:	4616      	mov	r6, r2
 800b3ce:	4699      	mov	r9, r3
 800b3d0:	688a      	ldr	r2, [r1, #8]
 800b3d2:	690b      	ldr	r3, [r1, #16]
 800b3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	bfb8      	it	lt
 800b3dc:	4613      	movlt	r3, r2
 800b3de:	6033      	str	r3, [r6, #0]
 800b3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	b10a      	cbz	r2, 800b3ee <_printf_common+0x26>
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	6033      	str	r3, [r6, #0]
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	0699      	lsls	r1, r3, #26
 800b3f2:	bf42      	ittt	mi
 800b3f4:	6833      	ldrmi	r3, [r6, #0]
 800b3f6:	3302      	addmi	r3, #2
 800b3f8:	6033      	strmi	r3, [r6, #0]
 800b3fa:	6825      	ldr	r5, [r4, #0]
 800b3fc:	f015 0506 	ands.w	r5, r5, #6
 800b400:	d106      	bne.n	800b410 <_printf_common+0x48>
 800b402:	f104 0a19 	add.w	sl, r4, #25
 800b406:	68e3      	ldr	r3, [r4, #12]
 800b408:	6832      	ldr	r2, [r6, #0]
 800b40a:	1a9b      	subs	r3, r3, r2
 800b40c:	42ab      	cmp	r3, r5
 800b40e:	dc26      	bgt.n	800b45e <_printf_common+0x96>
 800b410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b414:	1e13      	subs	r3, r2, #0
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	bf18      	it	ne
 800b41a:	2301      	movne	r3, #1
 800b41c:	0692      	lsls	r2, r2, #26
 800b41e:	d42b      	bmi.n	800b478 <_printf_common+0xb0>
 800b420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b424:	4649      	mov	r1, r9
 800b426:	4638      	mov	r0, r7
 800b428:	47c0      	blx	r8
 800b42a:	3001      	adds	r0, #1
 800b42c:	d01e      	beq.n	800b46c <_printf_common+0xa4>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	6922      	ldr	r2, [r4, #16]
 800b432:	f003 0306 	and.w	r3, r3, #6
 800b436:	2b04      	cmp	r3, #4
 800b438:	bf02      	ittt	eq
 800b43a:	68e5      	ldreq	r5, [r4, #12]
 800b43c:	6833      	ldreq	r3, [r6, #0]
 800b43e:	1aed      	subeq	r5, r5, r3
 800b440:	68a3      	ldr	r3, [r4, #8]
 800b442:	bf0c      	ite	eq
 800b444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b448:	2500      	movne	r5, #0
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bfc4      	itt	gt
 800b44e:	1a9b      	subgt	r3, r3, r2
 800b450:	18ed      	addgt	r5, r5, r3
 800b452:	2600      	movs	r6, #0
 800b454:	341a      	adds	r4, #26
 800b456:	42b5      	cmp	r5, r6
 800b458:	d11a      	bne.n	800b490 <_printf_common+0xc8>
 800b45a:	2000      	movs	r0, #0
 800b45c:	e008      	b.n	800b470 <_printf_common+0xa8>
 800b45e:	2301      	movs	r3, #1
 800b460:	4652      	mov	r2, sl
 800b462:	4649      	mov	r1, r9
 800b464:	4638      	mov	r0, r7
 800b466:	47c0      	blx	r8
 800b468:	3001      	adds	r0, #1
 800b46a:	d103      	bne.n	800b474 <_printf_common+0xac>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b474:	3501      	adds	r5, #1
 800b476:	e7c6      	b.n	800b406 <_printf_common+0x3e>
 800b478:	18e1      	adds	r1, r4, r3
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	2030      	movs	r0, #48	; 0x30
 800b47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b482:	4422      	add	r2, r4
 800b484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b48c:	3302      	adds	r3, #2
 800b48e:	e7c7      	b.n	800b420 <_printf_common+0x58>
 800b490:	2301      	movs	r3, #1
 800b492:	4622      	mov	r2, r4
 800b494:	4649      	mov	r1, r9
 800b496:	4638      	mov	r0, r7
 800b498:	47c0      	blx	r8
 800b49a:	3001      	adds	r0, #1
 800b49c:	d0e6      	beq.n	800b46c <_printf_common+0xa4>
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7d9      	b.n	800b456 <_printf_common+0x8e>
	...

0800b4a4 <_printf_i>:
 800b4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	7e0f      	ldrb	r7, [r1, #24]
 800b4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4ac:	2f78      	cmp	r7, #120	; 0x78
 800b4ae:	4691      	mov	r9, r2
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	469a      	mov	sl, r3
 800b4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ba:	d807      	bhi.n	800b4cc <_printf_i+0x28>
 800b4bc:	2f62      	cmp	r7, #98	; 0x62
 800b4be:	d80a      	bhi.n	800b4d6 <_printf_i+0x32>
 800b4c0:	2f00      	cmp	r7, #0
 800b4c2:	f000 80d4 	beq.w	800b66e <_printf_i+0x1ca>
 800b4c6:	2f58      	cmp	r7, #88	; 0x58
 800b4c8:	f000 80c0 	beq.w	800b64c <_printf_i+0x1a8>
 800b4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d4:	e03a      	b.n	800b54c <_printf_i+0xa8>
 800b4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4da:	2b15      	cmp	r3, #21
 800b4dc:	d8f6      	bhi.n	800b4cc <_printf_i+0x28>
 800b4de:	a101      	add	r1, pc, #4	; (adr r1, 800b4e4 <_printf_i+0x40>)
 800b4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4e4:	0800b53d 	.word	0x0800b53d
 800b4e8:	0800b551 	.word	0x0800b551
 800b4ec:	0800b4cd 	.word	0x0800b4cd
 800b4f0:	0800b4cd 	.word	0x0800b4cd
 800b4f4:	0800b4cd 	.word	0x0800b4cd
 800b4f8:	0800b4cd 	.word	0x0800b4cd
 800b4fc:	0800b551 	.word	0x0800b551
 800b500:	0800b4cd 	.word	0x0800b4cd
 800b504:	0800b4cd 	.word	0x0800b4cd
 800b508:	0800b4cd 	.word	0x0800b4cd
 800b50c:	0800b4cd 	.word	0x0800b4cd
 800b510:	0800b655 	.word	0x0800b655
 800b514:	0800b57d 	.word	0x0800b57d
 800b518:	0800b60f 	.word	0x0800b60f
 800b51c:	0800b4cd 	.word	0x0800b4cd
 800b520:	0800b4cd 	.word	0x0800b4cd
 800b524:	0800b677 	.word	0x0800b677
 800b528:	0800b4cd 	.word	0x0800b4cd
 800b52c:	0800b57d 	.word	0x0800b57d
 800b530:	0800b4cd 	.word	0x0800b4cd
 800b534:	0800b4cd 	.word	0x0800b4cd
 800b538:	0800b617 	.word	0x0800b617
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	602a      	str	r2, [r5, #0]
 800b544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b54c:	2301      	movs	r3, #1
 800b54e:	e09f      	b.n	800b690 <_printf_i+0x1ec>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	0607      	lsls	r7, r0, #24
 800b556:	f103 0104 	add.w	r1, r3, #4
 800b55a:	6029      	str	r1, [r5, #0]
 800b55c:	d501      	bpl.n	800b562 <_printf_i+0xbe>
 800b55e:	681e      	ldr	r6, [r3, #0]
 800b560:	e003      	b.n	800b56a <_printf_i+0xc6>
 800b562:	0646      	lsls	r6, r0, #25
 800b564:	d5fb      	bpl.n	800b55e <_printf_i+0xba>
 800b566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	da03      	bge.n	800b576 <_printf_i+0xd2>
 800b56e:	232d      	movs	r3, #45	; 0x2d
 800b570:	4276      	negs	r6, r6
 800b572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b576:	485a      	ldr	r0, [pc, #360]	; (800b6e0 <_printf_i+0x23c>)
 800b578:	230a      	movs	r3, #10
 800b57a:	e012      	b.n	800b5a2 <_printf_i+0xfe>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1d19      	adds	r1, r3, #4
 800b582:	6029      	str	r1, [r5, #0]
 800b584:	0605      	lsls	r5, r0, #24
 800b586:	d501      	bpl.n	800b58c <_printf_i+0xe8>
 800b588:	681e      	ldr	r6, [r3, #0]
 800b58a:	e002      	b.n	800b592 <_printf_i+0xee>
 800b58c:	0641      	lsls	r1, r0, #25
 800b58e:	d5fb      	bpl.n	800b588 <_printf_i+0xe4>
 800b590:	881e      	ldrh	r6, [r3, #0]
 800b592:	4853      	ldr	r0, [pc, #332]	; (800b6e0 <_printf_i+0x23c>)
 800b594:	2f6f      	cmp	r7, #111	; 0x6f
 800b596:	bf0c      	ite	eq
 800b598:	2308      	moveq	r3, #8
 800b59a:	230a      	movne	r3, #10
 800b59c:	2100      	movs	r1, #0
 800b59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5a2:	6865      	ldr	r5, [r4, #4]
 800b5a4:	60a5      	str	r5, [r4, #8]
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	bfa2      	ittt	ge
 800b5aa:	6821      	ldrge	r1, [r4, #0]
 800b5ac:	f021 0104 	bicge.w	r1, r1, #4
 800b5b0:	6021      	strge	r1, [r4, #0]
 800b5b2:	b90e      	cbnz	r6, 800b5b8 <_printf_i+0x114>
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	d04b      	beq.n	800b650 <_printf_i+0x1ac>
 800b5b8:	4615      	mov	r5, r2
 800b5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5be:	fb03 6711 	mls	r7, r3, r1, r6
 800b5c2:	5dc7      	ldrb	r7, [r0, r7]
 800b5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5c8:	4637      	mov	r7, r6
 800b5ca:	42bb      	cmp	r3, r7
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	d9f4      	bls.n	800b5ba <_printf_i+0x116>
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d10b      	bne.n	800b5ec <_printf_i+0x148>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	07de      	lsls	r6, r3, #31
 800b5d8:	d508      	bpl.n	800b5ec <_printf_i+0x148>
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	6861      	ldr	r1, [r4, #4]
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	bfde      	ittt	le
 800b5e2:	2330      	movle	r3, #48	; 0x30
 800b5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5ec:	1b52      	subs	r2, r2, r5
 800b5ee:	6122      	str	r2, [r4, #16]
 800b5f0:	f8cd a000 	str.w	sl, [sp]
 800b5f4:	464b      	mov	r3, r9
 800b5f6:	aa03      	add	r2, sp, #12
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f7ff fee4 	bl	800b3c8 <_printf_common>
 800b600:	3001      	adds	r0, #1
 800b602:	d14a      	bne.n	800b69a <_printf_i+0x1f6>
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	b004      	add	sp, #16
 800b60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	f043 0320 	orr.w	r3, r3, #32
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	4833      	ldr	r0, [pc, #204]	; (800b6e4 <_printf_i+0x240>)
 800b618:	2778      	movs	r7, #120	; 0x78
 800b61a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	6829      	ldr	r1, [r5, #0]
 800b622:	061f      	lsls	r7, r3, #24
 800b624:	f851 6b04 	ldr.w	r6, [r1], #4
 800b628:	d402      	bmi.n	800b630 <_printf_i+0x18c>
 800b62a:	065f      	lsls	r7, r3, #25
 800b62c:	bf48      	it	mi
 800b62e:	b2b6      	uxthmi	r6, r6
 800b630:	07df      	lsls	r7, r3, #31
 800b632:	bf48      	it	mi
 800b634:	f043 0320 	orrmi.w	r3, r3, #32
 800b638:	6029      	str	r1, [r5, #0]
 800b63a:	bf48      	it	mi
 800b63c:	6023      	strmi	r3, [r4, #0]
 800b63e:	b91e      	cbnz	r6, 800b648 <_printf_i+0x1a4>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	f023 0320 	bic.w	r3, r3, #32
 800b646:	6023      	str	r3, [r4, #0]
 800b648:	2310      	movs	r3, #16
 800b64a:	e7a7      	b.n	800b59c <_printf_i+0xf8>
 800b64c:	4824      	ldr	r0, [pc, #144]	; (800b6e0 <_printf_i+0x23c>)
 800b64e:	e7e4      	b.n	800b61a <_printf_i+0x176>
 800b650:	4615      	mov	r5, r2
 800b652:	e7bd      	b.n	800b5d0 <_printf_i+0x12c>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	6826      	ldr	r6, [r4, #0]
 800b658:	6961      	ldr	r1, [r4, #20]
 800b65a:	1d18      	adds	r0, r3, #4
 800b65c:	6028      	str	r0, [r5, #0]
 800b65e:	0635      	lsls	r5, r6, #24
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	d501      	bpl.n	800b668 <_printf_i+0x1c4>
 800b664:	6019      	str	r1, [r3, #0]
 800b666:	e002      	b.n	800b66e <_printf_i+0x1ca>
 800b668:	0670      	lsls	r0, r6, #25
 800b66a:	d5fb      	bpl.n	800b664 <_printf_i+0x1c0>
 800b66c:	8019      	strh	r1, [r3, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	4615      	mov	r5, r2
 800b674:	e7bc      	b.n	800b5f0 <_printf_i+0x14c>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	1d1a      	adds	r2, r3, #4
 800b67a:	602a      	str	r2, [r5, #0]
 800b67c:	681d      	ldr	r5, [r3, #0]
 800b67e:	6862      	ldr	r2, [r4, #4]
 800b680:	2100      	movs	r1, #0
 800b682:	4628      	mov	r0, r5
 800b684:	f7f4 fda4 	bl	80001d0 <memchr>
 800b688:	b108      	cbz	r0, 800b68e <_printf_i+0x1ea>
 800b68a:	1b40      	subs	r0, r0, r5
 800b68c:	6060      	str	r0, [r4, #4]
 800b68e:	6863      	ldr	r3, [r4, #4]
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	2300      	movs	r3, #0
 800b694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b698:	e7aa      	b.n	800b5f0 <_printf_i+0x14c>
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4649      	mov	r1, r9
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	47d0      	blx	sl
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d0ad      	beq.n	800b604 <_printf_i+0x160>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	079b      	lsls	r3, r3, #30
 800b6ac:	d413      	bmi.n	800b6d6 <_printf_i+0x232>
 800b6ae:	68e0      	ldr	r0, [r4, #12]
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	4298      	cmp	r0, r3
 800b6b4:	bfb8      	it	lt
 800b6b6:	4618      	movlt	r0, r3
 800b6b8:	e7a6      	b.n	800b608 <_printf_i+0x164>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4649      	mov	r1, r9
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	47d0      	blx	sl
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d09d      	beq.n	800b604 <_printf_i+0x160>
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	9903      	ldr	r1, [sp, #12]
 800b6ce:	1a5b      	subs	r3, r3, r1
 800b6d0:	42ab      	cmp	r3, r5
 800b6d2:	dcf2      	bgt.n	800b6ba <_printf_i+0x216>
 800b6d4:	e7eb      	b.n	800b6ae <_printf_i+0x20a>
 800b6d6:	2500      	movs	r5, #0
 800b6d8:	f104 0619 	add.w	r6, r4, #25
 800b6dc:	e7f5      	b.n	800b6ca <_printf_i+0x226>
 800b6de:	bf00      	nop
 800b6e0:	0800ddd6 	.word	0x0800ddd6
 800b6e4:	0800dde7 	.word	0x0800dde7

0800b6e8 <std>:
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b6f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6f6:	6083      	str	r3, [r0, #8]
 800b6f8:	8181      	strh	r1, [r0, #12]
 800b6fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b6fc:	81c2      	strh	r2, [r0, #14]
 800b6fe:	6183      	str	r3, [r0, #24]
 800b700:	4619      	mov	r1, r3
 800b702:	2208      	movs	r2, #8
 800b704:	305c      	adds	r0, #92	; 0x5c
 800b706:	f000 f8f4 	bl	800b8f2 <memset>
 800b70a:	4b0d      	ldr	r3, [pc, #52]	; (800b740 <std+0x58>)
 800b70c:	6263      	str	r3, [r4, #36]	; 0x24
 800b70e:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <std+0x5c>)
 800b710:	62a3      	str	r3, [r4, #40]	; 0x28
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <std+0x60>)
 800b714:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <std+0x64>)
 800b718:	6323      	str	r3, [r4, #48]	; 0x30
 800b71a:	4b0d      	ldr	r3, [pc, #52]	; (800b750 <std+0x68>)
 800b71c:	6224      	str	r4, [r4, #32]
 800b71e:	429c      	cmp	r4, r3
 800b720:	d006      	beq.n	800b730 <std+0x48>
 800b722:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b726:	4294      	cmp	r4, r2
 800b728:	d002      	beq.n	800b730 <std+0x48>
 800b72a:	33d0      	adds	r3, #208	; 0xd0
 800b72c:	429c      	cmp	r4, r3
 800b72e:	d105      	bne.n	800b73c <std+0x54>
 800b730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b738:	f000 b968 	b.w	800ba0c <__retarget_lock_init_recursive>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	0800b86d 	.word	0x0800b86d
 800b744:	0800b88f 	.word	0x0800b88f
 800b748:	0800b8c7 	.word	0x0800b8c7
 800b74c:	0800b8eb 	.word	0x0800b8eb
 800b750:	20000c90 	.word	0x20000c90

0800b754 <stdio_exit_handler>:
 800b754:	4a02      	ldr	r2, [pc, #8]	; (800b760 <stdio_exit_handler+0xc>)
 800b756:	4903      	ldr	r1, [pc, #12]	; (800b764 <stdio_exit_handler+0x10>)
 800b758:	4803      	ldr	r0, [pc, #12]	; (800b768 <stdio_exit_handler+0x14>)
 800b75a:	f000 b869 	b.w	800b830 <_fwalk_sglue>
 800b75e:	bf00      	nop
 800b760:	20000088 	.word	0x20000088
 800b764:	0800cfa9 	.word	0x0800cfa9
 800b768:	20000094 	.word	0x20000094

0800b76c <cleanup_stdio>:
 800b76c:	6841      	ldr	r1, [r0, #4]
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <cleanup_stdio+0x34>)
 800b770:	4299      	cmp	r1, r3
 800b772:	b510      	push	{r4, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	d001      	beq.n	800b77c <cleanup_stdio+0x10>
 800b778:	f001 fc16 	bl	800cfa8 <_fflush_r>
 800b77c:	68a1      	ldr	r1, [r4, #8]
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <cleanup_stdio+0x38>)
 800b780:	4299      	cmp	r1, r3
 800b782:	d002      	beq.n	800b78a <cleanup_stdio+0x1e>
 800b784:	4620      	mov	r0, r4
 800b786:	f001 fc0f 	bl	800cfa8 <_fflush_r>
 800b78a:	68e1      	ldr	r1, [r4, #12]
 800b78c:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <cleanup_stdio+0x3c>)
 800b78e:	4299      	cmp	r1, r3
 800b790:	d004      	beq.n	800b79c <cleanup_stdio+0x30>
 800b792:	4620      	mov	r0, r4
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f001 bc06 	b.w	800cfa8 <_fflush_r>
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000c90 	.word	0x20000c90
 800b7a4:	20000cf8 	.word	0x20000cf8
 800b7a8:	20000d60 	.word	0x20000d60

0800b7ac <global_stdio_init.part.0>:
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	4b0b      	ldr	r3, [pc, #44]	; (800b7dc <global_stdio_init.part.0+0x30>)
 800b7b0:	4c0b      	ldr	r4, [pc, #44]	; (800b7e0 <global_stdio_init.part.0+0x34>)
 800b7b2:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <global_stdio_init.part.0+0x38>)
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2104      	movs	r1, #4
 800b7bc:	f7ff ff94 	bl	800b6e8 <std>
 800b7c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	2109      	movs	r1, #9
 800b7c8:	f7ff ff8e 	bl	800b6e8 <std>
 800b7cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d6:	2112      	movs	r1, #18
 800b7d8:	f7ff bf86 	b.w	800b6e8 <std>
 800b7dc:	20000dc8 	.word	0x20000dc8
 800b7e0:	20000c90 	.word	0x20000c90
 800b7e4:	0800b755 	.word	0x0800b755

0800b7e8 <__sfp_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sfp_lock_acquire+0x8>)
 800b7ea:	f000 b910 	b.w	800ba0e <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20000dd1 	.word	0x20000dd1

0800b7f4 <__sfp_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sfp_lock_release+0x8>)
 800b7f6:	f000 b90b 	b.w	800ba10 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20000dd1 	.word	0x20000dd1

0800b800 <__sinit>:
 800b800:	b510      	push	{r4, lr}
 800b802:	4604      	mov	r4, r0
 800b804:	f7ff fff0 	bl	800b7e8 <__sfp_lock_acquire>
 800b808:	6a23      	ldr	r3, [r4, #32]
 800b80a:	b11b      	cbz	r3, 800b814 <__sinit+0x14>
 800b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b810:	f7ff bff0 	b.w	800b7f4 <__sfp_lock_release>
 800b814:	4b04      	ldr	r3, [pc, #16]	; (800b828 <__sinit+0x28>)
 800b816:	6223      	str	r3, [r4, #32]
 800b818:	4b04      	ldr	r3, [pc, #16]	; (800b82c <__sinit+0x2c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1f5      	bne.n	800b80c <__sinit+0xc>
 800b820:	f7ff ffc4 	bl	800b7ac <global_stdio_init.part.0>
 800b824:	e7f2      	b.n	800b80c <__sinit+0xc>
 800b826:	bf00      	nop
 800b828:	0800b76d 	.word	0x0800b76d
 800b82c:	20000dc8 	.word	0x20000dc8

0800b830 <_fwalk_sglue>:
 800b830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b834:	4607      	mov	r7, r0
 800b836:	4688      	mov	r8, r1
 800b838:	4614      	mov	r4, r2
 800b83a:	2600      	movs	r6, #0
 800b83c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b840:	f1b9 0901 	subs.w	r9, r9, #1
 800b844:	d505      	bpl.n	800b852 <_fwalk_sglue+0x22>
 800b846:	6824      	ldr	r4, [r4, #0]
 800b848:	2c00      	cmp	r4, #0
 800b84a:	d1f7      	bne.n	800b83c <_fwalk_sglue+0xc>
 800b84c:	4630      	mov	r0, r6
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	89ab      	ldrh	r3, [r5, #12]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d907      	bls.n	800b868 <_fwalk_sglue+0x38>
 800b858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b85c:	3301      	adds	r3, #1
 800b85e:	d003      	beq.n	800b868 <_fwalk_sglue+0x38>
 800b860:	4629      	mov	r1, r5
 800b862:	4638      	mov	r0, r7
 800b864:	47c0      	blx	r8
 800b866:	4306      	orrs	r6, r0
 800b868:	3568      	adds	r5, #104	; 0x68
 800b86a:	e7e9      	b.n	800b840 <_fwalk_sglue+0x10>

0800b86c <__sread>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	460c      	mov	r4, r1
 800b870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b874:	f000 f86c 	bl	800b950 <_read_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	bfab      	itete	ge
 800b87c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b87e:	89a3      	ldrhlt	r3, [r4, #12]
 800b880:	181b      	addge	r3, r3, r0
 800b882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b886:	bfac      	ite	ge
 800b888:	6563      	strge	r3, [r4, #84]	; 0x54
 800b88a:	81a3      	strhlt	r3, [r4, #12]
 800b88c:	bd10      	pop	{r4, pc}

0800b88e <__swrite>:
 800b88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b892:	461f      	mov	r7, r3
 800b894:	898b      	ldrh	r3, [r1, #12]
 800b896:	05db      	lsls	r3, r3, #23
 800b898:	4605      	mov	r5, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	4616      	mov	r6, r2
 800b89e:	d505      	bpl.n	800b8ac <__swrite+0x1e>
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f000 f840 	bl	800b92c <_lseek_r>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	4628      	mov	r0, r5
 800b8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	f000 b867 	b.w	800b994 <_write_r>

0800b8c6 <__sseek>:
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	f000 f82d 	bl	800b92c <_lseek_r>
 800b8d2:	1c43      	adds	r3, r0, #1
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	bf15      	itete	ne
 800b8d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8e2:	81a3      	strheq	r3, [r4, #12]
 800b8e4:	bf18      	it	ne
 800b8e6:	81a3      	strhne	r3, [r4, #12]
 800b8e8:	bd10      	pop	{r4, pc}

0800b8ea <__sclose>:
 800b8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ee:	f000 b80d 	b.w	800b90c <_close_r>

0800b8f2 <memset>:
 800b8f2:	4402      	add	r2, r0
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d100      	bne.n	800b8fc <memset+0xa>
 800b8fa:	4770      	bx	lr
 800b8fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b900:	e7f9      	b.n	800b8f6 <memset+0x4>
	...

0800b904 <_localeconv_r>:
 800b904:	4800      	ldr	r0, [pc, #0]	; (800b908 <_localeconv_r+0x4>)
 800b906:	4770      	bx	lr
 800b908:	200001d4 	.word	0x200001d4

0800b90c <_close_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d06      	ldr	r5, [pc, #24]	; (800b928 <_close_r+0x1c>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	602b      	str	r3, [r5, #0]
 800b918:	f7f7 f949 	bl	8002bae <_close>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_close_r+0x1a>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_close_r+0x1a>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	20000dcc 	.word	0x20000dcc

0800b92c <_lseek_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d07      	ldr	r5, [pc, #28]	; (800b94c <_lseek_r+0x20>)
 800b930:	4604      	mov	r4, r0
 800b932:	4608      	mov	r0, r1
 800b934:	4611      	mov	r1, r2
 800b936:	2200      	movs	r2, #0
 800b938:	602a      	str	r2, [r5, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	f7f7 f95e 	bl	8002bfc <_lseek>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_lseek_r+0x1e>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_lseek_r+0x1e>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20000dcc 	.word	0x20000dcc

0800b950 <_read_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d07      	ldr	r5, [pc, #28]	; (800b970 <_read_r+0x20>)
 800b954:	4604      	mov	r4, r0
 800b956:	4608      	mov	r0, r1
 800b958:	4611      	mov	r1, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	602a      	str	r2, [r5, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	f7f7 f8ec 	bl	8002b3c <_read>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_read_r+0x1e>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_read_r+0x1e>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20000dcc 	.word	0x20000dcc

0800b974 <_sbrk_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d06      	ldr	r5, [pc, #24]	; (800b990 <_sbrk_r+0x1c>)
 800b978:	2300      	movs	r3, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7f7 f94a 	bl	8002c18 <_sbrk>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_sbrk_r+0x1a>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_sbrk_r+0x1a>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20000dcc 	.word	0x20000dcc

0800b994 <_write_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_write_r+0x20>)
 800b998:	4604      	mov	r4, r0
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	2200      	movs	r2, #0
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f7 f8e7 	bl	8002b76 <_write>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_write_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_write_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20000dcc 	.word	0x20000dcc

0800b9b8 <__errno>:
 800b9b8:	4b01      	ldr	r3, [pc, #4]	; (800b9c0 <__errno+0x8>)
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	200000e0 	.word	0x200000e0

0800b9c4 <__libc_init_array>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	4d0d      	ldr	r5, [pc, #52]	; (800b9fc <__libc_init_array+0x38>)
 800b9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ba00 <__libc_init_array+0x3c>)
 800b9ca:	1b64      	subs	r4, r4, r5
 800b9cc:	10a4      	asrs	r4, r4, #2
 800b9ce:	2600      	movs	r6, #0
 800b9d0:	42a6      	cmp	r6, r4
 800b9d2:	d109      	bne.n	800b9e8 <__libc_init_array+0x24>
 800b9d4:	4d0b      	ldr	r5, [pc, #44]	; (800ba04 <__libc_init_array+0x40>)
 800b9d6:	4c0c      	ldr	r4, [pc, #48]	; (800ba08 <__libc_init_array+0x44>)
 800b9d8:	f002 f99e 	bl	800dd18 <_init>
 800b9dc:	1b64      	subs	r4, r4, r5
 800b9de:	10a4      	asrs	r4, r4, #2
 800b9e0:	2600      	movs	r6, #0
 800b9e2:	42a6      	cmp	r6, r4
 800b9e4:	d105      	bne.n	800b9f2 <__libc_init_array+0x2e>
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ec:	4798      	blx	r3
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	e7ee      	b.n	800b9d0 <__libc_init_array+0xc>
 800b9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f6:	4798      	blx	r3
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	e7f2      	b.n	800b9e2 <__libc_init_array+0x1e>
 800b9fc:	0800e194 	.word	0x0800e194
 800ba00:	0800e194 	.word	0x0800e194
 800ba04:	0800e194 	.word	0x0800e194
 800ba08:	0800e198 	.word	0x0800e198

0800ba0c <__retarget_lock_init_recursive>:
 800ba0c:	4770      	bx	lr

0800ba0e <__retarget_lock_acquire_recursive>:
 800ba0e:	4770      	bx	lr

0800ba10 <__retarget_lock_release_recursive>:
 800ba10:	4770      	bx	lr

0800ba12 <quorem>:
 800ba12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba16:	6903      	ldr	r3, [r0, #16]
 800ba18:	690c      	ldr	r4, [r1, #16]
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	db7e      	blt.n	800bb1e <quorem+0x10c>
 800ba20:	3c01      	subs	r4, #1
 800ba22:	f101 0814 	add.w	r8, r1, #20
 800ba26:	f100 0514 	add.w	r5, r0, #20
 800ba2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba44:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba48:	d331      	bcc.n	800baae <quorem+0x9c>
 800ba4a:	f04f 0e00 	mov.w	lr, #0
 800ba4e:	4640      	mov	r0, r8
 800ba50:	46ac      	mov	ip, r5
 800ba52:	46f2      	mov	sl, lr
 800ba54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba58:	b293      	uxth	r3, r2
 800ba5a:	fb06 e303 	mla	r3, r6, r3, lr
 800ba5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba62:	0c1a      	lsrs	r2, r3, #16
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	ebaa 0303 	sub.w	r3, sl, r3
 800ba6a:	f8dc a000 	ldr.w	sl, [ip]
 800ba6e:	fa13 f38a 	uxtah	r3, r3, sl
 800ba72:	fb06 220e 	mla	r2, r6, lr, r2
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	9b00      	ldr	r3, [sp, #0]
 800ba7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba7e:	b292      	uxth	r2, r2
 800ba80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba88:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba8c:	4581      	cmp	r9, r0
 800ba8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba92:	f84c 3b04 	str.w	r3, [ip], #4
 800ba96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba9a:	d2db      	bcs.n	800ba54 <quorem+0x42>
 800ba9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800baa0:	b92b      	cbnz	r3, 800baae <quorem+0x9c>
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	429d      	cmp	r5, r3
 800baa8:	461a      	mov	r2, r3
 800baaa:	d32c      	bcc.n	800bb06 <quorem+0xf4>
 800baac:	613c      	str	r4, [r7, #16]
 800baae:	4638      	mov	r0, r7
 800bab0:	f001 f8f4 	bl	800cc9c <__mcmp>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	db22      	blt.n	800bafe <quorem+0xec>
 800bab8:	3601      	adds	r6, #1
 800baba:	4629      	mov	r1, r5
 800babc:	2000      	movs	r0, #0
 800babe:	f858 2b04 	ldr.w	r2, [r8], #4
 800bac2:	f8d1 c000 	ldr.w	ip, [r1]
 800bac6:	b293      	uxth	r3, r2
 800bac8:	1ac3      	subs	r3, r0, r3
 800baca:	0c12      	lsrs	r2, r2, #16
 800bacc:	fa13 f38c 	uxtah	r3, r3, ip
 800bad0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bad8:	b29b      	uxth	r3, r3
 800bada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bade:	45c1      	cmp	r9, r8
 800bae0:	f841 3b04 	str.w	r3, [r1], #4
 800bae4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bae8:	d2e9      	bcs.n	800babe <quorem+0xac>
 800baea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baf2:	b922      	cbnz	r2, 800bafe <quorem+0xec>
 800baf4:	3b04      	subs	r3, #4
 800baf6:	429d      	cmp	r5, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	d30a      	bcc.n	800bb12 <quorem+0x100>
 800bafc:	613c      	str	r4, [r7, #16]
 800bafe:	4630      	mov	r0, r6
 800bb00:	b003      	add	sp, #12
 800bb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	3b04      	subs	r3, #4
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	d1ce      	bne.n	800baac <quorem+0x9a>
 800bb0e:	3c01      	subs	r4, #1
 800bb10:	e7c9      	b.n	800baa6 <quorem+0x94>
 800bb12:	6812      	ldr	r2, [r2, #0]
 800bb14:	3b04      	subs	r3, #4
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d1f0      	bne.n	800bafc <quorem+0xea>
 800bb1a:	3c01      	subs	r4, #1
 800bb1c:	e7eb      	b.n	800baf6 <quorem+0xe4>
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e7ee      	b.n	800bb00 <quorem+0xee>
 800bb22:	0000      	movs	r0, r0
 800bb24:	0000      	movs	r0, r0
	...

0800bb28 <_dtoa_r>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	ed2d 8b04 	vpush	{d8-d9}
 800bb30:	69c5      	ldr	r5, [r0, #28]
 800bb32:	b093      	sub	sp, #76	; 0x4c
 800bb34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb38:	ec57 6b10 	vmov	r6, r7, d0
 800bb3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb40:	9107      	str	r1, [sp, #28]
 800bb42:	4604      	mov	r4, r0
 800bb44:	920a      	str	r2, [sp, #40]	; 0x28
 800bb46:	930d      	str	r3, [sp, #52]	; 0x34
 800bb48:	b975      	cbnz	r5, 800bb68 <_dtoa_r+0x40>
 800bb4a:	2010      	movs	r0, #16
 800bb4c:	f7ff f8aa 	bl	800aca4 <malloc>
 800bb50:	4602      	mov	r2, r0
 800bb52:	61e0      	str	r0, [r4, #28]
 800bb54:	b920      	cbnz	r0, 800bb60 <_dtoa_r+0x38>
 800bb56:	4bae      	ldr	r3, [pc, #696]	; (800be10 <_dtoa_r+0x2e8>)
 800bb58:	21ef      	movs	r1, #239	; 0xef
 800bb5a:	48ae      	ldr	r0, [pc, #696]	; (800be14 <_dtoa_r+0x2ec>)
 800bb5c:	f001 fa5a 	bl	800d014 <__assert_func>
 800bb60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb64:	6005      	str	r5, [r0, #0]
 800bb66:	60c5      	str	r5, [r0, #12]
 800bb68:	69e3      	ldr	r3, [r4, #28]
 800bb6a:	6819      	ldr	r1, [r3, #0]
 800bb6c:	b151      	cbz	r1, 800bb84 <_dtoa_r+0x5c>
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	604a      	str	r2, [r1, #4]
 800bb72:	2301      	movs	r3, #1
 800bb74:	4093      	lsls	r3, r2
 800bb76:	608b      	str	r3, [r1, #8]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fe53 	bl	800c824 <_Bfree>
 800bb7e:	69e3      	ldr	r3, [r4, #28]
 800bb80:	2200      	movs	r2, #0
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	1e3b      	subs	r3, r7, #0
 800bb86:	bfbb      	ittet	lt
 800bb88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb8c:	9303      	strlt	r3, [sp, #12]
 800bb8e:	2300      	movge	r3, #0
 800bb90:	2201      	movlt	r2, #1
 800bb92:	bfac      	ite	ge
 800bb94:	f8c8 3000 	strge.w	r3, [r8]
 800bb98:	f8c8 2000 	strlt.w	r2, [r8]
 800bb9c:	4b9e      	ldr	r3, [pc, #632]	; (800be18 <_dtoa_r+0x2f0>)
 800bb9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bba2:	ea33 0308 	bics.w	r3, r3, r8
 800bba6:	d11b      	bne.n	800bbe0 <_dtoa_r+0xb8>
 800bba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bbb4:	4333      	orrs	r3, r6
 800bbb6:	f000 8593 	beq.w	800c6e0 <_dtoa_r+0xbb8>
 800bbba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbbc:	b963      	cbnz	r3, 800bbd8 <_dtoa_r+0xb0>
 800bbbe:	4b97      	ldr	r3, [pc, #604]	; (800be1c <_dtoa_r+0x2f4>)
 800bbc0:	e027      	b.n	800bc12 <_dtoa_r+0xea>
 800bbc2:	4b97      	ldr	r3, [pc, #604]	; (800be20 <_dtoa_r+0x2f8>)
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	9800      	ldr	r0, [sp, #0]
 800bbce:	b013      	add	sp, #76	; 0x4c
 800bbd0:	ecbd 8b04 	vpop	{d8-d9}
 800bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	4b90      	ldr	r3, [pc, #576]	; (800be1c <_dtoa_r+0x2f4>)
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	3303      	adds	r3, #3
 800bbde:	e7f3      	b.n	800bbc8 <_dtoa_r+0xa0>
 800bbe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	ec51 0b17 	vmov	r0, r1, d7
 800bbea:	eeb0 8a47 	vmov.f32	s16, s14
 800bbee:	eef0 8a67 	vmov.f32	s17, s15
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f7f4 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	b160      	cbz	r0, 800bc16 <_dtoa_r+0xee>
 800bbfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbfe:	2301      	movs	r3, #1
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 8568 	beq.w	800c6da <_dtoa_r+0xbb2>
 800bc0a:	4b86      	ldr	r3, [pc, #536]	; (800be24 <_dtoa_r+0x2fc>)
 800bc0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	e7da      	b.n	800bbcc <_dtoa_r+0xa4>
 800bc16:	aa10      	add	r2, sp, #64	; 0x40
 800bc18:	a911      	add	r1, sp, #68	; 0x44
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc20:	eef0 0a68 	vmov.f32	s1, s17
 800bc24:	f001 f8e0 	bl	800cde8 <__d2b>
 800bc28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc2c:	4682      	mov	sl, r0
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	d07f      	beq.n	800bd32 <_dtoa_r+0x20a>
 800bc32:	ee18 3a90 	vmov	r3, s17
 800bc36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc3e:	ec51 0b18 	vmov	r0, r1, d8
 800bc42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc4e:	4619      	mov	r1, r3
 800bc50:	2200      	movs	r2, #0
 800bc52:	4b75      	ldr	r3, [pc, #468]	; (800be28 <_dtoa_r+0x300>)
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	a367      	add	r3, pc, #412	; (adr r3, 800bdf8 <_dtoa_r+0x2d0>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	a367      	add	r3, pc, #412	; (adr r3, 800be00 <_dtoa_r+0x2d8>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f7f4 fb10 	bl	800028c <__adddf3>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	4628      	mov	r0, r5
 800bc70:	460f      	mov	r7, r1
 800bc72:	f7f4 fc57 	bl	8000524 <__aeabi_i2d>
 800bc76:	a364      	add	r3, pc, #400	; (adr r3, 800be08 <_dtoa_r+0x2e0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fcbc 	bl	80005f8 <__aeabi_dmul>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4630      	mov	r0, r6
 800bc86:	4639      	mov	r1, r7
 800bc88:	f7f4 fb00 	bl	800028c <__adddf3>
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	f7f4 ff62 	bl	8000b58 <__aeabi_d2iz>
 800bc94:	2200      	movs	r2, #0
 800bc96:	4683      	mov	fp, r0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	f7f4 ff1d 	bl	8000adc <__aeabi_dcmplt>
 800bca2:	b148      	cbz	r0, 800bcb8 <_dtoa_r+0x190>
 800bca4:	4658      	mov	r0, fp
 800bca6:	f7f4 fc3d 	bl	8000524 <__aeabi_i2d>
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	f7f4 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcb2:	b908      	cbnz	r0, 800bcb8 <_dtoa_r+0x190>
 800bcb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcb8:	f1bb 0f16 	cmp.w	fp, #22
 800bcbc:	d857      	bhi.n	800bd6e <_dtoa_r+0x246>
 800bcbe:	4b5b      	ldr	r3, [pc, #364]	; (800be2c <_dtoa_r+0x304>)
 800bcc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	ec51 0b18 	vmov	r0, r1, d8
 800bccc:	f7f4 ff06 	bl	8000adc <__aeabi_dcmplt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d04e      	beq.n	800bd72 <_dtoa_r+0x24a>
 800bcd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcd8:	2300      	movs	r3, #0
 800bcda:	930c      	str	r3, [sp, #48]	; 0x30
 800bcdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcde:	1b5b      	subs	r3, r3, r5
 800bce0:	1e5a      	subs	r2, r3, #1
 800bce2:	bf45      	ittet	mi
 800bce4:	f1c3 0301 	rsbmi	r3, r3, #1
 800bce8:	9305      	strmi	r3, [sp, #20]
 800bcea:	2300      	movpl	r3, #0
 800bcec:	2300      	movmi	r3, #0
 800bcee:	9206      	str	r2, [sp, #24]
 800bcf0:	bf54      	ite	pl
 800bcf2:	9305      	strpl	r3, [sp, #20]
 800bcf4:	9306      	strmi	r3, [sp, #24]
 800bcf6:	f1bb 0f00 	cmp.w	fp, #0
 800bcfa:	db3c      	blt.n	800bd76 <_dtoa_r+0x24e>
 800bcfc:	9b06      	ldr	r3, [sp, #24]
 800bcfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bd02:	445b      	add	r3, fp
 800bd04:	9306      	str	r3, [sp, #24]
 800bd06:	2300      	movs	r3, #0
 800bd08:	9308      	str	r3, [sp, #32]
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	2b09      	cmp	r3, #9
 800bd0e:	d868      	bhi.n	800bde2 <_dtoa_r+0x2ba>
 800bd10:	2b05      	cmp	r3, #5
 800bd12:	bfc4      	itt	gt
 800bd14:	3b04      	subgt	r3, #4
 800bd16:	9307      	strgt	r3, [sp, #28]
 800bd18:	9b07      	ldr	r3, [sp, #28]
 800bd1a:	f1a3 0302 	sub.w	r3, r3, #2
 800bd1e:	bfcc      	ite	gt
 800bd20:	2500      	movgt	r5, #0
 800bd22:	2501      	movle	r5, #1
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	f200 8085 	bhi.w	800be34 <_dtoa_r+0x30c>
 800bd2a:	e8df f003 	tbb	[pc, r3]
 800bd2e:	3b2e      	.short	0x3b2e
 800bd30:	5839      	.short	0x5839
 800bd32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bd36:	441d      	add	r5, r3
 800bd38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bd3c:	2b20      	cmp	r3, #32
 800bd3e:	bfc1      	itttt	gt
 800bd40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd44:	fa08 f803 	lslgt.w	r8, r8, r3
 800bd48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bd4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bd50:	bfd6      	itet	le
 800bd52:	f1c3 0320 	rsble	r3, r3, #32
 800bd56:	ea48 0003 	orrgt.w	r0, r8, r3
 800bd5a:	fa06 f003 	lslle.w	r0, r6, r3
 800bd5e:	f7f4 fbd1 	bl	8000504 <__aeabi_ui2d>
 800bd62:	2201      	movs	r2, #1
 800bd64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bd68:	3d01      	subs	r5, #1
 800bd6a:	920e      	str	r2, [sp, #56]	; 0x38
 800bd6c:	e76f      	b.n	800bc4e <_dtoa_r+0x126>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e7b3      	b.n	800bcda <_dtoa_r+0x1b2>
 800bd72:	900c      	str	r0, [sp, #48]	; 0x30
 800bd74:	e7b2      	b.n	800bcdc <_dtoa_r+0x1b4>
 800bd76:	9b05      	ldr	r3, [sp, #20]
 800bd78:	eba3 030b 	sub.w	r3, r3, fp
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	f1cb 0300 	rsb	r3, fp, #0
 800bd82:	9308      	str	r3, [sp, #32]
 800bd84:	2300      	movs	r3, #0
 800bd86:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd88:	e7bf      	b.n	800bd0a <_dtoa_r+0x1e2>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc52      	bgt.n	800be3a <_dtoa_r+0x312>
 800bd94:	2301      	movs	r3, #1
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	9304      	str	r3, [sp, #16]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd9e:	e00b      	b.n	800bdb8 <_dtoa_r+0x290>
 800bda0:	2301      	movs	r3, #1
 800bda2:	e7f3      	b.n	800bd8c <_dtoa_r+0x264>
 800bda4:	2300      	movs	r3, #0
 800bda6:	9309      	str	r3, [sp, #36]	; 0x24
 800bda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdaa:	445b      	add	r3, fp
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	9304      	str	r3, [sp, #16]
 800bdb4:	bfb8      	it	lt
 800bdb6:	2301      	movlt	r3, #1
 800bdb8:	69e0      	ldr	r0, [r4, #28]
 800bdba:	2100      	movs	r1, #0
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	f102 0614 	add.w	r6, r2, #20
 800bdc2:	429e      	cmp	r6, r3
 800bdc4:	d93d      	bls.n	800be42 <_dtoa_r+0x31a>
 800bdc6:	6041      	str	r1, [r0, #4]
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fceb 	bl	800c7a4 <_Balloc>
 800bdce:	9000      	str	r0, [sp, #0]
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d139      	bne.n	800be48 <_dtoa_r+0x320>
 800bdd4:	4b16      	ldr	r3, [pc, #88]	; (800be30 <_dtoa_r+0x308>)
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	f240 11af 	movw	r1, #431	; 0x1af
 800bddc:	e6bd      	b.n	800bb5a <_dtoa_r+0x32>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e7e1      	b.n	800bda6 <_dtoa_r+0x27e>
 800bde2:	2501      	movs	r5, #1
 800bde4:	2300      	movs	r3, #0
 800bde6:	9307      	str	r3, [sp, #28]
 800bde8:	9509      	str	r5, [sp, #36]	; 0x24
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2312      	movs	r3, #18
 800bdf6:	e7d1      	b.n	800bd9c <_dtoa_r+0x274>
 800bdf8:	636f4361 	.word	0x636f4361
 800bdfc:	3fd287a7 	.word	0x3fd287a7
 800be00:	8b60c8b3 	.word	0x8b60c8b3
 800be04:	3fc68a28 	.word	0x3fc68a28
 800be08:	509f79fb 	.word	0x509f79fb
 800be0c:	3fd34413 	.word	0x3fd34413
 800be10:	0800de05 	.word	0x0800de05
 800be14:	0800de1c 	.word	0x0800de1c
 800be18:	7ff00000 	.word	0x7ff00000
 800be1c:	0800de01 	.word	0x0800de01
 800be20:	0800ddf8 	.word	0x0800ddf8
 800be24:	0800ddd5 	.word	0x0800ddd5
 800be28:	3ff80000 	.word	0x3ff80000
 800be2c:	0800df08 	.word	0x0800df08
 800be30:	0800de74 	.word	0x0800de74
 800be34:	2301      	movs	r3, #1
 800be36:	9309      	str	r3, [sp, #36]	; 0x24
 800be38:	e7d7      	b.n	800bdea <_dtoa_r+0x2c2>
 800be3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	9304      	str	r3, [sp, #16]
 800be40:	e7ba      	b.n	800bdb8 <_dtoa_r+0x290>
 800be42:	3101      	adds	r1, #1
 800be44:	0052      	lsls	r2, r2, #1
 800be46:	e7ba      	b.n	800bdbe <_dtoa_r+0x296>
 800be48:	69e3      	ldr	r3, [r4, #28]
 800be4a:	9a00      	ldr	r2, [sp, #0]
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	2b0e      	cmp	r3, #14
 800be52:	f200 80a8 	bhi.w	800bfa6 <_dtoa_r+0x47e>
 800be56:	2d00      	cmp	r5, #0
 800be58:	f000 80a5 	beq.w	800bfa6 <_dtoa_r+0x47e>
 800be5c:	f1bb 0f00 	cmp.w	fp, #0
 800be60:	dd38      	ble.n	800bed4 <_dtoa_r+0x3ac>
 800be62:	4bc0      	ldr	r3, [pc, #768]	; (800c164 <_dtoa_r+0x63c>)
 800be64:	f00b 020f 	and.w	r2, fp, #15
 800be68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be70:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be74:	ea4f 182b 	mov.w	r8, fp, asr #4
 800be78:	d019      	beq.n	800beae <_dtoa_r+0x386>
 800be7a:	4bbb      	ldr	r3, [pc, #748]	; (800c168 <_dtoa_r+0x640>)
 800be7c:	ec51 0b18 	vmov	r0, r1, d8
 800be80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be84:	f7f4 fce2 	bl	800084c <__aeabi_ddiv>
 800be88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be8c:	f008 080f 	and.w	r8, r8, #15
 800be90:	2503      	movs	r5, #3
 800be92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c168 <_dtoa_r+0x640>
 800be96:	f1b8 0f00 	cmp.w	r8, #0
 800be9a:	d10a      	bne.n	800beb2 <_dtoa_r+0x38a>
 800be9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bea0:	4632      	mov	r2, r6
 800bea2:	463b      	mov	r3, r7
 800bea4:	f7f4 fcd2 	bl	800084c <__aeabi_ddiv>
 800bea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beac:	e02b      	b.n	800bf06 <_dtoa_r+0x3de>
 800beae:	2502      	movs	r5, #2
 800beb0:	e7ef      	b.n	800be92 <_dtoa_r+0x36a>
 800beb2:	f018 0f01 	tst.w	r8, #1
 800beb6:	d008      	beq.n	800beca <_dtoa_r+0x3a2>
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bec0:	f7f4 fb9a 	bl	80005f8 <__aeabi_dmul>
 800bec4:	3501      	adds	r5, #1
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bece:	f109 0908 	add.w	r9, r9, #8
 800bed2:	e7e0      	b.n	800be96 <_dtoa_r+0x36e>
 800bed4:	f000 809f 	beq.w	800c016 <_dtoa_r+0x4ee>
 800bed8:	f1cb 0600 	rsb	r6, fp, #0
 800bedc:	4ba1      	ldr	r3, [pc, #644]	; (800c164 <_dtoa_r+0x63c>)
 800bede:	4fa2      	ldr	r7, [pc, #648]	; (800c168 <_dtoa_r+0x640>)
 800bee0:	f006 020f 	and.w	r2, r6, #15
 800bee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	ec51 0b18 	vmov	r0, r1, d8
 800bef0:	f7f4 fb82 	bl	80005f8 <__aeabi_dmul>
 800bef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bef8:	1136      	asrs	r6, r6, #4
 800befa:	2300      	movs	r3, #0
 800befc:	2502      	movs	r5, #2
 800befe:	2e00      	cmp	r6, #0
 800bf00:	d17e      	bne.n	800c000 <_dtoa_r+0x4d8>
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1d0      	bne.n	800bea8 <_dtoa_r+0x380>
 800bf06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 8084 	beq.w	800c01a <_dtoa_r+0x4f2>
 800bf12:	4b96      	ldr	r3, [pc, #600]	; (800c16c <_dtoa_r+0x644>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	4640      	mov	r0, r8
 800bf18:	4649      	mov	r1, r9
 800bf1a:	f7f4 fddf 	bl	8000adc <__aeabi_dcmplt>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d07b      	beq.n	800c01a <_dtoa_r+0x4f2>
 800bf22:	9b04      	ldr	r3, [sp, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d078      	beq.n	800c01a <_dtoa_r+0x4f2>
 800bf28:	9b01      	ldr	r3, [sp, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dd39      	ble.n	800bfa2 <_dtoa_r+0x47a>
 800bf2e:	4b90      	ldr	r3, [pc, #576]	; (800c170 <_dtoa_r+0x648>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	4640      	mov	r0, r8
 800bf34:	4649      	mov	r1, r9
 800bf36:	f7f4 fb5f 	bl	80005f8 <__aeabi_dmul>
 800bf3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3e:	9e01      	ldr	r6, [sp, #4]
 800bf40:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf44:	3501      	adds	r5, #1
 800bf46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7f4 faea 	bl	8000524 <__aeabi_i2d>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	4b86      	ldr	r3, [pc, #536]	; (800c174 <_dtoa_r+0x64c>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f7f4 f996 	bl	800028c <__adddf3>
 800bf60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf68:	9303      	str	r3, [sp, #12]
 800bf6a:	2e00      	cmp	r6, #0
 800bf6c:	d158      	bne.n	800c020 <_dtoa_r+0x4f8>
 800bf6e:	4b82      	ldr	r3, [pc, #520]	; (800c178 <_dtoa_r+0x650>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	4640      	mov	r0, r8
 800bf74:	4649      	mov	r1, r9
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf7e:	4680      	mov	r8, r0
 800bf80:	4689      	mov	r9, r1
 800bf82:	f7f4 fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f040 8296 	bne.w	800c4b8 <_dtoa_r+0x990>
 800bf8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bf90:	4640      	mov	r0, r8
 800bf92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf96:	4649      	mov	r1, r9
 800bf98:	f7f4 fda0 	bl	8000adc <__aeabi_dcmplt>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f040 8289 	bne.w	800c4b4 <_dtoa_r+0x98c>
 800bfa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bfa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f2c0 814e 	blt.w	800c24a <_dtoa_r+0x722>
 800bfae:	f1bb 0f0e 	cmp.w	fp, #14
 800bfb2:	f300 814a 	bgt.w	800c24a <_dtoa_r+0x722>
 800bfb6:	4b6b      	ldr	r3, [pc, #428]	; (800c164 <_dtoa_r+0x63c>)
 800bfb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bfbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f280 80dc 	bge.w	800c180 <_dtoa_r+0x658>
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f300 80d8 	bgt.w	800c180 <_dtoa_r+0x658>
 800bfd0:	f040 826f 	bne.w	800c4b2 <_dtoa_r+0x98a>
 800bfd4:	4b68      	ldr	r3, [pc, #416]	; (800c178 <_dtoa_r+0x650>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfe4:	f7f4 fd8e 	bl	8000b04 <__aeabi_dcmpge>
 800bfe8:	9e04      	ldr	r6, [sp, #16]
 800bfea:	4637      	mov	r7, r6
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f040 8245 	bne.w	800c47c <_dtoa_r+0x954>
 800bff2:	9d00      	ldr	r5, [sp, #0]
 800bff4:	2331      	movs	r3, #49	; 0x31
 800bff6:	f805 3b01 	strb.w	r3, [r5], #1
 800bffa:	f10b 0b01 	add.w	fp, fp, #1
 800bffe:	e241      	b.n	800c484 <_dtoa_r+0x95c>
 800c000:	07f2      	lsls	r2, r6, #31
 800c002:	d505      	bpl.n	800c010 <_dtoa_r+0x4e8>
 800c004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c008:	f7f4 faf6 	bl	80005f8 <__aeabi_dmul>
 800c00c:	3501      	adds	r5, #1
 800c00e:	2301      	movs	r3, #1
 800c010:	1076      	asrs	r6, r6, #1
 800c012:	3708      	adds	r7, #8
 800c014:	e773      	b.n	800befe <_dtoa_r+0x3d6>
 800c016:	2502      	movs	r5, #2
 800c018:	e775      	b.n	800bf06 <_dtoa_r+0x3de>
 800c01a:	9e04      	ldr	r6, [sp, #16]
 800c01c:	465f      	mov	r7, fp
 800c01e:	e792      	b.n	800bf46 <_dtoa_r+0x41e>
 800c020:	9900      	ldr	r1, [sp, #0]
 800c022:	4b50      	ldr	r3, [pc, #320]	; (800c164 <_dtoa_r+0x63c>)
 800c024:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c028:	4431      	add	r1, r6
 800c02a:	9102      	str	r1, [sp, #8]
 800c02c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c02e:	eeb0 9a47 	vmov.f32	s18, s14
 800c032:	eef0 9a67 	vmov.f32	s19, s15
 800c036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c03a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c03e:	2900      	cmp	r1, #0
 800c040:	d044      	beq.n	800c0cc <_dtoa_r+0x5a4>
 800c042:	494e      	ldr	r1, [pc, #312]	; (800c17c <_dtoa_r+0x654>)
 800c044:	2000      	movs	r0, #0
 800c046:	f7f4 fc01 	bl	800084c <__aeabi_ddiv>
 800c04a:	ec53 2b19 	vmov	r2, r3, d9
 800c04e:	f7f4 f91b 	bl	8000288 <__aeabi_dsub>
 800c052:	9d00      	ldr	r5, [sp, #0]
 800c054:	ec41 0b19 	vmov	d9, r0, r1
 800c058:	4649      	mov	r1, r9
 800c05a:	4640      	mov	r0, r8
 800c05c:	f7f4 fd7c 	bl	8000b58 <__aeabi_d2iz>
 800c060:	4606      	mov	r6, r0
 800c062:	f7f4 fa5f 	bl	8000524 <__aeabi_i2d>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	f7f4 f90b 	bl	8000288 <__aeabi_dsub>
 800c072:	3630      	adds	r6, #48	; 0x30
 800c074:	f805 6b01 	strb.w	r6, [r5], #1
 800c078:	ec53 2b19 	vmov	r2, r3, d9
 800c07c:	4680      	mov	r8, r0
 800c07e:	4689      	mov	r9, r1
 800c080:	f7f4 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800c084:	2800      	cmp	r0, #0
 800c086:	d164      	bne.n	800c152 <_dtoa_r+0x62a>
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	4937      	ldr	r1, [pc, #220]	; (800c16c <_dtoa_r+0x644>)
 800c08e:	2000      	movs	r0, #0
 800c090:	f7f4 f8fa 	bl	8000288 <__aeabi_dsub>
 800c094:	ec53 2b19 	vmov	r2, r3, d9
 800c098:	f7f4 fd20 	bl	8000adc <__aeabi_dcmplt>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f040 80b6 	bne.w	800c20e <_dtoa_r+0x6e6>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	429d      	cmp	r5, r3
 800c0a6:	f43f af7c 	beq.w	800bfa2 <_dtoa_r+0x47a>
 800c0aa:	4b31      	ldr	r3, [pc, #196]	; (800c170 <_dtoa_r+0x648>)
 800c0ac:	ec51 0b19 	vmov	r0, r1, d9
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	4b2e      	ldr	r3, [pc, #184]	; (800c170 <_dtoa_r+0x648>)
 800c0b8:	ec41 0b19 	vmov	d9, r0, r1
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4640      	mov	r0, r8
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	f7f4 fa99 	bl	80005f8 <__aeabi_dmul>
 800c0c6:	4680      	mov	r8, r0
 800c0c8:	4689      	mov	r9, r1
 800c0ca:	e7c5      	b.n	800c058 <_dtoa_r+0x530>
 800c0cc:	ec51 0b17 	vmov	r0, r1, d7
 800c0d0:	f7f4 fa92 	bl	80005f8 <__aeabi_dmul>
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	9d00      	ldr	r5, [sp, #0]
 800c0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0da:	ec41 0b19 	vmov	d9, r0, r1
 800c0de:	4649      	mov	r1, r9
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	f7f4 fd39 	bl	8000b58 <__aeabi_d2iz>
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	f7f4 fa1c 	bl	8000524 <__aeabi_i2d>
 800c0ec:	3630      	adds	r6, #48	; 0x30
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 f8c7 	bl	8000288 <__aeabi_dsub>
 800c0fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c0fe:	9b02      	ldr	r3, [sp, #8]
 800c100:	429d      	cmp	r5, r3
 800c102:	4680      	mov	r8, r0
 800c104:	4689      	mov	r9, r1
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	d124      	bne.n	800c156 <_dtoa_r+0x62e>
 800c10c:	4b1b      	ldr	r3, [pc, #108]	; (800c17c <_dtoa_r+0x654>)
 800c10e:	ec51 0b19 	vmov	r0, r1, d9
 800c112:	f7f4 f8bb 	bl	800028c <__adddf3>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 800c122:	2800      	cmp	r0, #0
 800c124:	d173      	bne.n	800c20e <_dtoa_r+0x6e6>
 800c126:	ec53 2b19 	vmov	r2, r3, d9
 800c12a:	4914      	ldr	r1, [pc, #80]	; (800c17c <_dtoa_r+0x654>)
 800c12c:	2000      	movs	r0, #0
 800c12e:	f7f4 f8ab 	bl	8000288 <__aeabi_dsub>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 fccf 	bl	8000adc <__aeabi_dcmplt>
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f af2f 	beq.w	800bfa2 <_dtoa_r+0x47a>
 800c144:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c146:	1e6b      	subs	r3, r5, #1
 800c148:	930f      	str	r3, [sp, #60]	; 0x3c
 800c14a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c14e:	2b30      	cmp	r3, #48	; 0x30
 800c150:	d0f8      	beq.n	800c144 <_dtoa_r+0x61c>
 800c152:	46bb      	mov	fp, r7
 800c154:	e04a      	b.n	800c1ec <_dtoa_r+0x6c4>
 800c156:	4b06      	ldr	r3, [pc, #24]	; (800c170 <_dtoa_r+0x648>)
 800c158:	f7f4 fa4e 	bl	80005f8 <__aeabi_dmul>
 800c15c:	4680      	mov	r8, r0
 800c15e:	4689      	mov	r9, r1
 800c160:	e7bd      	b.n	800c0de <_dtoa_r+0x5b6>
 800c162:	bf00      	nop
 800c164:	0800df08 	.word	0x0800df08
 800c168:	0800dee0 	.word	0x0800dee0
 800c16c:	3ff00000 	.word	0x3ff00000
 800c170:	40240000 	.word	0x40240000
 800c174:	401c0000 	.word	0x401c0000
 800c178:	40140000 	.word	0x40140000
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c184:	9d00      	ldr	r5, [sp, #0]
 800c186:	4642      	mov	r2, r8
 800c188:	464b      	mov	r3, r9
 800c18a:	4630      	mov	r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	f7f4 fb5d 	bl	800084c <__aeabi_ddiv>
 800c192:	f7f4 fce1 	bl	8000b58 <__aeabi_d2iz>
 800c196:	9001      	str	r0, [sp, #4]
 800c198:	f7f4 f9c4 	bl	8000524 <__aeabi_i2d>
 800c19c:	4642      	mov	r2, r8
 800c19e:	464b      	mov	r3, r9
 800c1a0:	f7f4 fa2a 	bl	80005f8 <__aeabi_dmul>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	f7f4 f86c 	bl	8000288 <__aeabi_dsub>
 800c1b0:	9e01      	ldr	r6, [sp, #4]
 800c1b2:	9f04      	ldr	r7, [sp, #16]
 800c1b4:	3630      	adds	r6, #48	; 0x30
 800c1b6:	f805 6b01 	strb.w	r6, [r5], #1
 800c1ba:	9e00      	ldr	r6, [sp, #0]
 800c1bc:	1bae      	subs	r6, r5, r6
 800c1be:	42b7      	cmp	r7, r6
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	d134      	bne.n	800c230 <_dtoa_r+0x708>
 800c1c6:	f7f4 f861 	bl	800028c <__adddf3>
 800c1ca:	4642      	mov	r2, r8
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	f7f4 fca1 	bl	8000b18 <__aeabi_dcmpgt>
 800c1d6:	b9c8      	cbnz	r0, 800c20c <_dtoa_r+0x6e4>
 800c1d8:	4642      	mov	r2, r8
 800c1da:	464b      	mov	r3, r9
 800c1dc:	4630      	mov	r0, r6
 800c1de:	4639      	mov	r1, r7
 800c1e0:	f7f4 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1e4:	b110      	cbz	r0, 800c1ec <_dtoa_r+0x6c4>
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	07db      	lsls	r3, r3, #31
 800c1ea:	d40f      	bmi.n	800c20c <_dtoa_r+0x6e4>
 800c1ec:	4651      	mov	r1, sl
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 fb18 	bl	800c824 <_Bfree>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1f8:	702b      	strb	r3, [r5, #0]
 800c1fa:	f10b 0301 	add.w	r3, fp, #1
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c202:	2b00      	cmp	r3, #0
 800c204:	f43f ace2 	beq.w	800bbcc <_dtoa_r+0xa4>
 800c208:	601d      	str	r5, [r3, #0]
 800c20a:	e4df      	b.n	800bbcc <_dtoa_r+0xa4>
 800c20c:	465f      	mov	r7, fp
 800c20e:	462b      	mov	r3, r5
 800c210:	461d      	mov	r5, r3
 800c212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c216:	2a39      	cmp	r2, #57	; 0x39
 800c218:	d106      	bne.n	800c228 <_dtoa_r+0x700>
 800c21a:	9a00      	ldr	r2, [sp, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d1f7      	bne.n	800c210 <_dtoa_r+0x6e8>
 800c220:	9900      	ldr	r1, [sp, #0]
 800c222:	2230      	movs	r2, #48	; 0x30
 800c224:	3701      	adds	r7, #1
 800c226:	700a      	strb	r2, [r1, #0]
 800c228:	781a      	ldrb	r2, [r3, #0]
 800c22a:	3201      	adds	r2, #1
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	e790      	b.n	800c152 <_dtoa_r+0x62a>
 800c230:	4ba3      	ldr	r3, [pc, #652]	; (800c4c0 <_dtoa_r+0x998>)
 800c232:	2200      	movs	r2, #0
 800c234:	f7f4 f9e0 	bl	80005f8 <__aeabi_dmul>
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	f7f4 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 800c244:	2800      	cmp	r0, #0
 800c246:	d09e      	beq.n	800c186 <_dtoa_r+0x65e>
 800c248:	e7d0      	b.n	800c1ec <_dtoa_r+0x6c4>
 800c24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c24c:	2a00      	cmp	r2, #0
 800c24e:	f000 80ca 	beq.w	800c3e6 <_dtoa_r+0x8be>
 800c252:	9a07      	ldr	r2, [sp, #28]
 800c254:	2a01      	cmp	r2, #1
 800c256:	f300 80ad 	bgt.w	800c3b4 <_dtoa_r+0x88c>
 800c25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	f000 80a5 	beq.w	800c3ac <_dtoa_r+0x884>
 800c262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c266:	9e08      	ldr	r6, [sp, #32]
 800c268:	9d05      	ldr	r5, [sp, #20]
 800c26a:	9a05      	ldr	r2, [sp, #20]
 800c26c:	441a      	add	r2, r3
 800c26e:	9205      	str	r2, [sp, #20]
 800c270:	9a06      	ldr	r2, [sp, #24]
 800c272:	2101      	movs	r1, #1
 800c274:	441a      	add	r2, r3
 800c276:	4620      	mov	r0, r4
 800c278:	9206      	str	r2, [sp, #24]
 800c27a:	f000 fb89 	bl	800c990 <__i2b>
 800c27e:	4607      	mov	r7, r0
 800c280:	b165      	cbz	r5, 800c29c <_dtoa_r+0x774>
 800c282:	9b06      	ldr	r3, [sp, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	dd09      	ble.n	800c29c <_dtoa_r+0x774>
 800c288:	42ab      	cmp	r3, r5
 800c28a:	9a05      	ldr	r2, [sp, #20]
 800c28c:	bfa8      	it	ge
 800c28e:	462b      	movge	r3, r5
 800c290:	1ad2      	subs	r2, r2, r3
 800c292:	9205      	str	r2, [sp, #20]
 800c294:	9a06      	ldr	r2, [sp, #24]
 800c296:	1aed      	subs	r5, r5, r3
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	9306      	str	r3, [sp, #24]
 800c29c:	9b08      	ldr	r3, [sp, #32]
 800c29e:	b1f3      	cbz	r3, 800c2de <_dtoa_r+0x7b6>
 800c2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80a3 	beq.w	800c3ee <_dtoa_r+0x8c6>
 800c2a8:	2e00      	cmp	r6, #0
 800c2aa:	dd10      	ble.n	800c2ce <_dtoa_r+0x7a6>
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 fc2d 	bl	800cb10 <__pow5mult>
 800c2b6:	4652      	mov	r2, sl
 800c2b8:	4601      	mov	r1, r0
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fb7d 	bl	800c9bc <__multiply>
 800c2c2:	4651      	mov	r1, sl
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 faac 	bl	800c824 <_Bfree>
 800c2cc:	46c2      	mov	sl, r8
 800c2ce:	9b08      	ldr	r3, [sp, #32]
 800c2d0:	1b9a      	subs	r2, r3, r6
 800c2d2:	d004      	beq.n	800c2de <_dtoa_r+0x7b6>
 800c2d4:	4651      	mov	r1, sl
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 fc1a 	bl	800cb10 <__pow5mult>
 800c2dc:	4682      	mov	sl, r0
 800c2de:	2101      	movs	r1, #1
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f000 fb55 	bl	800c990 <__i2b>
 800c2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	f340 8081 	ble.w	800c3f2 <_dtoa_r+0x8ca>
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4601      	mov	r1, r0
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 fc0b 	bl	800cb10 <__pow5mult>
 800c2fa:	9b07      	ldr	r3, [sp, #28]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	4606      	mov	r6, r0
 800c300:	dd7a      	ble.n	800c3f8 <_dtoa_r+0x8d0>
 800c302:	f04f 0800 	mov.w	r8, #0
 800c306:	6933      	ldr	r3, [r6, #16]
 800c308:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c30c:	6918      	ldr	r0, [r3, #16]
 800c30e:	f000 faf1 	bl	800c8f4 <__hi0bits>
 800c312:	f1c0 0020 	rsb	r0, r0, #32
 800c316:	9b06      	ldr	r3, [sp, #24]
 800c318:	4418      	add	r0, r3
 800c31a:	f010 001f 	ands.w	r0, r0, #31
 800c31e:	f000 8094 	beq.w	800c44a <_dtoa_r+0x922>
 800c322:	f1c0 0320 	rsb	r3, r0, #32
 800c326:	2b04      	cmp	r3, #4
 800c328:	f340 8085 	ble.w	800c436 <_dtoa_r+0x90e>
 800c32c:	9b05      	ldr	r3, [sp, #20]
 800c32e:	f1c0 001c 	rsb	r0, r0, #28
 800c332:	4403      	add	r3, r0
 800c334:	9305      	str	r3, [sp, #20]
 800c336:	9b06      	ldr	r3, [sp, #24]
 800c338:	4403      	add	r3, r0
 800c33a:	4405      	add	r5, r0
 800c33c:	9306      	str	r3, [sp, #24]
 800c33e:	9b05      	ldr	r3, [sp, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	dd05      	ble.n	800c350 <_dtoa_r+0x828>
 800c344:	4651      	mov	r1, sl
 800c346:	461a      	mov	r2, r3
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 fc3b 	bl	800cbc4 <__lshift>
 800c34e:	4682      	mov	sl, r0
 800c350:	9b06      	ldr	r3, [sp, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	dd05      	ble.n	800c362 <_dtoa_r+0x83a>
 800c356:	4631      	mov	r1, r6
 800c358:	461a      	mov	r2, r3
 800c35a:	4620      	mov	r0, r4
 800c35c:	f000 fc32 	bl	800cbc4 <__lshift>
 800c360:	4606      	mov	r6, r0
 800c362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c364:	2b00      	cmp	r3, #0
 800c366:	d072      	beq.n	800c44e <_dtoa_r+0x926>
 800c368:	4631      	mov	r1, r6
 800c36a:	4650      	mov	r0, sl
 800c36c:	f000 fc96 	bl	800cc9c <__mcmp>
 800c370:	2800      	cmp	r0, #0
 800c372:	da6c      	bge.n	800c44e <_dtoa_r+0x926>
 800c374:	2300      	movs	r3, #0
 800c376:	4651      	mov	r1, sl
 800c378:	220a      	movs	r2, #10
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 fa74 	bl	800c868 <__multadd>
 800c380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c382:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c386:	4682      	mov	sl, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 81b0 	beq.w	800c6ee <_dtoa_r+0xbc6>
 800c38e:	2300      	movs	r3, #0
 800c390:	4639      	mov	r1, r7
 800c392:	220a      	movs	r2, #10
 800c394:	4620      	mov	r0, r4
 800c396:	f000 fa67 	bl	800c868 <__multadd>
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	4607      	mov	r7, r0
 800c3a0:	f300 8096 	bgt.w	800c4d0 <_dtoa_r+0x9a8>
 800c3a4:	9b07      	ldr	r3, [sp, #28]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	dc59      	bgt.n	800c45e <_dtoa_r+0x936>
 800c3aa:	e091      	b.n	800c4d0 <_dtoa_r+0x9a8>
 800c3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3b2:	e758      	b.n	800c266 <_dtoa_r+0x73e>
 800c3b4:	9b04      	ldr	r3, [sp, #16]
 800c3b6:	1e5e      	subs	r6, r3, #1
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	42b3      	cmp	r3, r6
 800c3bc:	bfbf      	itttt	lt
 800c3be:	9b08      	ldrlt	r3, [sp, #32]
 800c3c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c3c2:	9608      	strlt	r6, [sp, #32]
 800c3c4:	1af3      	sublt	r3, r6, r3
 800c3c6:	bfb4      	ite	lt
 800c3c8:	18d2      	addlt	r2, r2, r3
 800c3ca:	1b9e      	subge	r6, r3, r6
 800c3cc:	9b04      	ldr	r3, [sp, #16]
 800c3ce:	bfbc      	itt	lt
 800c3d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c3d2:	2600      	movlt	r6, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bfb7      	itett	lt
 800c3d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c3dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c3e0:	1a9d      	sublt	r5, r3, r2
 800c3e2:	2300      	movlt	r3, #0
 800c3e4:	e741      	b.n	800c26a <_dtoa_r+0x742>
 800c3e6:	9e08      	ldr	r6, [sp, #32]
 800c3e8:	9d05      	ldr	r5, [sp, #20]
 800c3ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c3ec:	e748      	b.n	800c280 <_dtoa_r+0x758>
 800c3ee:	9a08      	ldr	r2, [sp, #32]
 800c3f0:	e770      	b.n	800c2d4 <_dtoa_r+0x7ac>
 800c3f2:	9b07      	ldr	r3, [sp, #28]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	dc19      	bgt.n	800c42c <_dtoa_r+0x904>
 800c3f8:	9b02      	ldr	r3, [sp, #8]
 800c3fa:	b9bb      	cbnz	r3, 800c42c <_dtoa_r+0x904>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c402:	b99b      	cbnz	r3, 800c42c <_dtoa_r+0x904>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c40a:	0d1b      	lsrs	r3, r3, #20
 800c40c:	051b      	lsls	r3, r3, #20
 800c40e:	b183      	cbz	r3, 800c432 <_dtoa_r+0x90a>
 800c410:	9b05      	ldr	r3, [sp, #20]
 800c412:	3301      	adds	r3, #1
 800c414:	9305      	str	r3, [sp, #20]
 800c416:	9b06      	ldr	r3, [sp, #24]
 800c418:	3301      	adds	r3, #1
 800c41a:	9306      	str	r3, [sp, #24]
 800c41c:	f04f 0801 	mov.w	r8, #1
 800c420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c422:	2b00      	cmp	r3, #0
 800c424:	f47f af6f 	bne.w	800c306 <_dtoa_r+0x7de>
 800c428:	2001      	movs	r0, #1
 800c42a:	e774      	b.n	800c316 <_dtoa_r+0x7ee>
 800c42c:	f04f 0800 	mov.w	r8, #0
 800c430:	e7f6      	b.n	800c420 <_dtoa_r+0x8f8>
 800c432:	4698      	mov	r8, r3
 800c434:	e7f4      	b.n	800c420 <_dtoa_r+0x8f8>
 800c436:	d082      	beq.n	800c33e <_dtoa_r+0x816>
 800c438:	9a05      	ldr	r2, [sp, #20]
 800c43a:	331c      	adds	r3, #28
 800c43c:	441a      	add	r2, r3
 800c43e:	9205      	str	r2, [sp, #20]
 800c440:	9a06      	ldr	r2, [sp, #24]
 800c442:	441a      	add	r2, r3
 800c444:	441d      	add	r5, r3
 800c446:	9206      	str	r2, [sp, #24]
 800c448:	e779      	b.n	800c33e <_dtoa_r+0x816>
 800c44a:	4603      	mov	r3, r0
 800c44c:	e7f4      	b.n	800c438 <_dtoa_r+0x910>
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	dc37      	bgt.n	800c4c4 <_dtoa_r+0x99c>
 800c454:	9b07      	ldr	r3, [sp, #28]
 800c456:	2b02      	cmp	r3, #2
 800c458:	dd34      	ble.n	800c4c4 <_dtoa_r+0x99c>
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	b963      	cbnz	r3, 800c47c <_dtoa_r+0x954>
 800c462:	4631      	mov	r1, r6
 800c464:	2205      	movs	r2, #5
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f9fe 	bl	800c868 <__multadd>
 800c46c:	4601      	mov	r1, r0
 800c46e:	4606      	mov	r6, r0
 800c470:	4650      	mov	r0, sl
 800c472:	f000 fc13 	bl	800cc9c <__mcmp>
 800c476:	2800      	cmp	r0, #0
 800c478:	f73f adbb 	bgt.w	800bff2 <_dtoa_r+0x4ca>
 800c47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c47e:	9d00      	ldr	r5, [sp, #0]
 800c480:	ea6f 0b03 	mvn.w	fp, r3
 800c484:	f04f 0800 	mov.w	r8, #0
 800c488:	4631      	mov	r1, r6
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 f9ca 	bl	800c824 <_Bfree>
 800c490:	2f00      	cmp	r7, #0
 800c492:	f43f aeab 	beq.w	800c1ec <_dtoa_r+0x6c4>
 800c496:	f1b8 0f00 	cmp.w	r8, #0
 800c49a:	d005      	beq.n	800c4a8 <_dtoa_r+0x980>
 800c49c:	45b8      	cmp	r8, r7
 800c49e:	d003      	beq.n	800c4a8 <_dtoa_r+0x980>
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f9be 	bl	800c824 <_Bfree>
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 f9ba 	bl	800c824 <_Bfree>
 800c4b0:	e69c      	b.n	800c1ec <_dtoa_r+0x6c4>
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	4637      	mov	r7, r6
 800c4b6:	e7e1      	b.n	800c47c <_dtoa_r+0x954>
 800c4b8:	46bb      	mov	fp, r7
 800c4ba:	4637      	mov	r7, r6
 800c4bc:	e599      	b.n	800bff2 <_dtoa_r+0x4ca>
 800c4be:	bf00      	nop
 800c4c0:	40240000 	.word	0x40240000
 800c4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80c8 	beq.w	800c65c <_dtoa_r+0xb34>
 800c4cc:	9b04      	ldr	r3, [sp, #16]
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	dd05      	ble.n	800c4e0 <_dtoa_r+0x9b8>
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	462a      	mov	r2, r5
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fb73 	bl	800cbc4 <__lshift>
 800c4de:	4607      	mov	r7, r0
 800c4e0:	f1b8 0f00 	cmp.w	r8, #0
 800c4e4:	d05b      	beq.n	800c59e <_dtoa_r+0xa76>
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 f95b 	bl	800c7a4 <_Balloc>
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	b928      	cbnz	r0, 800c4fe <_dtoa_r+0x9d6>
 800c4f2:	4b83      	ldr	r3, [pc, #524]	; (800c700 <_dtoa_r+0xbd8>)
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c4fa:	f7ff bb2e 	b.w	800bb5a <_dtoa_r+0x32>
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	3202      	adds	r2, #2
 800c502:	0092      	lsls	r2, r2, #2
 800c504:	f107 010c 	add.w	r1, r7, #12
 800c508:	300c      	adds	r0, #12
 800c50a:	f000 fd75 	bl	800cff8 <memcpy>
 800c50e:	2201      	movs	r2, #1
 800c510:	4629      	mov	r1, r5
 800c512:	4620      	mov	r0, r4
 800c514:	f000 fb56 	bl	800cbc4 <__lshift>
 800c518:	9b00      	ldr	r3, [sp, #0]
 800c51a:	3301      	adds	r3, #1
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c522:	4413      	add	r3, r2
 800c524:	9308      	str	r3, [sp, #32]
 800c526:	9b02      	ldr	r3, [sp, #8]
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	46b8      	mov	r8, r7
 800c52e:	9306      	str	r3, [sp, #24]
 800c530:	4607      	mov	r7, r0
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	4631      	mov	r1, r6
 800c536:	3b01      	subs	r3, #1
 800c538:	4650      	mov	r0, sl
 800c53a:	9301      	str	r3, [sp, #4]
 800c53c:	f7ff fa69 	bl	800ba12 <quorem>
 800c540:	4641      	mov	r1, r8
 800c542:	9002      	str	r0, [sp, #8]
 800c544:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c548:	4650      	mov	r0, sl
 800c54a:	f000 fba7 	bl	800cc9c <__mcmp>
 800c54e:	463a      	mov	r2, r7
 800c550:	9005      	str	r0, [sp, #20]
 800c552:	4631      	mov	r1, r6
 800c554:	4620      	mov	r0, r4
 800c556:	f000 fbbd 	bl	800ccd4 <__mdiff>
 800c55a:	68c2      	ldr	r2, [r0, #12]
 800c55c:	4605      	mov	r5, r0
 800c55e:	bb02      	cbnz	r2, 800c5a2 <_dtoa_r+0xa7a>
 800c560:	4601      	mov	r1, r0
 800c562:	4650      	mov	r0, sl
 800c564:	f000 fb9a 	bl	800cc9c <__mcmp>
 800c568:	4602      	mov	r2, r0
 800c56a:	4629      	mov	r1, r5
 800c56c:	4620      	mov	r0, r4
 800c56e:	9209      	str	r2, [sp, #36]	; 0x24
 800c570:	f000 f958 	bl	800c824 <_Bfree>
 800c574:	9b07      	ldr	r3, [sp, #28]
 800c576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c578:	9d04      	ldr	r5, [sp, #16]
 800c57a:	ea43 0102 	orr.w	r1, r3, r2
 800c57e:	9b06      	ldr	r3, [sp, #24]
 800c580:	4319      	orrs	r1, r3
 800c582:	d110      	bne.n	800c5a6 <_dtoa_r+0xa7e>
 800c584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c588:	d029      	beq.n	800c5de <_dtoa_r+0xab6>
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dd02      	ble.n	800c596 <_dtoa_r+0xa6e>
 800c590:	9b02      	ldr	r3, [sp, #8]
 800c592:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	f883 9000 	strb.w	r9, [r3]
 800c59c:	e774      	b.n	800c488 <_dtoa_r+0x960>
 800c59e:	4638      	mov	r0, r7
 800c5a0:	e7ba      	b.n	800c518 <_dtoa_r+0x9f0>
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	e7e1      	b.n	800c56a <_dtoa_r+0xa42>
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	db04      	blt.n	800c5b6 <_dtoa_r+0xa8e>
 800c5ac:	9907      	ldr	r1, [sp, #28]
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	9906      	ldr	r1, [sp, #24]
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	d120      	bne.n	800c5f8 <_dtoa_r+0xad0>
 800c5b6:	2a00      	cmp	r2, #0
 800c5b8:	dded      	ble.n	800c596 <_dtoa_r+0xa6e>
 800c5ba:	4651      	mov	r1, sl
 800c5bc:	2201      	movs	r2, #1
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fb00 	bl	800cbc4 <__lshift>
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4682      	mov	sl, r0
 800c5c8:	f000 fb68 	bl	800cc9c <__mcmp>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	dc03      	bgt.n	800c5d8 <_dtoa_r+0xab0>
 800c5d0:	d1e1      	bne.n	800c596 <_dtoa_r+0xa6e>
 800c5d2:	f019 0f01 	tst.w	r9, #1
 800c5d6:	d0de      	beq.n	800c596 <_dtoa_r+0xa6e>
 800c5d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5dc:	d1d8      	bne.n	800c590 <_dtoa_r+0xa68>
 800c5de:	9a01      	ldr	r2, [sp, #4]
 800c5e0:	2339      	movs	r3, #57	; 0x39
 800c5e2:	7013      	strb	r3, [r2, #0]
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	461d      	mov	r5, r3
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c5ee:	2a39      	cmp	r2, #57	; 0x39
 800c5f0:	d06c      	beq.n	800c6cc <_dtoa_r+0xba4>
 800c5f2:	3201      	adds	r2, #1
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	e747      	b.n	800c488 <_dtoa_r+0x960>
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	dd07      	ble.n	800c60c <_dtoa_r+0xae4>
 800c5fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c600:	d0ed      	beq.n	800c5de <_dtoa_r+0xab6>
 800c602:	9a01      	ldr	r2, [sp, #4]
 800c604:	f109 0301 	add.w	r3, r9, #1
 800c608:	7013      	strb	r3, [r2, #0]
 800c60a:	e73d      	b.n	800c488 <_dtoa_r+0x960>
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	9a08      	ldr	r2, [sp, #32]
 800c610:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c614:	4293      	cmp	r3, r2
 800c616:	d043      	beq.n	800c6a0 <_dtoa_r+0xb78>
 800c618:	4651      	mov	r1, sl
 800c61a:	2300      	movs	r3, #0
 800c61c:	220a      	movs	r2, #10
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f922 	bl	800c868 <__multadd>
 800c624:	45b8      	cmp	r8, r7
 800c626:	4682      	mov	sl, r0
 800c628:	f04f 0300 	mov.w	r3, #0
 800c62c:	f04f 020a 	mov.w	r2, #10
 800c630:	4641      	mov	r1, r8
 800c632:	4620      	mov	r0, r4
 800c634:	d107      	bne.n	800c646 <_dtoa_r+0xb1e>
 800c636:	f000 f917 	bl	800c868 <__multadd>
 800c63a:	4680      	mov	r8, r0
 800c63c:	4607      	mov	r7, r0
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	3301      	adds	r3, #1
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	e775      	b.n	800c532 <_dtoa_r+0xa0a>
 800c646:	f000 f90f 	bl	800c868 <__multadd>
 800c64a:	4639      	mov	r1, r7
 800c64c:	4680      	mov	r8, r0
 800c64e:	2300      	movs	r3, #0
 800c650:	220a      	movs	r2, #10
 800c652:	4620      	mov	r0, r4
 800c654:	f000 f908 	bl	800c868 <__multadd>
 800c658:	4607      	mov	r7, r0
 800c65a:	e7f0      	b.n	800c63e <_dtoa_r+0xb16>
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	9d00      	ldr	r5, [sp, #0]
 800c662:	4631      	mov	r1, r6
 800c664:	4650      	mov	r0, sl
 800c666:	f7ff f9d4 	bl	800ba12 <quorem>
 800c66a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c66e:	9b00      	ldr	r3, [sp, #0]
 800c670:	f805 9b01 	strb.w	r9, [r5], #1
 800c674:	1aea      	subs	r2, r5, r3
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	4293      	cmp	r3, r2
 800c67a:	dd07      	ble.n	800c68c <_dtoa_r+0xb64>
 800c67c:	4651      	mov	r1, sl
 800c67e:	2300      	movs	r3, #0
 800c680:	220a      	movs	r2, #10
 800c682:	4620      	mov	r0, r4
 800c684:	f000 f8f0 	bl	800c868 <__multadd>
 800c688:	4682      	mov	sl, r0
 800c68a:	e7ea      	b.n	800c662 <_dtoa_r+0xb3a>
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bfc8      	it	gt
 800c692:	461d      	movgt	r5, r3
 800c694:	9b00      	ldr	r3, [sp, #0]
 800c696:	bfd8      	it	le
 800c698:	2501      	movle	r5, #1
 800c69a:	441d      	add	r5, r3
 800c69c:	f04f 0800 	mov.w	r8, #0
 800c6a0:	4651      	mov	r1, sl
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fa8d 	bl	800cbc4 <__lshift>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4682      	mov	sl, r0
 800c6ae:	f000 faf5 	bl	800cc9c <__mcmp>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	dc96      	bgt.n	800c5e4 <_dtoa_r+0xabc>
 800c6b6:	d102      	bne.n	800c6be <_dtoa_r+0xb96>
 800c6b8:	f019 0f01 	tst.w	r9, #1
 800c6bc:	d192      	bne.n	800c5e4 <_dtoa_r+0xabc>
 800c6be:	462b      	mov	r3, r5
 800c6c0:	461d      	mov	r5, r3
 800c6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6c6:	2a30      	cmp	r2, #48	; 0x30
 800c6c8:	d0fa      	beq.n	800c6c0 <_dtoa_r+0xb98>
 800c6ca:	e6dd      	b.n	800c488 <_dtoa_r+0x960>
 800c6cc:	9a00      	ldr	r2, [sp, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d189      	bne.n	800c5e6 <_dtoa_r+0xabe>
 800c6d2:	f10b 0b01 	add.w	fp, fp, #1
 800c6d6:	2331      	movs	r3, #49	; 0x31
 800c6d8:	e796      	b.n	800c608 <_dtoa_r+0xae0>
 800c6da:	4b0a      	ldr	r3, [pc, #40]	; (800c704 <_dtoa_r+0xbdc>)
 800c6dc:	f7ff ba99 	b.w	800bc12 <_dtoa_r+0xea>
 800c6e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f47f aa6d 	bne.w	800bbc2 <_dtoa_r+0x9a>
 800c6e8:	4b07      	ldr	r3, [pc, #28]	; (800c708 <_dtoa_r+0xbe0>)
 800c6ea:	f7ff ba92 	b.w	800bc12 <_dtoa_r+0xea>
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dcb5      	bgt.n	800c660 <_dtoa_r+0xb38>
 800c6f4:	9b07      	ldr	r3, [sp, #28]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	f73f aeb1 	bgt.w	800c45e <_dtoa_r+0x936>
 800c6fc:	e7b0      	b.n	800c660 <_dtoa_r+0xb38>
 800c6fe:	bf00      	nop
 800c700:	0800de74 	.word	0x0800de74
 800c704:	0800ddd4 	.word	0x0800ddd4
 800c708:	0800ddf8 	.word	0x0800ddf8

0800c70c <_free_r>:
 800c70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c70e:	2900      	cmp	r1, #0
 800c710:	d044      	beq.n	800c79c <_free_r+0x90>
 800c712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c716:	9001      	str	r0, [sp, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f1a1 0404 	sub.w	r4, r1, #4
 800c71e:	bfb8      	it	lt
 800c720:	18e4      	addlt	r4, r4, r3
 800c722:	f7fe fb6f 	bl	800ae04 <__malloc_lock>
 800c726:	4a1e      	ldr	r2, [pc, #120]	; (800c7a0 <_free_r+0x94>)
 800c728:	9801      	ldr	r0, [sp, #4]
 800c72a:	6813      	ldr	r3, [r2, #0]
 800c72c:	b933      	cbnz	r3, 800c73c <_free_r+0x30>
 800c72e:	6063      	str	r3, [r4, #4]
 800c730:	6014      	str	r4, [r2, #0]
 800c732:	b003      	add	sp, #12
 800c734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c738:	f7fe bb6a 	b.w	800ae10 <__malloc_unlock>
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	d908      	bls.n	800c752 <_free_r+0x46>
 800c740:	6825      	ldr	r5, [r4, #0]
 800c742:	1961      	adds	r1, r4, r5
 800c744:	428b      	cmp	r3, r1
 800c746:	bf01      	itttt	eq
 800c748:	6819      	ldreq	r1, [r3, #0]
 800c74a:	685b      	ldreq	r3, [r3, #4]
 800c74c:	1949      	addeq	r1, r1, r5
 800c74e:	6021      	streq	r1, [r4, #0]
 800c750:	e7ed      	b.n	800c72e <_free_r+0x22>
 800c752:	461a      	mov	r2, r3
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	b10b      	cbz	r3, 800c75c <_free_r+0x50>
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d9fa      	bls.n	800c752 <_free_r+0x46>
 800c75c:	6811      	ldr	r1, [r2, #0]
 800c75e:	1855      	adds	r5, r2, r1
 800c760:	42a5      	cmp	r5, r4
 800c762:	d10b      	bne.n	800c77c <_free_r+0x70>
 800c764:	6824      	ldr	r4, [r4, #0]
 800c766:	4421      	add	r1, r4
 800c768:	1854      	adds	r4, r2, r1
 800c76a:	42a3      	cmp	r3, r4
 800c76c:	6011      	str	r1, [r2, #0]
 800c76e:	d1e0      	bne.n	800c732 <_free_r+0x26>
 800c770:	681c      	ldr	r4, [r3, #0]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	6053      	str	r3, [r2, #4]
 800c776:	440c      	add	r4, r1
 800c778:	6014      	str	r4, [r2, #0]
 800c77a:	e7da      	b.n	800c732 <_free_r+0x26>
 800c77c:	d902      	bls.n	800c784 <_free_r+0x78>
 800c77e:	230c      	movs	r3, #12
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	e7d6      	b.n	800c732 <_free_r+0x26>
 800c784:	6825      	ldr	r5, [r4, #0]
 800c786:	1961      	adds	r1, r4, r5
 800c788:	428b      	cmp	r3, r1
 800c78a:	bf04      	itt	eq
 800c78c:	6819      	ldreq	r1, [r3, #0]
 800c78e:	685b      	ldreq	r3, [r3, #4]
 800c790:	6063      	str	r3, [r4, #4]
 800c792:	bf04      	itt	eq
 800c794:	1949      	addeq	r1, r1, r5
 800c796:	6021      	streq	r1, [r4, #0]
 800c798:	6054      	str	r4, [r2, #4]
 800c79a:	e7ca      	b.n	800c732 <_free_r+0x26>
 800c79c:	b003      	add	sp, #12
 800c79e:	bd30      	pop	{r4, r5, pc}
 800c7a0:	20000c88 	.word	0x20000c88

0800c7a4 <_Balloc>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	69c6      	ldr	r6, [r0, #28]
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	b976      	cbnz	r6, 800c7cc <_Balloc+0x28>
 800c7ae:	2010      	movs	r0, #16
 800c7b0:	f7fe fa78 	bl	800aca4 <malloc>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	61e0      	str	r0, [r4, #28]
 800c7b8:	b920      	cbnz	r0, 800c7c4 <_Balloc+0x20>
 800c7ba:	4b18      	ldr	r3, [pc, #96]	; (800c81c <_Balloc+0x78>)
 800c7bc:	4818      	ldr	r0, [pc, #96]	; (800c820 <_Balloc+0x7c>)
 800c7be:	216b      	movs	r1, #107	; 0x6b
 800c7c0:	f000 fc28 	bl	800d014 <__assert_func>
 800c7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7c8:	6006      	str	r6, [r0, #0]
 800c7ca:	60c6      	str	r6, [r0, #12]
 800c7cc:	69e6      	ldr	r6, [r4, #28]
 800c7ce:	68f3      	ldr	r3, [r6, #12]
 800c7d0:	b183      	cbz	r3, 800c7f4 <_Balloc+0x50>
 800c7d2:	69e3      	ldr	r3, [r4, #28]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7da:	b9b8      	cbnz	r0, 800c80c <_Balloc+0x68>
 800c7dc:	2101      	movs	r1, #1
 800c7de:	fa01 f605 	lsl.w	r6, r1, r5
 800c7e2:	1d72      	adds	r2, r6, #5
 800c7e4:	0092      	lsls	r2, r2, #2
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 fc32 	bl	800d050 <_calloc_r>
 800c7ec:	b160      	cbz	r0, 800c808 <_Balloc+0x64>
 800c7ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7f2:	e00e      	b.n	800c812 <_Balloc+0x6e>
 800c7f4:	2221      	movs	r2, #33	; 0x21
 800c7f6:	2104      	movs	r1, #4
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 fc29 	bl	800d050 <_calloc_r>
 800c7fe:	69e3      	ldr	r3, [r4, #28]
 800c800:	60f0      	str	r0, [r6, #12]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1e4      	bne.n	800c7d2 <_Balloc+0x2e>
 800c808:	2000      	movs	r0, #0
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
 800c80c:	6802      	ldr	r2, [r0, #0]
 800c80e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c812:	2300      	movs	r3, #0
 800c814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c818:	e7f7      	b.n	800c80a <_Balloc+0x66>
 800c81a:	bf00      	nop
 800c81c:	0800de05 	.word	0x0800de05
 800c820:	0800de85 	.word	0x0800de85

0800c824 <_Bfree>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	69c6      	ldr	r6, [r0, #28]
 800c828:	4605      	mov	r5, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	b976      	cbnz	r6, 800c84c <_Bfree+0x28>
 800c82e:	2010      	movs	r0, #16
 800c830:	f7fe fa38 	bl	800aca4 <malloc>
 800c834:	4602      	mov	r2, r0
 800c836:	61e8      	str	r0, [r5, #28]
 800c838:	b920      	cbnz	r0, 800c844 <_Bfree+0x20>
 800c83a:	4b09      	ldr	r3, [pc, #36]	; (800c860 <_Bfree+0x3c>)
 800c83c:	4809      	ldr	r0, [pc, #36]	; (800c864 <_Bfree+0x40>)
 800c83e:	218f      	movs	r1, #143	; 0x8f
 800c840:	f000 fbe8 	bl	800d014 <__assert_func>
 800c844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c848:	6006      	str	r6, [r0, #0]
 800c84a:	60c6      	str	r6, [r0, #12]
 800c84c:	b13c      	cbz	r4, 800c85e <_Bfree+0x3a>
 800c84e:	69eb      	ldr	r3, [r5, #28]
 800c850:	6862      	ldr	r2, [r4, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c858:	6021      	str	r1, [r4, #0]
 800c85a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c85e:	bd70      	pop	{r4, r5, r6, pc}
 800c860:	0800de05 	.word	0x0800de05
 800c864:	0800de85 	.word	0x0800de85

0800c868 <__multadd>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	690d      	ldr	r5, [r1, #16]
 800c86e:	4607      	mov	r7, r0
 800c870:	460c      	mov	r4, r1
 800c872:	461e      	mov	r6, r3
 800c874:	f101 0c14 	add.w	ip, r1, #20
 800c878:	2000      	movs	r0, #0
 800c87a:	f8dc 3000 	ldr.w	r3, [ip]
 800c87e:	b299      	uxth	r1, r3
 800c880:	fb02 6101 	mla	r1, r2, r1, r6
 800c884:	0c1e      	lsrs	r6, r3, #16
 800c886:	0c0b      	lsrs	r3, r1, #16
 800c888:	fb02 3306 	mla	r3, r2, r6, r3
 800c88c:	b289      	uxth	r1, r1
 800c88e:	3001      	adds	r0, #1
 800c890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c894:	4285      	cmp	r5, r0
 800c896:	f84c 1b04 	str.w	r1, [ip], #4
 800c89a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c89e:	dcec      	bgt.n	800c87a <__multadd+0x12>
 800c8a0:	b30e      	cbz	r6, 800c8e6 <__multadd+0x7e>
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	42ab      	cmp	r3, r5
 800c8a6:	dc19      	bgt.n	800c8dc <__multadd+0x74>
 800c8a8:	6861      	ldr	r1, [r4, #4]
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	3101      	adds	r1, #1
 800c8ae:	f7ff ff79 	bl	800c7a4 <_Balloc>
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__multadd+0x5a>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <__multadd+0x84>)
 800c8ba:	480d      	ldr	r0, [pc, #52]	; (800c8f0 <__multadd+0x88>)
 800c8bc:	21ba      	movs	r1, #186	; 0xba
 800c8be:	f000 fba9 	bl	800d014 <__assert_func>
 800c8c2:	6922      	ldr	r2, [r4, #16]
 800c8c4:	3202      	adds	r2, #2
 800c8c6:	f104 010c 	add.w	r1, r4, #12
 800c8ca:	0092      	lsls	r2, r2, #2
 800c8cc:	300c      	adds	r0, #12
 800c8ce:	f000 fb93 	bl	800cff8 <memcpy>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	f7ff ffa5 	bl	800c824 <_Bfree>
 800c8da:	4644      	mov	r4, r8
 800c8dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	615e      	str	r6, [r3, #20]
 800c8e4:	6125      	str	r5, [r4, #16]
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ec:	0800de74 	.word	0x0800de74
 800c8f0:	0800de85 	.word	0x0800de85

0800c8f4 <__hi0bits>:
 800c8f4:	0c03      	lsrs	r3, r0, #16
 800c8f6:	041b      	lsls	r3, r3, #16
 800c8f8:	b9d3      	cbnz	r3, 800c930 <__hi0bits+0x3c>
 800c8fa:	0400      	lsls	r0, r0, #16
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c902:	bf04      	itt	eq
 800c904:	0200      	lsleq	r0, r0, #8
 800c906:	3308      	addeq	r3, #8
 800c908:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c90c:	bf04      	itt	eq
 800c90e:	0100      	lsleq	r0, r0, #4
 800c910:	3304      	addeq	r3, #4
 800c912:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c916:	bf04      	itt	eq
 800c918:	0080      	lsleq	r0, r0, #2
 800c91a:	3302      	addeq	r3, #2
 800c91c:	2800      	cmp	r0, #0
 800c91e:	db05      	blt.n	800c92c <__hi0bits+0x38>
 800c920:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c924:	f103 0301 	add.w	r3, r3, #1
 800c928:	bf08      	it	eq
 800c92a:	2320      	moveq	r3, #32
 800c92c:	4618      	mov	r0, r3
 800c92e:	4770      	bx	lr
 800c930:	2300      	movs	r3, #0
 800c932:	e7e4      	b.n	800c8fe <__hi0bits+0xa>

0800c934 <__lo0bits>:
 800c934:	6803      	ldr	r3, [r0, #0]
 800c936:	f013 0207 	ands.w	r2, r3, #7
 800c93a:	d00c      	beq.n	800c956 <__lo0bits+0x22>
 800c93c:	07d9      	lsls	r1, r3, #31
 800c93e:	d422      	bmi.n	800c986 <__lo0bits+0x52>
 800c940:	079a      	lsls	r2, r3, #30
 800c942:	bf49      	itett	mi
 800c944:	085b      	lsrmi	r3, r3, #1
 800c946:	089b      	lsrpl	r3, r3, #2
 800c948:	6003      	strmi	r3, [r0, #0]
 800c94a:	2201      	movmi	r2, #1
 800c94c:	bf5c      	itt	pl
 800c94e:	6003      	strpl	r3, [r0, #0]
 800c950:	2202      	movpl	r2, #2
 800c952:	4610      	mov	r0, r2
 800c954:	4770      	bx	lr
 800c956:	b299      	uxth	r1, r3
 800c958:	b909      	cbnz	r1, 800c95e <__lo0bits+0x2a>
 800c95a:	0c1b      	lsrs	r3, r3, #16
 800c95c:	2210      	movs	r2, #16
 800c95e:	b2d9      	uxtb	r1, r3
 800c960:	b909      	cbnz	r1, 800c966 <__lo0bits+0x32>
 800c962:	3208      	adds	r2, #8
 800c964:	0a1b      	lsrs	r3, r3, #8
 800c966:	0719      	lsls	r1, r3, #28
 800c968:	bf04      	itt	eq
 800c96a:	091b      	lsreq	r3, r3, #4
 800c96c:	3204      	addeq	r2, #4
 800c96e:	0799      	lsls	r1, r3, #30
 800c970:	bf04      	itt	eq
 800c972:	089b      	lsreq	r3, r3, #2
 800c974:	3202      	addeq	r2, #2
 800c976:	07d9      	lsls	r1, r3, #31
 800c978:	d403      	bmi.n	800c982 <__lo0bits+0x4e>
 800c97a:	085b      	lsrs	r3, r3, #1
 800c97c:	f102 0201 	add.w	r2, r2, #1
 800c980:	d003      	beq.n	800c98a <__lo0bits+0x56>
 800c982:	6003      	str	r3, [r0, #0]
 800c984:	e7e5      	b.n	800c952 <__lo0bits+0x1e>
 800c986:	2200      	movs	r2, #0
 800c988:	e7e3      	b.n	800c952 <__lo0bits+0x1e>
 800c98a:	2220      	movs	r2, #32
 800c98c:	e7e1      	b.n	800c952 <__lo0bits+0x1e>
	...

0800c990 <__i2b>:
 800c990:	b510      	push	{r4, lr}
 800c992:	460c      	mov	r4, r1
 800c994:	2101      	movs	r1, #1
 800c996:	f7ff ff05 	bl	800c7a4 <_Balloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__i2b+0x1a>
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <__i2b+0x24>)
 800c9a0:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <__i2b+0x28>)
 800c9a2:	f240 1145 	movw	r1, #325	; 0x145
 800c9a6:	f000 fb35 	bl	800d014 <__assert_func>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	6144      	str	r4, [r0, #20]
 800c9ae:	6103      	str	r3, [r0, #16]
 800c9b0:	bd10      	pop	{r4, pc}
 800c9b2:	bf00      	nop
 800c9b4:	0800de74 	.word	0x0800de74
 800c9b8:	0800de85 	.word	0x0800de85

0800c9bc <__multiply>:
 800c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	4691      	mov	r9, r2
 800c9c2:	690a      	ldr	r2, [r1, #16]
 800c9c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	bfb8      	it	lt
 800c9cc:	460b      	movlt	r3, r1
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	bfbc      	itt	lt
 800c9d2:	464c      	movlt	r4, r9
 800c9d4:	4699      	movlt	r9, r3
 800c9d6:	6927      	ldr	r7, [r4, #16]
 800c9d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	6861      	ldr	r1, [r4, #4]
 800c9e0:	eb07 060a 	add.w	r6, r7, sl
 800c9e4:	42b3      	cmp	r3, r6
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	bfb8      	it	lt
 800c9ea:	3101      	addlt	r1, #1
 800c9ec:	f7ff feda 	bl	800c7a4 <_Balloc>
 800c9f0:	b930      	cbnz	r0, 800ca00 <__multiply+0x44>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	4b44      	ldr	r3, [pc, #272]	; (800cb08 <__multiply+0x14c>)
 800c9f6:	4845      	ldr	r0, [pc, #276]	; (800cb0c <__multiply+0x150>)
 800c9f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c9fc:	f000 fb0a 	bl	800d014 <__assert_func>
 800ca00:	f100 0514 	add.w	r5, r0, #20
 800ca04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca08:	462b      	mov	r3, r5
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	4543      	cmp	r3, r8
 800ca0e:	d321      	bcc.n	800ca54 <__multiply+0x98>
 800ca10:	f104 0314 	add.w	r3, r4, #20
 800ca14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca18:	f109 0314 	add.w	r3, r9, #20
 800ca1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca20:	9202      	str	r2, [sp, #8]
 800ca22:	1b3a      	subs	r2, r7, r4
 800ca24:	3a15      	subs	r2, #21
 800ca26:	f022 0203 	bic.w	r2, r2, #3
 800ca2a:	3204      	adds	r2, #4
 800ca2c:	f104 0115 	add.w	r1, r4, #21
 800ca30:	428f      	cmp	r7, r1
 800ca32:	bf38      	it	cc
 800ca34:	2204      	movcc	r2, #4
 800ca36:	9201      	str	r2, [sp, #4]
 800ca38:	9a02      	ldr	r2, [sp, #8]
 800ca3a:	9303      	str	r3, [sp, #12]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d80c      	bhi.n	800ca5a <__multiply+0x9e>
 800ca40:	2e00      	cmp	r6, #0
 800ca42:	dd03      	ble.n	800ca4c <__multiply+0x90>
 800ca44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d05b      	beq.n	800cb04 <__multiply+0x148>
 800ca4c:	6106      	str	r6, [r0, #16]
 800ca4e:	b005      	add	sp, #20
 800ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca54:	f843 2b04 	str.w	r2, [r3], #4
 800ca58:	e7d8      	b.n	800ca0c <__multiply+0x50>
 800ca5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca5e:	f1ba 0f00 	cmp.w	sl, #0
 800ca62:	d024      	beq.n	800caae <__multiply+0xf2>
 800ca64:	f104 0e14 	add.w	lr, r4, #20
 800ca68:	46a9      	mov	r9, r5
 800ca6a:	f04f 0c00 	mov.w	ip, #0
 800ca6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca72:	f8d9 1000 	ldr.w	r1, [r9]
 800ca76:	fa1f fb82 	uxth.w	fp, r2
 800ca7a:	b289      	uxth	r1, r1
 800ca7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca84:	f8d9 2000 	ldr.w	r2, [r9]
 800ca88:	4461      	add	r1, ip
 800ca8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca96:	b289      	uxth	r1, r1
 800ca98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca9c:	4577      	cmp	r7, lr
 800ca9e:	f849 1b04 	str.w	r1, [r9], #4
 800caa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caa6:	d8e2      	bhi.n	800ca6e <__multiply+0xb2>
 800caa8:	9a01      	ldr	r2, [sp, #4]
 800caaa:	f845 c002 	str.w	ip, [r5, r2]
 800caae:	9a03      	ldr	r2, [sp, #12]
 800cab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cab4:	3304      	adds	r3, #4
 800cab6:	f1b9 0f00 	cmp.w	r9, #0
 800caba:	d021      	beq.n	800cb00 <__multiply+0x144>
 800cabc:	6829      	ldr	r1, [r5, #0]
 800cabe:	f104 0c14 	add.w	ip, r4, #20
 800cac2:	46ae      	mov	lr, r5
 800cac4:	f04f 0a00 	mov.w	sl, #0
 800cac8:	f8bc b000 	ldrh.w	fp, [ip]
 800cacc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cad0:	fb09 220b 	mla	r2, r9, fp, r2
 800cad4:	4452      	add	r2, sl
 800cad6:	b289      	uxth	r1, r1
 800cad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cadc:	f84e 1b04 	str.w	r1, [lr], #4
 800cae0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cae8:	f8be 1000 	ldrh.w	r1, [lr]
 800caec:	fb09 110a 	mla	r1, r9, sl, r1
 800caf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800caf4:	4567      	cmp	r7, ip
 800caf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cafa:	d8e5      	bhi.n	800cac8 <__multiply+0x10c>
 800cafc:	9a01      	ldr	r2, [sp, #4]
 800cafe:	50a9      	str	r1, [r5, r2]
 800cb00:	3504      	adds	r5, #4
 800cb02:	e799      	b.n	800ca38 <__multiply+0x7c>
 800cb04:	3e01      	subs	r6, #1
 800cb06:	e79b      	b.n	800ca40 <__multiply+0x84>
 800cb08:	0800de74 	.word	0x0800de74
 800cb0c:	0800de85 	.word	0x0800de85

0800cb10 <__pow5mult>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	4615      	mov	r5, r2
 800cb16:	f012 0203 	ands.w	r2, r2, #3
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	d007      	beq.n	800cb30 <__pow5mult+0x20>
 800cb20:	4c25      	ldr	r4, [pc, #148]	; (800cbb8 <__pow5mult+0xa8>)
 800cb22:	3a01      	subs	r2, #1
 800cb24:	2300      	movs	r3, #0
 800cb26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb2a:	f7ff fe9d 	bl	800c868 <__multadd>
 800cb2e:	4607      	mov	r7, r0
 800cb30:	10ad      	asrs	r5, r5, #2
 800cb32:	d03d      	beq.n	800cbb0 <__pow5mult+0xa0>
 800cb34:	69f4      	ldr	r4, [r6, #28]
 800cb36:	b97c      	cbnz	r4, 800cb58 <__pow5mult+0x48>
 800cb38:	2010      	movs	r0, #16
 800cb3a:	f7fe f8b3 	bl	800aca4 <malloc>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	61f0      	str	r0, [r6, #28]
 800cb42:	b928      	cbnz	r0, 800cb50 <__pow5mult+0x40>
 800cb44:	4b1d      	ldr	r3, [pc, #116]	; (800cbbc <__pow5mult+0xac>)
 800cb46:	481e      	ldr	r0, [pc, #120]	; (800cbc0 <__pow5mult+0xb0>)
 800cb48:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb4c:	f000 fa62 	bl	800d014 <__assert_func>
 800cb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb54:	6004      	str	r4, [r0, #0]
 800cb56:	60c4      	str	r4, [r0, #12]
 800cb58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb60:	b94c      	cbnz	r4, 800cb76 <__pow5mult+0x66>
 800cb62:	f240 2171 	movw	r1, #625	; 0x271
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7ff ff12 	bl	800c990 <__i2b>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb72:	4604      	mov	r4, r0
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	f04f 0900 	mov.w	r9, #0
 800cb7a:	07eb      	lsls	r3, r5, #31
 800cb7c:	d50a      	bpl.n	800cb94 <__pow5mult+0x84>
 800cb7e:	4639      	mov	r1, r7
 800cb80:	4622      	mov	r2, r4
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ff1a 	bl	800c9bc <__multiply>
 800cb88:	4639      	mov	r1, r7
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff fe49 	bl	800c824 <_Bfree>
 800cb92:	4647      	mov	r7, r8
 800cb94:	106d      	asrs	r5, r5, #1
 800cb96:	d00b      	beq.n	800cbb0 <__pow5mult+0xa0>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	b938      	cbnz	r0, 800cbac <__pow5mult+0x9c>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ff0b 	bl	800c9bc <__multiply>
 800cba6:	6020      	str	r0, [r4, #0]
 800cba8:	f8c0 9000 	str.w	r9, [r0]
 800cbac:	4604      	mov	r4, r0
 800cbae:	e7e4      	b.n	800cb7a <__pow5mult+0x6a>
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0800dfd0 	.word	0x0800dfd0
 800cbbc:	0800de05 	.word	0x0800de05
 800cbc0:	0800de85 	.word	0x0800de85

0800cbc4 <__lshift>:
 800cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc8:	460c      	mov	r4, r1
 800cbca:	6849      	ldr	r1, [r1, #4]
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	4691      	mov	r9, r2
 800cbd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbdc:	f108 0601 	add.w	r6, r8, #1
 800cbe0:	42b3      	cmp	r3, r6
 800cbe2:	db0b      	blt.n	800cbfc <__lshift+0x38>
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7ff fddd 	bl	800c7a4 <_Balloc>
 800cbea:	4605      	mov	r5, r0
 800cbec:	b948      	cbnz	r0, 800cc02 <__lshift+0x3e>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	4b28      	ldr	r3, [pc, #160]	; (800cc94 <__lshift+0xd0>)
 800cbf2:	4829      	ldr	r0, [pc, #164]	; (800cc98 <__lshift+0xd4>)
 800cbf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbf8:	f000 fa0c 	bl	800d014 <__assert_func>
 800cbfc:	3101      	adds	r1, #1
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	e7ee      	b.n	800cbe0 <__lshift+0x1c>
 800cc02:	2300      	movs	r3, #0
 800cc04:	f100 0114 	add.w	r1, r0, #20
 800cc08:	f100 0210 	add.w	r2, r0, #16
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	4553      	cmp	r3, sl
 800cc10:	db33      	blt.n	800cc7a <__lshift+0xb6>
 800cc12:	6920      	ldr	r0, [r4, #16]
 800cc14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc18:	f104 0314 	add.w	r3, r4, #20
 800cc1c:	f019 091f 	ands.w	r9, r9, #31
 800cc20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc28:	d02b      	beq.n	800cc82 <__lshift+0xbe>
 800cc2a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc2e:	468a      	mov	sl, r1
 800cc30:	2200      	movs	r2, #0
 800cc32:	6818      	ldr	r0, [r3, #0]
 800cc34:	fa00 f009 	lsl.w	r0, r0, r9
 800cc38:	4310      	orrs	r0, r2
 800cc3a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc42:	459c      	cmp	ip, r3
 800cc44:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc48:	d8f3      	bhi.n	800cc32 <__lshift+0x6e>
 800cc4a:	ebac 0304 	sub.w	r3, ip, r4
 800cc4e:	3b15      	subs	r3, #21
 800cc50:	f023 0303 	bic.w	r3, r3, #3
 800cc54:	3304      	adds	r3, #4
 800cc56:	f104 0015 	add.w	r0, r4, #21
 800cc5a:	4584      	cmp	ip, r0
 800cc5c:	bf38      	it	cc
 800cc5e:	2304      	movcc	r3, #4
 800cc60:	50ca      	str	r2, [r1, r3]
 800cc62:	b10a      	cbz	r2, 800cc68 <__lshift+0xa4>
 800cc64:	f108 0602 	add.w	r6, r8, #2
 800cc68:	3e01      	subs	r6, #1
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	612e      	str	r6, [r5, #16]
 800cc6e:	4621      	mov	r1, r4
 800cc70:	f7ff fdd8 	bl	800c824 <_Bfree>
 800cc74:	4628      	mov	r0, r5
 800cc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc7e:	3301      	adds	r3, #1
 800cc80:	e7c5      	b.n	800cc0e <__lshift+0x4a>
 800cc82:	3904      	subs	r1, #4
 800cc84:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc88:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc8c:	459c      	cmp	ip, r3
 800cc8e:	d8f9      	bhi.n	800cc84 <__lshift+0xc0>
 800cc90:	e7ea      	b.n	800cc68 <__lshift+0xa4>
 800cc92:	bf00      	nop
 800cc94:	0800de74 	.word	0x0800de74
 800cc98:	0800de85 	.word	0x0800de85

0800cc9c <__mcmp>:
 800cc9c:	b530      	push	{r4, r5, lr}
 800cc9e:	6902      	ldr	r2, [r0, #16]
 800cca0:	690c      	ldr	r4, [r1, #16]
 800cca2:	1b12      	subs	r2, r2, r4
 800cca4:	d10e      	bne.n	800ccc4 <__mcmp+0x28>
 800cca6:	f100 0314 	add.w	r3, r0, #20
 800ccaa:	3114      	adds	r1, #20
 800ccac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ccb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ccb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ccbc:	42a5      	cmp	r5, r4
 800ccbe:	d003      	beq.n	800ccc8 <__mcmp+0x2c>
 800ccc0:	d305      	bcc.n	800ccce <__mcmp+0x32>
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	bd30      	pop	{r4, r5, pc}
 800ccc8:	4283      	cmp	r3, r0
 800ccca:	d3f3      	bcc.n	800ccb4 <__mcmp+0x18>
 800cccc:	e7fa      	b.n	800ccc4 <__mcmp+0x28>
 800ccce:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd2:	e7f7      	b.n	800ccc4 <__mcmp+0x28>

0800ccd4 <__mdiff>:
 800ccd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	460c      	mov	r4, r1
 800ccda:	4606      	mov	r6, r0
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4620      	mov	r0, r4
 800cce0:	4690      	mov	r8, r2
 800cce2:	f7ff ffdb 	bl	800cc9c <__mcmp>
 800cce6:	1e05      	subs	r5, r0, #0
 800cce8:	d110      	bne.n	800cd0c <__mdiff+0x38>
 800ccea:	4629      	mov	r1, r5
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff fd59 	bl	800c7a4 <_Balloc>
 800ccf2:	b930      	cbnz	r0, 800cd02 <__mdiff+0x2e>
 800ccf4:	4b3a      	ldr	r3, [pc, #232]	; (800cde0 <__mdiff+0x10c>)
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	f240 2137 	movw	r1, #567	; 0x237
 800ccfc:	4839      	ldr	r0, [pc, #228]	; (800cde4 <__mdiff+0x110>)
 800ccfe:	f000 f989 	bl	800d014 <__assert_func>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd0c:	bfa4      	itt	ge
 800cd0e:	4643      	movge	r3, r8
 800cd10:	46a0      	movge	r8, r4
 800cd12:	4630      	mov	r0, r6
 800cd14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd18:	bfa6      	itte	ge
 800cd1a:	461c      	movge	r4, r3
 800cd1c:	2500      	movge	r5, #0
 800cd1e:	2501      	movlt	r5, #1
 800cd20:	f7ff fd40 	bl	800c7a4 <_Balloc>
 800cd24:	b920      	cbnz	r0, 800cd30 <__mdiff+0x5c>
 800cd26:	4b2e      	ldr	r3, [pc, #184]	; (800cde0 <__mdiff+0x10c>)
 800cd28:	4602      	mov	r2, r0
 800cd2a:	f240 2145 	movw	r1, #581	; 0x245
 800cd2e:	e7e5      	b.n	800ccfc <__mdiff+0x28>
 800cd30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd34:	6926      	ldr	r6, [r4, #16]
 800cd36:	60c5      	str	r5, [r0, #12]
 800cd38:	f104 0914 	add.w	r9, r4, #20
 800cd3c:	f108 0514 	add.w	r5, r8, #20
 800cd40:	f100 0e14 	add.w	lr, r0, #20
 800cd44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd4c:	f108 0210 	add.w	r2, r8, #16
 800cd50:	46f2      	mov	sl, lr
 800cd52:	2100      	movs	r1, #0
 800cd54:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd5c:	fa11 f88b 	uxtah	r8, r1, fp
 800cd60:	b299      	uxth	r1, r3
 800cd62:	0c1b      	lsrs	r3, r3, #16
 800cd64:	eba8 0801 	sub.w	r8, r8, r1
 800cd68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd70:	fa1f f888 	uxth.w	r8, r8
 800cd74:	1419      	asrs	r1, r3, #16
 800cd76:	454e      	cmp	r6, r9
 800cd78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd7c:	f84a 3b04 	str.w	r3, [sl], #4
 800cd80:	d8e8      	bhi.n	800cd54 <__mdiff+0x80>
 800cd82:	1b33      	subs	r3, r6, r4
 800cd84:	3b15      	subs	r3, #21
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	3415      	adds	r4, #21
 800cd8e:	42a6      	cmp	r6, r4
 800cd90:	bf38      	it	cc
 800cd92:	2304      	movcc	r3, #4
 800cd94:	441d      	add	r5, r3
 800cd96:	4473      	add	r3, lr
 800cd98:	469e      	mov	lr, r3
 800cd9a:	462e      	mov	r6, r5
 800cd9c:	4566      	cmp	r6, ip
 800cd9e:	d30e      	bcc.n	800cdbe <__mdiff+0xea>
 800cda0:	f10c 0203 	add.w	r2, ip, #3
 800cda4:	1b52      	subs	r2, r2, r5
 800cda6:	f022 0203 	bic.w	r2, r2, #3
 800cdaa:	3d03      	subs	r5, #3
 800cdac:	45ac      	cmp	ip, r5
 800cdae:	bf38      	it	cc
 800cdb0:	2200      	movcc	r2, #0
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cdb8:	b17a      	cbz	r2, 800cdda <__mdiff+0x106>
 800cdba:	6107      	str	r7, [r0, #16]
 800cdbc:	e7a4      	b.n	800cd08 <__mdiff+0x34>
 800cdbe:	f856 8b04 	ldr.w	r8, [r6], #4
 800cdc2:	fa11 f288 	uxtah	r2, r1, r8
 800cdc6:	1414      	asrs	r4, r2, #16
 800cdc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cdcc:	b292      	uxth	r2, r2
 800cdce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cdd2:	f84e 2b04 	str.w	r2, [lr], #4
 800cdd6:	1421      	asrs	r1, r4, #16
 800cdd8:	e7e0      	b.n	800cd9c <__mdiff+0xc8>
 800cdda:	3f01      	subs	r7, #1
 800cddc:	e7ea      	b.n	800cdb4 <__mdiff+0xe0>
 800cdde:	bf00      	nop
 800cde0:	0800de74 	.word	0x0800de74
 800cde4:	0800de85 	.word	0x0800de85

0800cde8 <__d2b>:
 800cde8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdec:	460f      	mov	r7, r1
 800cdee:	2101      	movs	r1, #1
 800cdf0:	ec59 8b10 	vmov	r8, r9, d0
 800cdf4:	4616      	mov	r6, r2
 800cdf6:	f7ff fcd5 	bl	800c7a4 <_Balloc>
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	b930      	cbnz	r0, 800ce0c <__d2b+0x24>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <__d2b+0xac>)
 800ce02:	4825      	ldr	r0, [pc, #148]	; (800ce98 <__d2b+0xb0>)
 800ce04:	f240 310f 	movw	r1, #783	; 0x30f
 800ce08:	f000 f904 	bl	800d014 <__assert_func>
 800ce0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce14:	bb2d      	cbnz	r5, 800ce62 <__d2b+0x7a>
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	f1b8 0300 	subs.w	r3, r8, #0
 800ce1c:	d026      	beq.n	800ce6c <__d2b+0x84>
 800ce1e:	4668      	mov	r0, sp
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	f7ff fd87 	bl	800c934 <__lo0bits>
 800ce26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce2a:	b1e8      	cbz	r0, 800ce68 <__d2b+0x80>
 800ce2c:	f1c0 0320 	rsb	r3, r0, #32
 800ce30:	fa02 f303 	lsl.w	r3, r2, r3
 800ce34:	430b      	orrs	r3, r1
 800ce36:	40c2      	lsrs	r2, r0
 800ce38:	6163      	str	r3, [r4, #20]
 800ce3a:	9201      	str	r2, [sp, #4]
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	61a3      	str	r3, [r4, #24]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bf14      	ite	ne
 800ce44:	2202      	movne	r2, #2
 800ce46:	2201      	moveq	r2, #1
 800ce48:	6122      	str	r2, [r4, #16]
 800ce4a:	b1bd      	cbz	r5, 800ce7c <__d2b+0x94>
 800ce4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce50:	4405      	add	r5, r0
 800ce52:	603d      	str	r5, [r7, #0]
 800ce54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce58:	6030      	str	r0, [r6, #0]
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	b003      	add	sp, #12
 800ce5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce66:	e7d6      	b.n	800ce16 <__d2b+0x2e>
 800ce68:	6161      	str	r1, [r4, #20]
 800ce6a:	e7e7      	b.n	800ce3c <__d2b+0x54>
 800ce6c:	a801      	add	r0, sp, #4
 800ce6e:	f7ff fd61 	bl	800c934 <__lo0bits>
 800ce72:	9b01      	ldr	r3, [sp, #4]
 800ce74:	6163      	str	r3, [r4, #20]
 800ce76:	3020      	adds	r0, #32
 800ce78:	2201      	movs	r2, #1
 800ce7a:	e7e5      	b.n	800ce48 <__d2b+0x60>
 800ce7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce84:	6038      	str	r0, [r7, #0]
 800ce86:	6918      	ldr	r0, [r3, #16]
 800ce88:	f7ff fd34 	bl	800c8f4 <__hi0bits>
 800ce8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce90:	e7e2      	b.n	800ce58 <__d2b+0x70>
 800ce92:	bf00      	nop
 800ce94:	0800de74 	.word	0x0800de74
 800ce98:	0800de85 	.word	0x0800de85

0800ce9c <__sflush_r>:
 800ce9c:	898a      	ldrh	r2, [r1, #12]
 800ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	4605      	mov	r5, r0
 800cea4:	0710      	lsls	r0, r2, #28
 800cea6:	460c      	mov	r4, r1
 800cea8:	d458      	bmi.n	800cf5c <__sflush_r+0xc0>
 800ceaa:	684b      	ldr	r3, [r1, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dc05      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc02      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cebe:	2e00      	cmp	r6, #0
 800cec0:	d0f9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cec8:	682f      	ldr	r7, [r5, #0]
 800ceca:	6a21      	ldr	r1, [r4, #32]
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	d032      	beq.n	800cf36 <__sflush_r+0x9a>
 800ced0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	075a      	lsls	r2, r3, #29
 800ced6:	d505      	bpl.n	800cee4 <__sflush_r+0x48>
 800ced8:	6863      	ldr	r3, [r4, #4]
 800ceda:	1ac0      	subs	r0, r0, r3
 800cedc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cede:	b10b      	cbz	r3, 800cee4 <__sflush_r+0x48>
 800cee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cee2:	1ac0      	subs	r0, r0, r3
 800cee4:	2300      	movs	r3, #0
 800cee6:	4602      	mov	r2, r0
 800cee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceea:	6a21      	ldr	r1, [r4, #32]
 800ceec:	4628      	mov	r0, r5
 800ceee:	47b0      	blx	r6
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	d106      	bne.n	800cf04 <__sflush_r+0x68>
 800cef6:	6829      	ldr	r1, [r5, #0]
 800cef8:	291d      	cmp	r1, #29
 800cefa:	d82b      	bhi.n	800cf54 <__sflush_r+0xb8>
 800cefc:	4a29      	ldr	r2, [pc, #164]	; (800cfa4 <__sflush_r+0x108>)
 800cefe:	410a      	asrs	r2, r1
 800cf00:	07d6      	lsls	r6, r2, #31
 800cf02:	d427      	bmi.n	800cf54 <__sflush_r+0xb8>
 800cf04:	2200      	movs	r2, #0
 800cf06:	6062      	str	r2, [r4, #4]
 800cf08:	04d9      	lsls	r1, r3, #19
 800cf0a:	6922      	ldr	r2, [r4, #16]
 800cf0c:	6022      	str	r2, [r4, #0]
 800cf0e:	d504      	bpl.n	800cf1a <__sflush_r+0x7e>
 800cf10:	1c42      	adds	r2, r0, #1
 800cf12:	d101      	bne.n	800cf18 <__sflush_r+0x7c>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b903      	cbnz	r3, 800cf1a <__sflush_r+0x7e>
 800cf18:	6560      	str	r0, [r4, #84]	; 0x54
 800cf1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1c:	602f      	str	r7, [r5, #0]
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	d0c9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf26:	4299      	cmp	r1, r3
 800cf28:	d002      	beq.n	800cf30 <__sflush_r+0x94>
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f7ff fbee 	bl	800c70c <_free_r>
 800cf30:	2000      	movs	r0, #0
 800cf32:	6360      	str	r0, [r4, #52]	; 0x34
 800cf34:	e7c0      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf36:	2301      	movs	r3, #1
 800cf38:	4628      	mov	r0, r5
 800cf3a:	47b0      	blx	r6
 800cf3c:	1c41      	adds	r1, r0, #1
 800cf3e:	d1c8      	bne.n	800ced2 <__sflush_r+0x36>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0c5      	beq.n	800ced2 <__sflush_r+0x36>
 800cf46:	2b1d      	cmp	r3, #29
 800cf48:	d001      	beq.n	800cf4e <__sflush_r+0xb2>
 800cf4a:	2b16      	cmp	r3, #22
 800cf4c:	d101      	bne.n	800cf52 <__sflush_r+0xb6>
 800cf4e:	602f      	str	r7, [r5, #0]
 800cf50:	e7b1      	b.n	800ceb6 <__sflush_r+0x1a>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	e7ad      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf5c:	690f      	ldr	r7, [r1, #16]
 800cf5e:	2f00      	cmp	r7, #0
 800cf60:	d0a9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf62:	0793      	lsls	r3, r2, #30
 800cf64:	680e      	ldr	r6, [r1, #0]
 800cf66:	bf08      	it	eq
 800cf68:	694b      	ldreq	r3, [r1, #20]
 800cf6a:	600f      	str	r7, [r1, #0]
 800cf6c:	bf18      	it	ne
 800cf6e:	2300      	movne	r3, #0
 800cf70:	eba6 0807 	sub.w	r8, r6, r7
 800cf74:	608b      	str	r3, [r1, #8]
 800cf76:	f1b8 0f00 	cmp.w	r8, #0
 800cf7a:	dd9c      	ble.n	800ceb6 <__sflush_r+0x1a>
 800cf7c:	6a21      	ldr	r1, [r4, #32]
 800cf7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf80:	4643      	mov	r3, r8
 800cf82:	463a      	mov	r2, r7
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b0      	blx	r6
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	dc06      	bgt.n	800cf9a <__sflush_r+0xfe>
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	e78e      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf9a:	4407      	add	r7, r0
 800cf9c:	eba8 0800 	sub.w	r8, r8, r0
 800cfa0:	e7e9      	b.n	800cf76 <__sflush_r+0xda>
 800cfa2:	bf00      	nop
 800cfa4:	dfbffffe 	.word	0xdfbffffe

0800cfa8 <_fflush_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	690b      	ldr	r3, [r1, #16]
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	b913      	cbnz	r3, 800cfb8 <_fflush_r+0x10>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	b118      	cbz	r0, 800cfc2 <_fflush_r+0x1a>
 800cfba:	6a03      	ldr	r3, [r0, #32]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <_fflush_r+0x1a>
 800cfbe:	f7fe fc1f 	bl	800b800 <__sinit>
 800cfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0f3      	beq.n	800cfb2 <_fflush_r+0xa>
 800cfca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfcc:	07d0      	lsls	r0, r2, #31
 800cfce:	d404      	bmi.n	800cfda <_fflush_r+0x32>
 800cfd0:	0599      	lsls	r1, r3, #22
 800cfd2:	d402      	bmi.n	800cfda <_fflush_r+0x32>
 800cfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfd6:	f7fe fd1a 	bl	800ba0e <__retarget_lock_acquire_recursive>
 800cfda:	4628      	mov	r0, r5
 800cfdc:	4621      	mov	r1, r4
 800cfde:	f7ff ff5d 	bl	800ce9c <__sflush_r>
 800cfe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfe4:	07da      	lsls	r2, r3, #31
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	d4e4      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	059b      	lsls	r3, r3, #22
 800cfee:	d4e1      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cff2:	f7fe fd0d 	bl	800ba10 <__retarget_lock_release_recursive>
 800cff6:	e7dd      	b.n	800cfb4 <_fflush_r+0xc>

0800cff8 <memcpy>:
 800cff8:	440a      	add	r2, r1
 800cffa:	4291      	cmp	r1, r2
 800cffc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d000:	d100      	bne.n	800d004 <memcpy+0xc>
 800d002:	4770      	bx	lr
 800d004:	b510      	push	{r4, lr}
 800d006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d00e:	4291      	cmp	r1, r2
 800d010:	d1f9      	bne.n	800d006 <memcpy+0xe>
 800d012:	bd10      	pop	{r4, pc}

0800d014 <__assert_func>:
 800d014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d016:	4614      	mov	r4, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	4b09      	ldr	r3, [pc, #36]	; (800d040 <__assert_func+0x2c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4605      	mov	r5, r0
 800d020:	68d8      	ldr	r0, [r3, #12]
 800d022:	b14c      	cbz	r4, 800d038 <__assert_func+0x24>
 800d024:	4b07      	ldr	r3, [pc, #28]	; (800d044 <__assert_func+0x30>)
 800d026:	9100      	str	r1, [sp, #0]
 800d028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d02c:	4906      	ldr	r1, [pc, #24]	; (800d048 <__assert_func+0x34>)
 800d02e:	462b      	mov	r3, r5
 800d030:	f000 f844 	bl	800d0bc <fiprintf>
 800d034:	f000 f854 	bl	800d0e0 <abort>
 800d038:	4b04      	ldr	r3, [pc, #16]	; (800d04c <__assert_func+0x38>)
 800d03a:	461c      	mov	r4, r3
 800d03c:	e7f3      	b.n	800d026 <__assert_func+0x12>
 800d03e:	bf00      	nop
 800d040:	200000e0 	.word	0x200000e0
 800d044:	0800dfe6 	.word	0x0800dfe6
 800d048:	0800dff3 	.word	0x0800dff3
 800d04c:	0800e021 	.word	0x0800e021

0800d050 <_calloc_r>:
 800d050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d052:	fba1 2402 	umull	r2, r4, r1, r2
 800d056:	b94c      	cbnz	r4, 800d06c <_calloc_r+0x1c>
 800d058:	4611      	mov	r1, r2
 800d05a:	9201      	str	r2, [sp, #4]
 800d05c:	f7fd fe52 	bl	800ad04 <_malloc_r>
 800d060:	9a01      	ldr	r2, [sp, #4]
 800d062:	4605      	mov	r5, r0
 800d064:	b930      	cbnz	r0, 800d074 <_calloc_r+0x24>
 800d066:	4628      	mov	r0, r5
 800d068:	b003      	add	sp, #12
 800d06a:	bd30      	pop	{r4, r5, pc}
 800d06c:	220c      	movs	r2, #12
 800d06e:	6002      	str	r2, [r0, #0]
 800d070:	2500      	movs	r5, #0
 800d072:	e7f8      	b.n	800d066 <_calloc_r+0x16>
 800d074:	4621      	mov	r1, r4
 800d076:	f7fe fc3c 	bl	800b8f2 <memset>
 800d07a:	e7f4      	b.n	800d066 <_calloc_r+0x16>

0800d07c <__ascii_mbtowc>:
 800d07c:	b082      	sub	sp, #8
 800d07e:	b901      	cbnz	r1, 800d082 <__ascii_mbtowc+0x6>
 800d080:	a901      	add	r1, sp, #4
 800d082:	b142      	cbz	r2, 800d096 <__ascii_mbtowc+0x1a>
 800d084:	b14b      	cbz	r3, 800d09a <__ascii_mbtowc+0x1e>
 800d086:	7813      	ldrb	r3, [r2, #0]
 800d088:	600b      	str	r3, [r1, #0]
 800d08a:	7812      	ldrb	r2, [r2, #0]
 800d08c:	1e10      	subs	r0, r2, #0
 800d08e:	bf18      	it	ne
 800d090:	2001      	movne	r0, #1
 800d092:	b002      	add	sp, #8
 800d094:	4770      	bx	lr
 800d096:	4610      	mov	r0, r2
 800d098:	e7fb      	b.n	800d092 <__ascii_mbtowc+0x16>
 800d09a:	f06f 0001 	mvn.w	r0, #1
 800d09e:	e7f8      	b.n	800d092 <__ascii_mbtowc+0x16>

0800d0a0 <__ascii_wctomb>:
 800d0a0:	b149      	cbz	r1, 800d0b6 <__ascii_wctomb+0x16>
 800d0a2:	2aff      	cmp	r2, #255	; 0xff
 800d0a4:	bf85      	ittet	hi
 800d0a6:	238a      	movhi	r3, #138	; 0x8a
 800d0a8:	6003      	strhi	r3, [r0, #0]
 800d0aa:	700a      	strbls	r2, [r1, #0]
 800d0ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0b0:	bf98      	it	ls
 800d0b2:	2001      	movls	r0, #1
 800d0b4:	4770      	bx	lr
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4770      	bx	lr
	...

0800d0bc <fiprintf>:
 800d0bc:	b40e      	push	{r1, r2, r3}
 800d0be:	b503      	push	{r0, r1, lr}
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	ab03      	add	r3, sp, #12
 800d0c4:	4805      	ldr	r0, [pc, #20]	; (800d0dc <fiprintf+0x20>)
 800d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	f000 f837 	bl	800d140 <_vfiprintf_r>
 800d0d2:	b002      	add	sp, #8
 800d0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0d8:	b003      	add	sp, #12
 800d0da:	4770      	bx	lr
 800d0dc:	200000e0 	.word	0x200000e0

0800d0e0 <abort>:
 800d0e0:	b508      	push	{r3, lr}
 800d0e2:	2006      	movs	r0, #6
 800d0e4:	f000 fa04 	bl	800d4f0 <raise>
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	f7f5 fd1d 	bl	8002b28 <_exit>

0800d0ee <__sfputc_r>:
 800d0ee:	6893      	ldr	r3, [r2, #8]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	b410      	push	{r4}
 800d0f6:	6093      	str	r3, [r2, #8]
 800d0f8:	da08      	bge.n	800d10c <__sfputc_r+0x1e>
 800d0fa:	6994      	ldr	r4, [r2, #24]
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	db01      	blt.n	800d104 <__sfputc_r+0x16>
 800d100:	290a      	cmp	r1, #10
 800d102:	d103      	bne.n	800d10c <__sfputc_r+0x1e>
 800d104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d108:	f000 b934 	b.w	800d374 <__swbuf_r>
 800d10c:	6813      	ldr	r3, [r2, #0]
 800d10e:	1c58      	adds	r0, r3, #1
 800d110:	6010      	str	r0, [r2, #0]
 800d112:	7019      	strb	r1, [r3, #0]
 800d114:	4608      	mov	r0, r1
 800d116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <__sfputs_r>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	4606      	mov	r6, r0
 800d120:	460f      	mov	r7, r1
 800d122:	4614      	mov	r4, r2
 800d124:	18d5      	adds	r5, r2, r3
 800d126:	42ac      	cmp	r4, r5
 800d128:	d101      	bne.n	800d12e <__sfputs_r+0x12>
 800d12a:	2000      	movs	r0, #0
 800d12c:	e007      	b.n	800d13e <__sfputs_r+0x22>
 800d12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d132:	463a      	mov	r2, r7
 800d134:	4630      	mov	r0, r6
 800d136:	f7ff ffda 	bl	800d0ee <__sfputc_r>
 800d13a:	1c43      	adds	r3, r0, #1
 800d13c:	d1f3      	bne.n	800d126 <__sfputs_r+0xa>
 800d13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d140 <_vfiprintf_r>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	460d      	mov	r5, r1
 800d146:	b09d      	sub	sp, #116	; 0x74
 800d148:	4614      	mov	r4, r2
 800d14a:	4698      	mov	r8, r3
 800d14c:	4606      	mov	r6, r0
 800d14e:	b118      	cbz	r0, 800d158 <_vfiprintf_r+0x18>
 800d150:	6a03      	ldr	r3, [r0, #32]
 800d152:	b90b      	cbnz	r3, 800d158 <_vfiprintf_r+0x18>
 800d154:	f7fe fb54 	bl	800b800 <__sinit>
 800d158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15a:	07d9      	lsls	r1, r3, #31
 800d15c:	d405      	bmi.n	800d16a <_vfiprintf_r+0x2a>
 800d15e:	89ab      	ldrh	r3, [r5, #12]
 800d160:	059a      	lsls	r2, r3, #22
 800d162:	d402      	bmi.n	800d16a <_vfiprintf_r+0x2a>
 800d164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d166:	f7fe fc52 	bl	800ba0e <__retarget_lock_acquire_recursive>
 800d16a:	89ab      	ldrh	r3, [r5, #12]
 800d16c:	071b      	lsls	r3, r3, #28
 800d16e:	d501      	bpl.n	800d174 <_vfiprintf_r+0x34>
 800d170:	692b      	ldr	r3, [r5, #16]
 800d172:	b99b      	cbnz	r3, 800d19c <_vfiprintf_r+0x5c>
 800d174:	4629      	mov	r1, r5
 800d176:	4630      	mov	r0, r6
 800d178:	f000 f93a 	bl	800d3f0 <__swsetup_r>
 800d17c:	b170      	cbz	r0, 800d19c <_vfiprintf_r+0x5c>
 800d17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d180:	07dc      	lsls	r4, r3, #31
 800d182:	d504      	bpl.n	800d18e <_vfiprintf_r+0x4e>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	b01d      	add	sp, #116	; 0x74
 800d18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	0598      	lsls	r0, r3, #22
 800d192:	d4f7      	bmi.n	800d184 <_vfiprintf_r+0x44>
 800d194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d196:	f7fe fc3b 	bl	800ba10 <__retarget_lock_release_recursive>
 800d19a:	e7f3      	b.n	800d184 <_vfiprintf_r+0x44>
 800d19c:	2300      	movs	r3, #0
 800d19e:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a0:	2320      	movs	r3, #32
 800d1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1aa:	2330      	movs	r3, #48	; 0x30
 800d1ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d360 <_vfiprintf_r+0x220>
 800d1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b4:	f04f 0901 	mov.w	r9, #1
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	469a      	mov	sl, r3
 800d1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_vfiprintf_r+0x86>
 800d1c2:	2a25      	cmp	r2, #37	; 0x25
 800d1c4:	d1f9      	bne.n	800d1ba <_vfiprintf_r+0x7a>
 800d1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ca:	d00b      	beq.n	800d1e4 <_vfiprintf_r+0xa4>
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7ff ffa2 	bl	800d11c <__sfputs_r>
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f000 80a9 	beq.w	800d330 <_vfiprintf_r+0x1f0>
 800d1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e0:	445a      	add	r2, fp
 800d1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 80a1 	beq.w	800d330 <_vfiprintf_r+0x1f0>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1f8:	f10a 0a01 	add.w	sl, sl, #1
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d204:	931a      	str	r3, [sp, #104]	; 0x68
 800d206:	4654      	mov	r4, sl
 800d208:	2205      	movs	r2, #5
 800d20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20e:	4854      	ldr	r0, [pc, #336]	; (800d360 <_vfiprintf_r+0x220>)
 800d210:	f7f2 ffde 	bl	80001d0 <memchr>
 800d214:	9a04      	ldr	r2, [sp, #16]
 800d216:	b9d8      	cbnz	r0, 800d250 <_vfiprintf_r+0x110>
 800d218:	06d1      	lsls	r1, r2, #27
 800d21a:	bf44      	itt	mi
 800d21c:	2320      	movmi	r3, #32
 800d21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d222:	0713      	lsls	r3, r2, #28
 800d224:	bf44      	itt	mi
 800d226:	232b      	movmi	r3, #43	; 0x2b
 800d228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d22c:	f89a 3000 	ldrb.w	r3, [sl]
 800d230:	2b2a      	cmp	r3, #42	; 0x2a
 800d232:	d015      	beq.n	800d260 <_vfiprintf_r+0x120>
 800d234:	9a07      	ldr	r2, [sp, #28]
 800d236:	4654      	mov	r4, sl
 800d238:	2000      	movs	r0, #0
 800d23a:	f04f 0c0a 	mov.w	ip, #10
 800d23e:	4621      	mov	r1, r4
 800d240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d244:	3b30      	subs	r3, #48	; 0x30
 800d246:	2b09      	cmp	r3, #9
 800d248:	d94d      	bls.n	800d2e6 <_vfiprintf_r+0x1a6>
 800d24a:	b1b0      	cbz	r0, 800d27a <_vfiprintf_r+0x13a>
 800d24c:	9207      	str	r2, [sp, #28]
 800d24e:	e014      	b.n	800d27a <_vfiprintf_r+0x13a>
 800d250:	eba0 0308 	sub.w	r3, r0, r8
 800d254:	fa09 f303 	lsl.w	r3, r9, r3
 800d258:	4313      	orrs	r3, r2
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	46a2      	mov	sl, r4
 800d25e:	e7d2      	b.n	800d206 <_vfiprintf_r+0xc6>
 800d260:	9b03      	ldr	r3, [sp, #12]
 800d262:	1d19      	adds	r1, r3, #4
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	9103      	str	r1, [sp, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bfbb      	ittet	lt
 800d26c:	425b      	neglt	r3, r3
 800d26e:	f042 0202 	orrlt.w	r2, r2, #2
 800d272:	9307      	strge	r3, [sp, #28]
 800d274:	9307      	strlt	r3, [sp, #28]
 800d276:	bfb8      	it	lt
 800d278:	9204      	strlt	r2, [sp, #16]
 800d27a:	7823      	ldrb	r3, [r4, #0]
 800d27c:	2b2e      	cmp	r3, #46	; 0x2e
 800d27e:	d10c      	bne.n	800d29a <_vfiprintf_r+0x15a>
 800d280:	7863      	ldrb	r3, [r4, #1]
 800d282:	2b2a      	cmp	r3, #42	; 0x2a
 800d284:	d134      	bne.n	800d2f0 <_vfiprintf_r+0x1b0>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	1d1a      	adds	r2, r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9203      	str	r2, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfb8      	it	lt
 800d292:	f04f 33ff 	movlt.w	r3, #4294967295
 800d296:	3402      	adds	r4, #2
 800d298:	9305      	str	r3, [sp, #20]
 800d29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d370 <_vfiprintf_r+0x230>
 800d29e:	7821      	ldrb	r1, [r4, #0]
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	4650      	mov	r0, sl
 800d2a4:	f7f2 ff94 	bl	80001d0 <memchr>
 800d2a8:	b138      	cbz	r0, 800d2ba <_vfiprintf_r+0x17a>
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	eba0 000a 	sub.w	r0, r0, sl
 800d2b0:	2240      	movs	r2, #64	; 0x40
 800d2b2:	4082      	lsls	r2, r0
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	3401      	adds	r4, #1
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2be:	4829      	ldr	r0, [pc, #164]	; (800d364 <_vfiprintf_r+0x224>)
 800d2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2c4:	2206      	movs	r2, #6
 800d2c6:	f7f2 ff83 	bl	80001d0 <memchr>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d03f      	beq.n	800d34e <_vfiprintf_r+0x20e>
 800d2ce:	4b26      	ldr	r3, [pc, #152]	; (800d368 <_vfiprintf_r+0x228>)
 800d2d0:	bb1b      	cbnz	r3, 800d31a <_vfiprintf_r+0x1da>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	3307      	adds	r3, #7
 800d2d6:	f023 0307 	bic.w	r3, r3, #7
 800d2da:	3308      	adds	r3, #8
 800d2dc:	9303      	str	r3, [sp, #12]
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	443b      	add	r3, r7
 800d2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e4:	e768      	b.n	800d1b8 <_vfiprintf_r+0x78>
 800d2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	2001      	movs	r0, #1
 800d2ee:	e7a6      	b.n	800d23e <_vfiprintf_r+0xfe>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	3401      	adds	r4, #1
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f04f 0c0a 	mov.w	ip, #10
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d302:	3a30      	subs	r2, #48	; 0x30
 800d304:	2a09      	cmp	r2, #9
 800d306:	d903      	bls.n	800d310 <_vfiprintf_r+0x1d0>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d0c6      	beq.n	800d29a <_vfiprintf_r+0x15a>
 800d30c:	9105      	str	r1, [sp, #20]
 800d30e:	e7c4      	b.n	800d29a <_vfiprintf_r+0x15a>
 800d310:	fb0c 2101 	mla	r1, ip, r1, r2
 800d314:	4604      	mov	r4, r0
 800d316:	2301      	movs	r3, #1
 800d318:	e7f0      	b.n	800d2fc <_vfiprintf_r+0x1bc>
 800d31a:	ab03      	add	r3, sp, #12
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	462a      	mov	r2, r5
 800d320:	4b12      	ldr	r3, [pc, #72]	; (800d36c <_vfiprintf_r+0x22c>)
 800d322:	a904      	add	r1, sp, #16
 800d324:	4630      	mov	r0, r6
 800d326:	f7fd fe19 	bl	800af5c <_printf_float>
 800d32a:	4607      	mov	r7, r0
 800d32c:	1c78      	adds	r0, r7, #1
 800d32e:	d1d6      	bne.n	800d2de <_vfiprintf_r+0x19e>
 800d330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d332:	07d9      	lsls	r1, r3, #31
 800d334:	d405      	bmi.n	800d342 <_vfiprintf_r+0x202>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	059a      	lsls	r2, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_vfiprintf_r+0x202>
 800d33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d33e:	f7fe fb67 	bl	800ba10 <__retarget_lock_release_recursive>
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	065b      	lsls	r3, r3, #25
 800d346:	f53f af1d 	bmi.w	800d184 <_vfiprintf_r+0x44>
 800d34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d34c:	e71c      	b.n	800d188 <_vfiprintf_r+0x48>
 800d34e:	ab03      	add	r3, sp, #12
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	462a      	mov	r2, r5
 800d354:	4b05      	ldr	r3, [pc, #20]	; (800d36c <_vfiprintf_r+0x22c>)
 800d356:	a904      	add	r1, sp, #16
 800d358:	4630      	mov	r0, r6
 800d35a:	f7fe f8a3 	bl	800b4a4 <_printf_i>
 800d35e:	e7e4      	b.n	800d32a <_vfiprintf_r+0x1ea>
 800d360:	0800e123 	.word	0x0800e123
 800d364:	0800e12d 	.word	0x0800e12d
 800d368:	0800af5d 	.word	0x0800af5d
 800d36c:	0800d11d 	.word	0x0800d11d
 800d370:	0800e129 	.word	0x0800e129

0800d374 <__swbuf_r>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	460e      	mov	r6, r1
 800d378:	4614      	mov	r4, r2
 800d37a:	4605      	mov	r5, r0
 800d37c:	b118      	cbz	r0, 800d386 <__swbuf_r+0x12>
 800d37e:	6a03      	ldr	r3, [r0, #32]
 800d380:	b90b      	cbnz	r3, 800d386 <__swbuf_r+0x12>
 800d382:	f7fe fa3d 	bl	800b800 <__sinit>
 800d386:	69a3      	ldr	r3, [r4, #24]
 800d388:	60a3      	str	r3, [r4, #8]
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	071a      	lsls	r2, r3, #28
 800d38e:	d525      	bpl.n	800d3dc <__swbuf_r+0x68>
 800d390:	6923      	ldr	r3, [r4, #16]
 800d392:	b31b      	cbz	r3, 800d3dc <__swbuf_r+0x68>
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	6922      	ldr	r2, [r4, #16]
 800d398:	1a98      	subs	r0, r3, r2
 800d39a:	6963      	ldr	r3, [r4, #20]
 800d39c:	b2f6      	uxtb	r6, r6
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	4637      	mov	r7, r6
 800d3a2:	dc04      	bgt.n	800d3ae <__swbuf_r+0x3a>
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f7ff fdfe 	bl	800cfa8 <_fflush_r>
 800d3ac:	b9e0      	cbnz	r0, 800d3e8 <__swbuf_r+0x74>
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	60a3      	str	r3, [r4, #8]
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	6022      	str	r2, [r4, #0]
 800d3ba:	701e      	strb	r6, [r3, #0]
 800d3bc:	6962      	ldr	r2, [r4, #20]
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d004      	beq.n	800d3ce <__swbuf_r+0x5a>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	07db      	lsls	r3, r3, #31
 800d3c8:	d506      	bpl.n	800d3d8 <__swbuf_r+0x64>
 800d3ca:	2e0a      	cmp	r6, #10
 800d3cc:	d104      	bne.n	800d3d8 <__swbuf_r+0x64>
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7ff fde9 	bl	800cfa8 <_fflush_r>
 800d3d6:	b938      	cbnz	r0, 800d3e8 <__swbuf_r+0x74>
 800d3d8:	4638      	mov	r0, r7
 800d3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3dc:	4621      	mov	r1, r4
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f000 f806 	bl	800d3f0 <__swsetup_r>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d0d5      	beq.n	800d394 <__swbuf_r+0x20>
 800d3e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d3ec:	e7f4      	b.n	800d3d8 <__swbuf_r+0x64>
	...

0800d3f0 <__swsetup_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4b2a      	ldr	r3, [pc, #168]	; (800d49c <__swsetup_r+0xac>)
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	b118      	cbz	r0, 800d404 <__swsetup_r+0x14>
 800d3fc:	6a03      	ldr	r3, [r0, #32]
 800d3fe:	b90b      	cbnz	r3, 800d404 <__swsetup_r+0x14>
 800d400:	f7fe f9fe 	bl	800b800 <__sinit>
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d40a:	0718      	lsls	r0, r3, #28
 800d40c:	d422      	bmi.n	800d454 <__swsetup_r+0x64>
 800d40e:	06d9      	lsls	r1, r3, #27
 800d410:	d407      	bmi.n	800d422 <__swsetup_r+0x32>
 800d412:	2309      	movs	r3, #9
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	e034      	b.n	800d48c <__swsetup_r+0x9c>
 800d422:	0758      	lsls	r0, r3, #29
 800d424:	d512      	bpl.n	800d44c <__swsetup_r+0x5c>
 800d426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d428:	b141      	cbz	r1, 800d43c <__swsetup_r+0x4c>
 800d42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d42e:	4299      	cmp	r1, r3
 800d430:	d002      	beq.n	800d438 <__swsetup_r+0x48>
 800d432:	4628      	mov	r0, r5
 800d434:	f7ff f96a 	bl	800c70c <_free_r>
 800d438:	2300      	movs	r3, #0
 800d43a:	6363      	str	r3, [r4, #52]	; 0x34
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d442:	81a3      	strh	r3, [r4, #12]
 800d444:	2300      	movs	r3, #0
 800d446:	6063      	str	r3, [r4, #4]
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f043 0308 	orr.w	r3, r3, #8
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	b94b      	cbnz	r3, 800d46c <__swsetup_r+0x7c>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d462:	d003      	beq.n	800d46c <__swsetup_r+0x7c>
 800d464:	4621      	mov	r1, r4
 800d466:	4628      	mov	r0, r5
 800d468:	f000 f884 	bl	800d574 <__smakebuf_r>
 800d46c:	89a0      	ldrh	r0, [r4, #12]
 800d46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d472:	f010 0301 	ands.w	r3, r0, #1
 800d476:	d00a      	beq.n	800d48e <__swsetup_r+0x9e>
 800d478:	2300      	movs	r3, #0
 800d47a:	60a3      	str	r3, [r4, #8]
 800d47c:	6963      	ldr	r3, [r4, #20]
 800d47e:	425b      	negs	r3, r3
 800d480:	61a3      	str	r3, [r4, #24]
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	b943      	cbnz	r3, 800d498 <__swsetup_r+0xa8>
 800d486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d48a:	d1c4      	bne.n	800d416 <__swsetup_r+0x26>
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	0781      	lsls	r1, r0, #30
 800d490:	bf58      	it	pl
 800d492:	6963      	ldrpl	r3, [r4, #20]
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	e7f4      	b.n	800d482 <__swsetup_r+0x92>
 800d498:	2000      	movs	r0, #0
 800d49a:	e7f7      	b.n	800d48c <__swsetup_r+0x9c>
 800d49c:	200000e0 	.word	0x200000e0

0800d4a0 <_raise_r>:
 800d4a0:	291f      	cmp	r1, #31
 800d4a2:	b538      	push	{r3, r4, r5, lr}
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	d904      	bls.n	800d4b4 <_raise_r+0x14>
 800d4aa:	2316      	movs	r3, #22
 800d4ac:	6003      	str	r3, [r0, #0]
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b2:	bd38      	pop	{r3, r4, r5, pc}
 800d4b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4b6:	b112      	cbz	r2, 800d4be <_raise_r+0x1e>
 800d4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4bc:	b94b      	cbnz	r3, 800d4d2 <_raise_r+0x32>
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 f830 	bl	800d524 <_getpid_r>
 800d4c4:	462a      	mov	r2, r5
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ce:	f000 b817 	b.w	800d500 <_kill_r>
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d00a      	beq.n	800d4ec <_raise_r+0x4c>
 800d4d6:	1c59      	adds	r1, r3, #1
 800d4d8:	d103      	bne.n	800d4e2 <_raise_r+0x42>
 800d4da:	2316      	movs	r3, #22
 800d4dc:	6003      	str	r3, [r0, #0]
 800d4de:	2001      	movs	r0, #1
 800d4e0:	e7e7      	b.n	800d4b2 <_raise_r+0x12>
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	4798      	blx	r3
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e7e0      	b.n	800d4b2 <_raise_r+0x12>

0800d4f0 <raise>:
 800d4f0:	4b02      	ldr	r3, [pc, #8]	; (800d4fc <raise+0xc>)
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f7ff bfd3 	b.w	800d4a0 <_raise_r>
 800d4fa:	bf00      	nop
 800d4fc:	200000e0 	.word	0x200000e0

0800d500 <_kill_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4d07      	ldr	r5, [pc, #28]	; (800d520 <_kill_r+0x20>)
 800d504:	2300      	movs	r3, #0
 800d506:	4604      	mov	r4, r0
 800d508:	4608      	mov	r0, r1
 800d50a:	4611      	mov	r1, r2
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	f7f5 fafb 	bl	8002b08 <_kill>
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	d102      	bne.n	800d51c <_kill_r+0x1c>
 800d516:	682b      	ldr	r3, [r5, #0]
 800d518:	b103      	cbz	r3, 800d51c <_kill_r+0x1c>
 800d51a:	6023      	str	r3, [r4, #0]
 800d51c:	bd38      	pop	{r3, r4, r5, pc}
 800d51e:	bf00      	nop
 800d520:	20000dcc 	.word	0x20000dcc

0800d524 <_getpid_r>:
 800d524:	f7f5 bae8 	b.w	8002af8 <_getpid>

0800d528 <__swhatbuf_r>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	460c      	mov	r4, r1
 800d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d530:	2900      	cmp	r1, #0
 800d532:	b096      	sub	sp, #88	; 0x58
 800d534:	4615      	mov	r5, r2
 800d536:	461e      	mov	r6, r3
 800d538:	da0d      	bge.n	800d556 <__swhatbuf_r+0x2e>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d540:	f04f 0100 	mov.w	r1, #0
 800d544:	bf0c      	ite	eq
 800d546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d54a:	2340      	movne	r3, #64	; 0x40
 800d54c:	2000      	movs	r0, #0
 800d54e:	6031      	str	r1, [r6, #0]
 800d550:	602b      	str	r3, [r5, #0]
 800d552:	b016      	add	sp, #88	; 0x58
 800d554:	bd70      	pop	{r4, r5, r6, pc}
 800d556:	466a      	mov	r2, sp
 800d558:	f000 f848 	bl	800d5ec <_fstat_r>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	dbec      	blt.n	800d53a <__swhatbuf_r+0x12>
 800d560:	9901      	ldr	r1, [sp, #4]
 800d562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d56a:	4259      	negs	r1, r3
 800d56c:	4159      	adcs	r1, r3
 800d56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d572:	e7eb      	b.n	800d54c <__swhatbuf_r+0x24>

0800d574 <__smakebuf_r>:
 800d574:	898b      	ldrh	r3, [r1, #12]
 800d576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d578:	079d      	lsls	r5, r3, #30
 800d57a:	4606      	mov	r6, r0
 800d57c:	460c      	mov	r4, r1
 800d57e:	d507      	bpl.n	800d590 <__smakebuf_r+0x1c>
 800d580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	6123      	str	r3, [r4, #16]
 800d588:	2301      	movs	r3, #1
 800d58a:	6163      	str	r3, [r4, #20]
 800d58c:	b002      	add	sp, #8
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	ab01      	add	r3, sp, #4
 800d592:	466a      	mov	r2, sp
 800d594:	f7ff ffc8 	bl	800d528 <__swhatbuf_r>
 800d598:	9900      	ldr	r1, [sp, #0]
 800d59a:	4605      	mov	r5, r0
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7fd fbb1 	bl	800ad04 <_malloc_r>
 800d5a2:	b948      	cbnz	r0, 800d5b8 <__smakebuf_r+0x44>
 800d5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a8:	059a      	lsls	r2, r3, #22
 800d5aa:	d4ef      	bmi.n	800d58c <__smakebuf_r+0x18>
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	f043 0302 	orr.w	r3, r3, #2
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	e7e3      	b.n	800d580 <__smakebuf_r+0xc>
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	6020      	str	r0, [r4, #0]
 800d5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	9b00      	ldr	r3, [sp, #0]
 800d5c4:	6163      	str	r3, [r4, #20]
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	6120      	str	r0, [r4, #16]
 800d5ca:	b15b      	cbz	r3, 800d5e4 <__smakebuf_r+0x70>
 800d5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f000 f81d 	bl	800d610 <_isatty_r>
 800d5d6:	b128      	cbz	r0, 800d5e4 <__smakebuf_r+0x70>
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	f023 0303 	bic.w	r3, r3, #3
 800d5de:	f043 0301 	orr.w	r3, r3, #1
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	431d      	orrs	r5, r3
 800d5e8:	81a5      	strh	r5, [r4, #12]
 800d5ea:	e7cf      	b.n	800d58c <__smakebuf_r+0x18>

0800d5ec <_fstat_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_fstat_r+0x20>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	f7f5 fae4 	bl	8002bc6 <_fstat>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d102      	bne.n	800d608 <_fstat_r+0x1c>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b103      	cbz	r3, 800d608 <_fstat_r+0x1c>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	20000dcc 	.word	0x20000dcc

0800d610 <_isatty_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_isatty_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7f5 fae3 	bl	8002be6 <_isatty>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_isatty_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_isatty_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	20000dcc 	.word	0x20000dcc

0800d630 <atan2f>:
 800d630:	f000 b884 	b.w	800d73c <__ieee754_atan2f>

0800d634 <expf>:
 800d634:	b508      	push	{r3, lr}
 800d636:	ed2d 8b02 	vpush	{d8}
 800d63a:	eef0 8a40 	vmov.f32	s17, s0
 800d63e:	f000 f91d 	bl	800d87c <__ieee754_expf>
 800d642:	eeb0 8a40 	vmov.f32	s16, s0
 800d646:	eeb0 0a68 	vmov.f32	s0, s17
 800d64a:	f000 f867 	bl	800d71c <finitef>
 800d64e:	b160      	cbz	r0, 800d66a <expf+0x36>
 800d650:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d690 <expf+0x5c>
 800d654:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65c:	dd0a      	ble.n	800d674 <expf+0x40>
 800d65e:	f7fe f9ab 	bl	800b9b8 <__errno>
 800d662:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800d694 <expf+0x60>
 800d666:	2322      	movs	r3, #34	; 0x22
 800d668:	6003      	str	r3, [r0, #0]
 800d66a:	eeb0 0a48 	vmov.f32	s0, s16
 800d66e:	ecbd 8b02 	vpop	{d8}
 800d672:	bd08      	pop	{r3, pc}
 800d674:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d698 <expf+0x64>
 800d678:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d680:	d5f3      	bpl.n	800d66a <expf+0x36>
 800d682:	f7fe f999 	bl	800b9b8 <__errno>
 800d686:	2322      	movs	r3, #34	; 0x22
 800d688:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d69c <expf+0x68>
 800d68c:	6003      	str	r3, [r0, #0]
 800d68e:	e7ec      	b.n	800d66a <expf+0x36>
 800d690:	42b17217 	.word	0x42b17217
 800d694:	7f800000 	.word	0x7f800000
 800d698:	c2cff1b5 	.word	0xc2cff1b5
 800d69c:	00000000 	.word	0x00000000

0800d6a0 <fmodf>:
 800d6a0:	b508      	push	{r3, lr}
 800d6a2:	ed2d 8b02 	vpush	{d8}
 800d6a6:	eef0 8a40 	vmov.f32	s17, s0
 800d6aa:	eeb0 8a60 	vmov.f32	s16, s1
 800d6ae:	f000 f9b3 	bl	800da18 <__ieee754_fmodf>
 800d6b2:	eef4 8a48 	vcmp.f32	s17, s16
 800d6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ba:	d60c      	bvs.n	800d6d6 <fmodf+0x36>
 800d6bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d6dc <fmodf+0x3c>
 800d6c0:	eeb4 8a68 	vcmp.f32	s16, s17
 800d6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c8:	d105      	bne.n	800d6d6 <fmodf+0x36>
 800d6ca:	f7fe f975 	bl	800b9b8 <__errno>
 800d6ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d6d2:	2321      	movs	r3, #33	; 0x21
 800d6d4:	6003      	str	r3, [r0, #0]
 800d6d6:	ecbd 8b02 	vpop	{d8}
 800d6da:	bd08      	pop	{r3, pc}
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <sqrtf>:
 800d6e0:	b508      	push	{r3, lr}
 800d6e2:	ed2d 8b02 	vpush	{d8}
 800d6e6:	eeb0 8a40 	vmov.f32	s16, s0
 800d6ea:	f000 f824 	bl	800d736 <__ieee754_sqrtf>
 800d6ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800d6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f6:	d60c      	bvs.n	800d712 <sqrtf+0x32>
 800d6f8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d718 <sqrtf+0x38>
 800d6fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d704:	d505      	bpl.n	800d712 <sqrtf+0x32>
 800d706:	f7fe f957 	bl	800b9b8 <__errno>
 800d70a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d70e:	2321      	movs	r3, #33	; 0x21
 800d710:	6003      	str	r3, [r0, #0]
 800d712:	ecbd 8b02 	vpop	{d8}
 800d716:	bd08      	pop	{r3, pc}
 800d718:	00000000 	.word	0x00000000

0800d71c <finitef>:
 800d71c:	b082      	sub	sp, #8
 800d71e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d722:	9801      	ldr	r0, [sp, #4]
 800d724:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d728:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d72c:	bfac      	ite	ge
 800d72e:	2000      	movge	r0, #0
 800d730:	2001      	movlt	r0, #1
 800d732:	b002      	add	sp, #8
 800d734:	4770      	bx	lr

0800d736 <__ieee754_sqrtf>:
 800d736:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d73a:	4770      	bx	lr

0800d73c <__ieee754_atan2f>:
 800d73c:	ee10 2a90 	vmov	r2, s1
 800d740:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d744:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d748:	b510      	push	{r4, lr}
 800d74a:	eef0 7a40 	vmov.f32	s15, s0
 800d74e:	dc06      	bgt.n	800d75e <__ieee754_atan2f+0x22>
 800d750:	ee10 0a10 	vmov	r0, s0
 800d754:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d758:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d75c:	dd04      	ble.n	800d768 <__ieee754_atan2f+0x2c>
 800d75e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d762:	eeb0 0a67 	vmov.f32	s0, s15
 800d766:	bd10      	pop	{r4, pc}
 800d768:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d76c:	d103      	bne.n	800d776 <__ieee754_atan2f+0x3a>
 800d76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d772:	f000 b9d3 	b.w	800db1c <atanf>
 800d776:	1794      	asrs	r4, r2, #30
 800d778:	f004 0402 	and.w	r4, r4, #2
 800d77c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d780:	b943      	cbnz	r3, 800d794 <__ieee754_atan2f+0x58>
 800d782:	2c02      	cmp	r4, #2
 800d784:	d05e      	beq.n	800d844 <__ieee754_atan2f+0x108>
 800d786:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d858 <__ieee754_atan2f+0x11c>
 800d78a:	2c03      	cmp	r4, #3
 800d78c:	bf08      	it	eq
 800d78e:	eef0 7a47 	vmoveq.f32	s15, s14
 800d792:	e7e6      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d794:	b941      	cbnz	r1, 800d7a8 <__ieee754_atan2f+0x6c>
 800d796:	eddf 7a31 	vldr	s15, [pc, #196]	; 800d85c <__ieee754_atan2f+0x120>
 800d79a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d860 <__ieee754_atan2f+0x124>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	bfb8      	it	lt
 800d7a2:	eef0 7a47 	vmovlt.f32	s15, s14
 800d7a6:	e7dc      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d7a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d7ac:	d110      	bne.n	800d7d0 <__ieee754_atan2f+0x94>
 800d7ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d7b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d7b6:	d107      	bne.n	800d7c8 <__ieee754_atan2f+0x8c>
 800d7b8:	2c02      	cmp	r4, #2
 800d7ba:	d846      	bhi.n	800d84a <__ieee754_atan2f+0x10e>
 800d7bc:	4b29      	ldr	r3, [pc, #164]	; (800d864 <__ieee754_atan2f+0x128>)
 800d7be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d7c2:	edd3 7a00 	vldr	s15, [r3]
 800d7c6:	e7cc      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d7c8:	2c02      	cmp	r4, #2
 800d7ca:	d841      	bhi.n	800d850 <__ieee754_atan2f+0x114>
 800d7cc:	4b26      	ldr	r3, [pc, #152]	; (800d868 <__ieee754_atan2f+0x12c>)
 800d7ce:	e7f6      	b.n	800d7be <__ieee754_atan2f+0x82>
 800d7d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d7d4:	d0df      	beq.n	800d796 <__ieee754_atan2f+0x5a>
 800d7d6:	1a5b      	subs	r3, r3, r1
 800d7d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800d7dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d7e0:	da1a      	bge.n	800d818 <__ieee754_atan2f+0xdc>
 800d7e2:	2a00      	cmp	r2, #0
 800d7e4:	da01      	bge.n	800d7ea <__ieee754_atan2f+0xae>
 800d7e6:	313c      	adds	r1, #60	; 0x3c
 800d7e8:	db19      	blt.n	800d81e <__ieee754_atan2f+0xe2>
 800d7ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d7ee:	f000 fa69 	bl	800dcc4 <fabsf>
 800d7f2:	f000 f993 	bl	800db1c <atanf>
 800d7f6:	eef0 7a40 	vmov.f32	s15, s0
 800d7fa:	2c01      	cmp	r4, #1
 800d7fc:	d012      	beq.n	800d824 <__ieee754_atan2f+0xe8>
 800d7fe:	2c02      	cmp	r4, #2
 800d800:	d017      	beq.n	800d832 <__ieee754_atan2f+0xf6>
 800d802:	2c00      	cmp	r4, #0
 800d804:	d0ad      	beq.n	800d762 <__ieee754_atan2f+0x26>
 800d806:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d86c <__ieee754_atan2f+0x130>
 800d80a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d80e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d870 <__ieee754_atan2f+0x134>
 800d812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d816:	e7a4      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d818:	eddf 7a10 	vldr	s15, [pc, #64]	; 800d85c <__ieee754_atan2f+0x120>
 800d81c:	e7ed      	b.n	800d7fa <__ieee754_atan2f+0xbe>
 800d81e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d874 <__ieee754_atan2f+0x138>
 800d822:	e7ea      	b.n	800d7fa <__ieee754_atan2f+0xbe>
 800d824:	ee17 3a90 	vmov	r3, s15
 800d828:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d82c:	ee07 3a90 	vmov	s15, r3
 800d830:	e797      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d832:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d86c <__ieee754_atan2f+0x130>
 800d836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d83a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800d870 <__ieee754_atan2f+0x134>
 800d83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d842:	e78e      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d844:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800d870 <__ieee754_atan2f+0x134>
 800d848:	e78b      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d84a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d878 <__ieee754_atan2f+0x13c>
 800d84e:	e788      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d850:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d874 <__ieee754_atan2f+0x138>
 800d854:	e785      	b.n	800d762 <__ieee754_atan2f+0x26>
 800d856:	bf00      	nop
 800d858:	c0490fdb 	.word	0xc0490fdb
 800d85c:	3fc90fdb 	.word	0x3fc90fdb
 800d860:	bfc90fdb 	.word	0xbfc90fdb
 800d864:	0800e134 	.word	0x0800e134
 800d868:	0800e140 	.word	0x0800e140
 800d86c:	33bbbd2e 	.word	0x33bbbd2e
 800d870:	40490fdb 	.word	0x40490fdb
 800d874:	00000000 	.word	0x00000000
 800d878:	3f490fdb 	.word	0x3f490fdb

0800d87c <__ieee754_expf>:
 800d87c:	ee10 2a10 	vmov	r2, s0
 800d880:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d884:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d888:	d902      	bls.n	800d890 <__ieee754_expf+0x14>
 800d88a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d88e:	4770      	bx	lr
 800d890:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800d894:	d106      	bne.n	800d8a4 <__ieee754_expf+0x28>
 800d896:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d9d0 <__ieee754_expf+0x154>
 800d89a:	2900      	cmp	r1, #0
 800d89c:	bf18      	it	ne
 800d89e:	eeb0 0a67 	vmovne.f32	s0, s15
 800d8a2:	4770      	bx	lr
 800d8a4:	484b      	ldr	r0, [pc, #300]	; (800d9d4 <__ieee754_expf+0x158>)
 800d8a6:	4282      	cmp	r2, r0
 800d8a8:	dd02      	ble.n	800d8b0 <__ieee754_expf+0x34>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	f000 ba2e 	b.w	800dd0c <__math_oflowf>
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	da05      	bge.n	800d8c0 <__ieee754_expf+0x44>
 800d8b4:	4a48      	ldr	r2, [pc, #288]	; (800d9d8 <__ieee754_expf+0x15c>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d902      	bls.n	800d8c0 <__ieee754_expf+0x44>
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f000 ba20 	b.w	800dd00 <__math_uflowf>
 800d8c0:	4a46      	ldr	r2, [pc, #280]	; (800d9dc <__ieee754_expf+0x160>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d8c8:	d952      	bls.n	800d970 <__ieee754_expf+0xf4>
 800d8ca:	4a45      	ldr	r2, [pc, #276]	; (800d9e0 <__ieee754_expf+0x164>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800d8d2:	d834      	bhi.n	800d93e <__ieee754_expf+0xc2>
 800d8d4:	4b43      	ldr	r3, [pc, #268]	; (800d9e4 <__ieee754_expf+0x168>)
 800d8d6:	4413      	add	r3, r2
 800d8d8:	ed93 7a00 	vldr	s14, [r3]
 800d8dc:	4b42      	ldr	r3, [pc, #264]	; (800d9e8 <__ieee754_expf+0x16c>)
 800d8de:	4413      	add	r3, r2
 800d8e0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d8e4:	f1c1 0201 	rsb	r2, r1, #1
 800d8e8:	edd3 7a00 	vldr	s15, [r3]
 800d8ec:	1a52      	subs	r2, r2, r1
 800d8ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d8f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d8f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d9ec <__ieee754_expf+0x170>
 800d8fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9f0 <__ieee754_expf+0x174>
 800d8fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d902:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d9f4 <__ieee754_expf+0x178>
 800d906:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d90a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d9f8 <__ieee754_expf+0x17c>
 800d90e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d912:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d9fc <__ieee754_expf+0x180>
 800d916:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d91a:	eef0 6a40 	vmov.f32	s13, s0
 800d91e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d922:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d926:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d92a:	bb92      	cbnz	r2, 800d992 <__ieee754_expf+0x116>
 800d92c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d930:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d934:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d938:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d93c:	4770      	bx	lr
 800d93e:	4b30      	ldr	r3, [pc, #192]	; (800da00 <__ieee754_expf+0x184>)
 800d940:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800da04 <__ieee754_expf+0x188>
 800d944:	eddf 6a30 	vldr	s13, [pc, #192]	; 800da08 <__ieee754_expf+0x18c>
 800d948:	4413      	add	r3, r2
 800d94a:	edd3 7a00 	vldr	s15, [r3]
 800d94e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d952:	eeb0 7a40 	vmov.f32	s14, s0
 800d956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d95a:	ee17 2a90 	vmov	r2, s15
 800d95e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d962:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d966:	eddf 6a29 	vldr	s13, [pc, #164]	; 800da0c <__ieee754_expf+0x190>
 800d96a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d96e:	e7be      	b.n	800d8ee <__ieee754_expf+0x72>
 800d970:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800d974:	d20b      	bcs.n	800d98e <__ieee754_expf+0x112>
 800d976:	eddf 6a26 	vldr	s13, [pc, #152]	; 800da10 <__ieee754_expf+0x194>
 800d97a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d97e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d986:	dd02      	ble.n	800d98e <__ieee754_expf+0x112>
 800d988:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d98c:	4770      	bx	lr
 800d98e:	2200      	movs	r2, #0
 800d990:	e7af      	b.n	800d8f2 <__ieee754_expf+0x76>
 800d992:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d996:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d99a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d99e:	bfb8      	it	lt
 800d9a0:	3264      	addlt	r2, #100	; 0x64
 800d9a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d9a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d9ae:	ee17 3a90 	vmov	r3, s15
 800d9b2:	bfab      	itete	ge
 800d9b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d9b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d9bc:	ee00 3a10 	vmovge	s0, r3
 800d9c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800da14 <__ieee754_expf+0x198>
 800d9c4:	bfbc      	itt	lt
 800d9c6:	ee00 3a10 	vmovlt	s0, r3
 800d9ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d9ce:	4770      	bx	lr
 800d9d0:	00000000 	.word	0x00000000
 800d9d4:	42b17217 	.word	0x42b17217
 800d9d8:	42cff1b5 	.word	0x42cff1b5
 800d9dc:	3eb17218 	.word	0x3eb17218
 800d9e0:	3f851591 	.word	0x3f851591
 800d9e4:	0800e154 	.word	0x0800e154
 800d9e8:	0800e15c 	.word	0x0800e15c
 800d9ec:	3331bb4c 	.word	0x3331bb4c
 800d9f0:	b5ddea0e 	.word	0xb5ddea0e
 800d9f4:	388ab355 	.word	0x388ab355
 800d9f8:	bb360b61 	.word	0xbb360b61
 800d9fc:	3e2aaaab 	.word	0x3e2aaaab
 800da00:	0800e14c 	.word	0x0800e14c
 800da04:	3fb8aa3b 	.word	0x3fb8aa3b
 800da08:	3f317180 	.word	0x3f317180
 800da0c:	3717f7d1 	.word	0x3717f7d1
 800da10:	7149f2ca 	.word	0x7149f2ca
 800da14:	0d800000 	.word	0x0d800000

0800da18 <__ieee754_fmodf>:
 800da18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da1a:	ee10 4a90 	vmov	r4, s1
 800da1e:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 800da22:	d009      	beq.n	800da38 <__ieee754_fmodf+0x20>
 800da24:	ee10 3a10 	vmov	r3, s0
 800da28:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800da2c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800da30:	da02      	bge.n	800da38 <__ieee754_fmodf+0x20>
 800da32:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800da36:	dd04      	ble.n	800da42 <__ieee754_fmodf+0x2a>
 800da38:	ee60 0a20 	vmul.f32	s1, s0, s1
 800da3c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800da40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da42:	4286      	cmp	r6, r0
 800da44:	dbfc      	blt.n	800da40 <__ieee754_fmodf+0x28>
 800da46:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 800da4a:	d105      	bne.n	800da58 <__ieee754_fmodf+0x40>
 800da4c:	4b32      	ldr	r3, [pc, #200]	; (800db18 <__ieee754_fmodf+0x100>)
 800da4e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800da52:	ed93 0a00 	vldr	s0, [r3]
 800da56:	e7f3      	b.n	800da40 <__ieee754_fmodf+0x28>
 800da58:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800da5c:	d140      	bne.n	800dae0 <__ieee754_fmodf+0xc8>
 800da5e:	0232      	lsls	r2, r6, #8
 800da60:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800da64:	2a00      	cmp	r2, #0
 800da66:	dc38      	bgt.n	800dada <__ieee754_fmodf+0xc2>
 800da68:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 800da6c:	d13e      	bne.n	800daec <__ieee754_fmodf+0xd4>
 800da6e:	0207      	lsls	r7, r0, #8
 800da70:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800da74:	2f00      	cmp	r7, #0
 800da76:	da36      	bge.n	800dae6 <__ieee754_fmodf+0xce>
 800da78:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800da7c:	bfb9      	ittee	lt
 800da7e:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800da82:	1a5b      	sublt	r3, r3, r1
 800da84:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800da88:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800da8c:	bfb8      	it	lt
 800da8e:	fa06 f303 	lsllt.w	r3, r6, r3
 800da92:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800da96:	bfb5      	itete	lt
 800da98:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 800da9c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800daa0:	1aa4      	sublt	r4, r4, r2
 800daa2:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 800daa6:	bfb8      	it	lt
 800daa8:	40a0      	lsllt	r0, r4
 800daaa:	1a89      	subs	r1, r1, r2
 800daac:	1a1c      	subs	r4, r3, r0
 800daae:	bb01      	cbnz	r1, 800daf2 <__ieee754_fmodf+0xda>
 800dab0:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 800dab4:	bf38      	it	cc
 800dab6:	4623      	movcc	r3, r4
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0c7      	beq.n	800da4c <__ieee754_fmodf+0x34>
 800dabc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dac0:	db1f      	blt.n	800db02 <__ieee754_fmodf+0xea>
 800dac2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800dac6:	db1f      	blt.n	800db08 <__ieee754_fmodf+0xf0>
 800dac8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800dacc:	327f      	adds	r2, #127	; 0x7f
 800dace:	432b      	orrs	r3, r5
 800dad0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dad4:	ee00 3a10 	vmov	s0, r3
 800dad8:	e7b2      	b.n	800da40 <__ieee754_fmodf+0x28>
 800dada:	3901      	subs	r1, #1
 800dadc:	0052      	lsls	r2, r2, #1
 800dade:	e7c1      	b.n	800da64 <__ieee754_fmodf+0x4c>
 800dae0:	15f1      	asrs	r1, r6, #23
 800dae2:	397f      	subs	r1, #127	; 0x7f
 800dae4:	e7c0      	b.n	800da68 <__ieee754_fmodf+0x50>
 800dae6:	3a01      	subs	r2, #1
 800dae8:	007f      	lsls	r7, r7, #1
 800daea:	e7c3      	b.n	800da74 <__ieee754_fmodf+0x5c>
 800daec:	15c2      	asrs	r2, r0, #23
 800daee:	3a7f      	subs	r2, #127	; 0x7f
 800daf0:	e7c2      	b.n	800da78 <__ieee754_fmodf+0x60>
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	da02      	bge.n	800dafc <__ieee754_fmodf+0xe4>
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	3901      	subs	r1, #1
 800dafa:	e7d7      	b.n	800daac <__ieee754_fmodf+0x94>
 800dafc:	d0a6      	beq.n	800da4c <__ieee754_fmodf+0x34>
 800dafe:	0063      	lsls	r3, r4, #1
 800db00:	e7fa      	b.n	800daf8 <__ieee754_fmodf+0xe0>
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	3a01      	subs	r2, #1
 800db06:	e7d9      	b.n	800dabc <__ieee754_fmodf+0xa4>
 800db08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db10:	3282      	adds	r2, #130	; 0x82
 800db12:	4113      	asrs	r3, r2
 800db14:	432b      	orrs	r3, r5
 800db16:	e7dd      	b.n	800dad4 <__ieee754_fmodf+0xbc>
 800db18:	0800e164 	.word	0x0800e164

0800db1c <atanf>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	ee10 5a10 	vmov	r5, s0
 800db22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800db26:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800db2a:	eef0 7a40 	vmov.f32	s15, s0
 800db2e:	db10      	blt.n	800db52 <atanf+0x36>
 800db30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800db34:	dd04      	ble.n	800db40 <atanf+0x24>
 800db36:	ee70 7a00 	vadd.f32	s15, s0, s0
 800db3a:	eeb0 0a67 	vmov.f32	s0, s15
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800dc78 <atanf+0x15c>
 800db44:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800dc7c <atanf+0x160>
 800db48:	2d00      	cmp	r5, #0
 800db4a:	bfd8      	it	le
 800db4c:	eef0 7a47 	vmovle.f32	s15, s14
 800db50:	e7f3      	b.n	800db3a <atanf+0x1e>
 800db52:	4b4b      	ldr	r3, [pc, #300]	; (800dc80 <atanf+0x164>)
 800db54:	429c      	cmp	r4, r3
 800db56:	dc10      	bgt.n	800db7a <atanf+0x5e>
 800db58:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800db5c:	da0a      	bge.n	800db74 <atanf+0x58>
 800db5e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800dc84 <atanf+0x168>
 800db62:	ee30 7a07 	vadd.f32	s14, s0, s14
 800db66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	dce2      	bgt.n	800db3a <atanf+0x1e>
 800db74:	f04f 33ff 	mov.w	r3, #4294967295
 800db78:	e013      	b.n	800dba2 <atanf+0x86>
 800db7a:	f000 f8a3 	bl	800dcc4 <fabsf>
 800db7e:	4b42      	ldr	r3, [pc, #264]	; (800dc88 <atanf+0x16c>)
 800db80:	429c      	cmp	r4, r3
 800db82:	dc4f      	bgt.n	800dc24 <atanf+0x108>
 800db84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800db88:	429c      	cmp	r4, r3
 800db8a:	dc41      	bgt.n	800dc10 <atanf+0xf4>
 800db8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800db90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800db94:	eea0 7a27 	vfma.f32	s14, s0, s15
 800db98:	2300      	movs	r3, #0
 800db9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dba2:	1c5a      	adds	r2, r3, #1
 800dba4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dba8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800dc8c <atanf+0x170>
 800dbac:	eddf 5a38 	vldr	s11, [pc, #224]	; 800dc90 <atanf+0x174>
 800dbb0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800dc94 <atanf+0x178>
 800dbb4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800dbb8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dbbc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800dc98 <atanf+0x17c>
 800dbc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dbc4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800dc9c <atanf+0x180>
 800dbc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dbcc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800dca0 <atanf+0x184>
 800dbd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dbd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dca4 <atanf+0x188>
 800dbd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800dbdc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800dca8 <atanf+0x18c>
 800dbe0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800dbe4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dcac <atanf+0x190>
 800dbe8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dbec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800dcb0 <atanf+0x194>
 800dbf0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800dbf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800dcb4 <atanf+0x198>
 800dbf8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800dbfc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc00:	eea5 7a86 	vfma.f32	s14, s11, s12
 800dc04:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dc08:	d121      	bne.n	800dc4e <atanf+0x132>
 800dc0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc0e:	e794      	b.n	800db3a <atanf+0x1e>
 800dc10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc14:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dc18:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dc22:	e7be      	b.n	800dba2 <atanf+0x86>
 800dc24:	4b24      	ldr	r3, [pc, #144]	; (800dcb8 <atanf+0x19c>)
 800dc26:	429c      	cmp	r4, r3
 800dc28:	dc0b      	bgt.n	800dc42 <atanf+0x126>
 800dc2a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800dc2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc32:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dc36:	2302      	movs	r3, #2
 800dc38:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc40:	e7af      	b.n	800dba2 <atanf+0x86>
 800dc42:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dc46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e7a9      	b.n	800dba2 <atanf+0x86>
 800dc4e:	4a1b      	ldr	r2, [pc, #108]	; (800dcbc <atanf+0x1a0>)
 800dc50:	491b      	ldr	r1, [pc, #108]	; (800dcc0 <atanf+0x1a4>)
 800dc52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dc56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dc5a:	edd3 6a00 	vldr	s13, [r3]
 800dc5e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800dc62:	2d00      	cmp	r5, #0
 800dc64:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc68:	edd2 7a00 	vldr	s15, [r2]
 800dc6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc70:	bfb8      	it	lt
 800dc72:	eef1 7a67 	vneglt.f32	s15, s15
 800dc76:	e760      	b.n	800db3a <atanf+0x1e>
 800dc78:	3fc90fdb 	.word	0x3fc90fdb
 800dc7c:	bfc90fdb 	.word	0xbfc90fdb
 800dc80:	3edfffff 	.word	0x3edfffff
 800dc84:	7149f2ca 	.word	0x7149f2ca
 800dc88:	3f97ffff 	.word	0x3f97ffff
 800dc8c:	3c8569d7 	.word	0x3c8569d7
 800dc90:	3d4bda59 	.word	0x3d4bda59
 800dc94:	bd6ef16b 	.word	0xbd6ef16b
 800dc98:	3d886b35 	.word	0x3d886b35
 800dc9c:	3dba2e6e 	.word	0x3dba2e6e
 800dca0:	3e124925 	.word	0x3e124925
 800dca4:	3eaaaaab 	.word	0x3eaaaaab
 800dca8:	bd15a221 	.word	0xbd15a221
 800dcac:	bd9d8795 	.word	0xbd9d8795
 800dcb0:	bde38e38 	.word	0xbde38e38
 800dcb4:	be4ccccd 	.word	0xbe4ccccd
 800dcb8:	401bffff 	.word	0x401bffff
 800dcbc:	0800e16c 	.word	0x0800e16c
 800dcc0:	0800e17c 	.word	0x0800e17c

0800dcc4 <fabsf>:
 800dcc4:	ee10 3a10 	vmov	r3, s0
 800dcc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dccc:	ee00 3a10 	vmov	s0, r3
 800dcd0:	4770      	bx	lr

0800dcd2 <with_errnof>:
 800dcd2:	b513      	push	{r0, r1, r4, lr}
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dcda:	f7fd fe6d 	bl	800b9b8 <__errno>
 800dcde:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dce2:	6004      	str	r4, [r0, #0]
 800dce4:	b002      	add	sp, #8
 800dce6:	bd10      	pop	{r4, pc}

0800dce8 <xflowf>:
 800dce8:	b130      	cbz	r0, 800dcf8 <xflowf+0x10>
 800dcea:	eef1 7a40 	vneg.f32	s15, s0
 800dcee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dcf2:	2022      	movs	r0, #34	; 0x22
 800dcf4:	f7ff bfed 	b.w	800dcd2 <with_errnof>
 800dcf8:	eef0 7a40 	vmov.f32	s15, s0
 800dcfc:	e7f7      	b.n	800dcee <xflowf+0x6>
	...

0800dd00 <__math_uflowf>:
 800dd00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd08 <__math_uflowf+0x8>
 800dd04:	f7ff bff0 	b.w	800dce8 <xflowf>
 800dd08:	10000000 	.word	0x10000000

0800dd0c <__math_oflowf>:
 800dd0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd14 <__math_oflowf+0x8>
 800dd10:	f7ff bfea 	b.w	800dce8 <xflowf>
 800dd14:	70000000 	.word	0x70000000

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr
