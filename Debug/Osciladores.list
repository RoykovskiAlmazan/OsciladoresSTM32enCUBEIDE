
Osciladores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009640  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a8  080098a8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080098b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000a5c  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b04  20000b04  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013acb  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000326a  00000000  00000000  00033be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec0  00000000  00000000  00036e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b30  00000000  00000000  00037d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000231b1  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013cca  00000000  00000000  0005b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca4e6  00000000  00000000  0006f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004200  00000000  00000000  00139ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097b0 	.word	0x080097b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	080097b0 	.word	0x080097b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <calcular_z3_z4>:
float atractores8 = 0.0f;
float sumatoria7 = 0.0f;
float sumatoria8 = 0.0f;
float x_new, y_new, z3_new, z4_new,z1_new, z2_new, z5_new, z6_new, z7_new, z8_new;

void calcular_z3_z4() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	ed2d 8b02 	vpush	{d8}
 80004ca:	b098      	sub	sp, #96	; 0x60
 80004cc:	af00      	add	r7, sp, #0
	theta = atan2f(y, x);
 80004ce:	4bac      	ldr	r3, [pc, #688]	; (8000780 <calcular_z3_z4+0x2bc>)
 80004d0:	edd3 7a00 	vldr	s15, [r3]
 80004d4:	4bab      	ldr	r3, [pc, #684]	; (8000784 <calcular_z3_z4+0x2c0>)
 80004d6:	ed93 7a00 	vldr	s14, [r3]
 80004da:	eef0 0a47 	vmov.f32	s1, s14
 80004de:	eeb0 0a67 	vmov.f32	s0, s15
 80004e2:	f008 fe93 	bl	800920c <atan2f>
 80004e6:	eef0 7a40 	vmov.f32	s15, s0
 80004ea:	4ba7      	ldr	r3, [pc, #668]	; (8000788 <calcular_z3_z4+0x2c4>)
 80004ec:	edc3 7a00 	vstr	s15, [r3]
	        if (theta < 0.0f) { //Calculo de tyheta
 80004f0:	4ba5      	ldr	r3, [pc, #660]	; (8000788 <calcular_z3_z4+0x2c4>)
 80004f2:	edd3 7a00 	vldr	s15, [r3]
 80004f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fe:	d509      	bpl.n	8000514 <calcular_z3_z4+0x50>
	            theta += 2.0f * PI;
 8000500:	4ba1      	ldr	r3, [pc, #644]	; (8000788 <calcular_z3_z4+0x2c4>)
 8000502:	edd3 7a00 	vldr	s15, [r3]
 8000506:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800078c <calcular_z3_z4+0x2c8>
 800050a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800050e:	4b9e      	ldr	r3, [pc, #632]	; (8000788 <calcular_z3_z4+0x2c4>)
 8000510:	edc3 7a00 	vstr	s15, [r3]
	}

	        	atractores3 = 0.0f;
 8000514:	4b9e      	ldr	r3, [pc, #632]	; (8000790 <calcular_z3_z4+0x2cc>)
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N3; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000520:	e02f      	b.n	8000582 <calcular_z3_z4+0xbe>
	            	atractores3 += a3[i] * expf(-b3[i] * fabsf(theta - deltaTheta3[i]));
 8000522:	4a9c      	ldr	r2, [pc, #624]	; (8000794 <calcular_z3_z4+0x2d0>)
 8000524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	ed93 8a00 	vldr	s16, [r3]
 800052e:	4a9a      	ldr	r2, [pc, #616]	; (8000798 <calcular_z3_z4+0x2d4>)
 8000530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	edd3 7a00 	vldr	s15, [r3]
 800053a:	eeb1 7a67 	vneg.f32	s14, s15
 800053e:	4b92      	ldr	r3, [pc, #584]	; (8000788 <calcular_z3_z4+0x2c4>)
 8000540:	edd3 6a00 	vldr	s13, [r3]
 8000544:	4a95      	ldr	r2, [pc, #596]	; (800079c <calcular_z3_z4+0x2d8>)
 8000546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	edd3 7a00 	vldr	s15, [r3]
 8000550:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000554:	eef0 7ae7 	vabs.f32	s15, s15
 8000558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800055c:	eeb0 0a67 	vmov.f32	s0, s15
 8000560:	f008 fe56 	bl	8009210 <expf>
 8000564:	eef0 7a40 	vmov.f32	s15, s0
 8000568:	ee28 7a27 	vmul.f32	s14, s16, s15
 800056c:	4b88      	ldr	r3, [pc, #544]	; (8000790 <calcular_z3_z4+0x2cc>)
 800056e:	edd3 7a00 	vldr	s15, [r3]
 8000572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000576:	4b86      	ldr	r3, [pc, #536]	; (8000790 <calcular_z3_z4+0x2cc>)
 8000578:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N3; i++) {
 800057c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800057e:	3301      	adds	r3, #1
 8000580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000584:	2b01      	cmp	r3, #1
 8000586:	ddcc      	ble.n	8000522 <calcular_z3_z4+0x5e>
	            }

	            // CÁLCULO DE ATRACTORES PARA OSCILADOR 4
	            atractores4 = 0.0f;
 8000588:	4b85      	ldr	r3, [pc, #532]	; (80007a0 <calcular_z3_z4+0x2dc>)
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
	            for (int i = 0; i < N4; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	65bb      	str	r3, [r7, #88]	; 0x58
 8000594:	e02f      	b.n	80005f6 <calcular_z3_z4+0x132>
	            	atractores4 += a4[i] * expf(-b4[i] * fabsf(theta - deltaTheta4[i]));
 8000596:	4a83      	ldr	r2, [pc, #524]	; (80007a4 <calcular_z3_z4+0x2e0>)
 8000598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	ed93 8a00 	vldr	s16, [r3]
 80005a2:	4a81      	ldr	r2, [pc, #516]	; (80007a8 <calcular_z3_z4+0x2e4>)
 80005a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	eeb1 7a67 	vneg.f32	s14, s15
 80005b2:	4b75      	ldr	r3, [pc, #468]	; (8000788 <calcular_z3_z4+0x2c4>)
 80005b4:	edd3 6a00 	vldr	s13, [r3]
 80005b8:	4a7c      	ldr	r2, [pc, #496]	; (80007ac <calcular_z3_z4+0x2e8>)
 80005ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	edd3 7a00 	vldr	s15, [r3]
 80005c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005c8:	eef0 7ae7 	vabs.f32	s15, s15
 80005cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	f008 fe1c 	bl	8009210 <expf>
 80005d8:	eef0 7a40 	vmov.f32	s15, s0
 80005dc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80005e0:	4b6f      	ldr	r3, [pc, #444]	; (80007a0 <calcular_z3_z4+0x2dc>)
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ea:	4b6d      	ldr	r3, [pc, #436]	; (80007a0 <calcular_z3_z4+0x2dc>)
 80005ec:	edc3 7a00 	vstr	s15, [r3]
	            for (int i = 0; i < N4; i++) {
 80005f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005f2:	3301      	adds	r3, #1
 80005f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80005f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	ddcc      	ble.n	8000596 <calcular_z3_z4+0xd2>
	            }


	            atractores1 = 0.0f;
 80005fc:	4b6c      	ldr	r3, [pc, #432]	; (80007b0 <calcular_z3_z4+0x2ec>)
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N3; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
 8000608:	e033      	b.n	8000672 <calcular_z3_z4+0x1ae>
					atractores1 += a3[i] * expf(-b3[i] * fabsf((theta+2*PI/3) - deltaTheta3[i]));
 800060a:	4a62      	ldr	r2, [pc, #392]	; (8000794 <calcular_z3_z4+0x2d0>)
 800060c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	ed93 8a00 	vldr	s16, [r3]
 8000616:	4a60      	ldr	r2, [pc, #384]	; (8000798 <calcular_z3_z4+0x2d4>)
 8000618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	eeb1 7a67 	vneg.f32	s14, s15
 8000626:	4b58      	ldr	r3, [pc, #352]	; (8000788 <calcular_z3_z4+0x2c4>)
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	eddf 6a61 	vldr	s13, [pc, #388]	; 80007b4 <calcular_z3_z4+0x2f0>
 8000630:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8000634:	4a59      	ldr	r2, [pc, #356]	; (800079c <calcular_z3_z4+0x2d8>)
 8000636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	edd3 7a00 	vldr	s15, [r3]
 8000640:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000644:	eef0 7ae7 	vabs.f32	s15, s15
 8000648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800064c:	eeb0 0a67 	vmov.f32	s0, s15
 8000650:	f008 fdde 	bl	8009210 <expf>
 8000654:	eef0 7a40 	vmov.f32	s15, s0
 8000658:	ee28 7a27 	vmul.f32	s14, s16, s15
 800065c:	4b54      	ldr	r3, [pc, #336]	; (80007b0 <calcular_z3_z4+0x2ec>)
 800065e:	edd3 7a00 	vldr	s15, [r3]
 8000662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <calcular_z3_z4+0x2ec>)
 8000668:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N3; i++) {
 800066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800066e:	3301      	adds	r3, #1
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
 8000672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000674:	2b01      	cmp	r3, #1
 8000676:	ddc8      	ble.n	800060a <calcular_z3_z4+0x146>
				}

				// CÁLCULO DE ATRACTORES PARA OSCILADOR 4
				atractores2 = 0.0f;
 8000678:	4b4f      	ldr	r3, [pc, #316]	; (80007b8 <calcular_z3_z4+0x2f4>)
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
 8000684:	e033      	b.n	80006ee <calcular_z3_z4+0x22a>
					atractores2 += a4[i] * expf(-b4[i] * fabsf((theta+2*PI/3) - deltaTheta4[i]));
 8000686:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <calcular_z3_z4+0x2e0>)
 8000688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	ed93 8a00 	vldr	s16, [r3]
 8000692:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <calcular_z3_z4+0x2e4>)
 8000694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	edd3 7a00 	vldr	s15, [r3]
 800069e:	eeb1 7a67 	vneg.f32	s14, s15
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <calcular_z3_z4+0x2c4>)
 80006a4:	edd3 7a00 	vldr	s15, [r3]
 80006a8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80007b4 <calcular_z3_z4+0x2f0>
 80006ac:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80006b0:	4a3e      	ldr	r2, [pc, #248]	; (80007ac <calcular_z3_z4+0x2e8>)
 80006b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	edd3 7a00 	vldr	s15, [r3]
 80006bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80006c0:	eef0 7ae7 	vabs.f32	s15, s15
 80006c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	f008 fda0 	bl	8009210 <expf>
 80006d0:	eef0 7a40 	vmov.f32	s15, s0
 80006d4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80006d8:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <calcular_z3_z4+0x2f4>)
 80006e4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 80006e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006ea:	3301      	adds	r3, #1
 80006ec:	653b      	str	r3, [r7, #80]	; 0x50
 80006ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	ddc8      	ble.n	8000686 <calcular_z3_z4+0x1c2>
				}

				 atractores5 = 0.0f;
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <calcular_z3_z4+0x2f8>)
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N3; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000700:	e033      	b.n	800076a <calcular_z3_z4+0x2a6>
					atractores5 += a3[i] * expf(-b3[i] * fabsf((theta+PI) - deltaTheta3[i]));
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <calcular_z3_z4+0x2d0>)
 8000704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	ed93 8a00 	vldr	s16, [r3]
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <calcular_z3_z4+0x2d4>)
 8000710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	eeb1 7a67 	vneg.f32	s14, s15
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <calcular_z3_z4+0x2c4>)
 8000720:	edd3 7a00 	vldr	s15, [r3]
 8000724:	eddf 6a26 	vldr	s13, [pc, #152]	; 80007c0 <calcular_z3_z4+0x2fc>
 8000728:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <calcular_z3_z4+0x2d8>)
 800072e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800073c:	eef0 7ae7 	vabs.f32	s15, s15
 8000740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000744:	eeb0 0a67 	vmov.f32	s0, s15
 8000748:	f008 fd62 	bl	8009210 <expf>
 800074c:	eef0 7a40 	vmov.f32	s15, s0
 8000750:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <calcular_z3_z4+0x2f8>)
 8000756:	edd3 7a00 	vldr	s15, [r3]
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <calcular_z3_z4+0x2f8>)
 8000760:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N3; i++) {
 8000764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000766:	3301      	adds	r3, #1
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800076a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800076c:	2b01      	cmp	r3, #1
 800076e:	ddc8      	ble.n	8000702 <calcular_z3_z4+0x23e>
				}

				// CÁLCULO DE ATRACTORES PARA OSCILADOR 4
				atractores6 = 0.0f;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <calcular_z3_z4+0x300>)
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
 800077c:	e058      	b.n	8000830 <calcular_z3_z4+0x36c>
 800077e:	bf00      	nop
 8000780:	2000016c 	.word	0x2000016c
 8000784:	20000000 	.word	0x20000000
 8000788:	20000168 	.word	0x20000168
 800078c:	40c90fdb 	.word	0x40c90fdb
 8000790:	200001b0 	.word	0x200001b0
 8000794:	080097f0 	.word	0x080097f0
 8000798:	080097f8 	.word	0x080097f8
 800079c:	08009800 	.word	0x08009800
 80007a0:	200001b4 	.word	0x200001b4
 80007a4:	08009808 	.word	0x08009808
 80007a8:	08009818 	.word	0x08009818
 80007ac:	08009828 	.word	0x08009828
 80007b0:	200001b8 	.word	0x200001b8
 80007b4:	40060a92 	.word	0x40060a92
 80007b8:	200001bc 	.word	0x200001bc
 80007bc:	200001c0 	.word	0x200001c0
 80007c0:	40490fdb 	.word	0x40490fdb
 80007c4:	200001c4 	.word	0x200001c4
					atractores6 += a4[i] * expf(-b4[i] * fabsf((theta+PI) - deltaTheta4[i]));
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <calcular_z3_z4+0x3fc>)
 80007ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	ed93 8a00 	vldr	s16, [r3]
 80007d4:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <calcular_z3_z4+0x400>)
 80007d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	edd3 7a00 	vldr	s15, [r3]
 80007e0:	eeb1 7a67 	vneg.f32	s14, s15
 80007e4:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <calcular_z3_z4+0x404>)
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80008cc <calcular_z3_z4+0x408>
 80007ee:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80007f2:	4a37      	ldr	r2, [pc, #220]	; (80008d0 <calcular_z3_z4+0x40c>)
 80007f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000802:	eef0 7ae7 	vabs.f32	s15, s15
 8000806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800080a:	eeb0 0a67 	vmov.f32	s0, s15
 800080e:	f008 fcff 	bl	8009210 <expf>
 8000812:	eef0 7a40 	vmov.f32	s15, s0
 8000816:	ee28 7a27 	vmul.f32	s14, s16, s15
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <calcular_z3_z4+0x410>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <calcular_z3_z4+0x410>)
 8000826:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 800082a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800082c:	3301      	adds	r3, #1
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000832:	2b03      	cmp	r3, #3
 8000834:	ddc8      	ble.n	80007c8 <calcular_z3_z4+0x304>
				}
				 atractores7 = 0.0f;
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <calcular_z3_z4+0x414>)
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N3; i++) {
 800083e:	2300      	movs	r3, #0
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
 8000842:	e033      	b.n	80008ac <calcular_z3_z4+0x3e8>
					atractores7 += a3[i] * expf(-b3[i] * fabsf((theta+4*PI/3) - deltaTheta3[i]));
 8000844:	4a25      	ldr	r2, [pc, #148]	; (80008dc <calcular_z3_z4+0x418>)
 8000846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	ed93 8a00 	vldr	s16, [r3]
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <calcular_z3_z4+0x41c>)
 8000852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	eeb1 7a67 	vneg.f32	s14, s15
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <calcular_z3_z4+0x404>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80008e4 <calcular_z3_z4+0x420>
 800086a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <calcular_z3_z4+0x424>)
 8000870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800087e:	eef0 7ae7 	vabs.f32	s15, s15
 8000882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000886:	eeb0 0a67 	vmov.f32	s0, s15
 800088a:	f008 fcc1 	bl	8009210 <expf>
 800088e:	eef0 7a40 	vmov.f32	s15, s0
 8000892:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <calcular_z3_z4+0x414>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <calcular_z3_z4+0x414>)
 80008a2:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N3; i++) {
 80008a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008a8:	3301      	adds	r3, #1
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
 80008ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	ddc8      	ble.n	8000844 <calcular_z3_z4+0x380>
				}

				// CÁLCULO DE ATRACTORES PARA OSCILADOR 4
				atractores8 = 0.0f;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <calcular_z3_z4+0x428>)
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < N4; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	643b      	str	r3, [r7, #64]	; 0x40
 80008be:	e04b      	b.n	8000958 <calcular_z3_z4+0x494>
 80008c0:	08009808 	.word	0x08009808
 80008c4:	08009818 	.word	0x08009818
 80008c8:	20000168 	.word	0x20000168
 80008cc:	40490fdb 	.word	0x40490fdb
 80008d0:	08009828 	.word	0x08009828
 80008d4:	200001c4 	.word	0x200001c4
 80008d8:	200001c8 	.word	0x200001c8
 80008dc:	080097f0 	.word	0x080097f0
 80008e0:	080097f8 	.word	0x080097f8
 80008e4:	40860a92 	.word	0x40860a92
 80008e8:	08009800 	.word	0x08009800
 80008ec:	200001cc 	.word	0x200001cc
					atractores8 += a4[i] * expf(-b4[i] * fabsf((theta+4*PI/3) - deltaTheta4[i]));
 80008f0:	4ada      	ldr	r2, [pc, #872]	; (8000c5c <calcular_z3_z4+0x798>)
 80008f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	ed93 8a00 	vldr	s16, [r3]
 80008fc:	4ad8      	ldr	r2, [pc, #864]	; (8000c60 <calcular_z3_z4+0x79c>)
 80008fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	eeb1 7a67 	vneg.f32	s14, s15
 800090c:	4bd5      	ldr	r3, [pc, #852]	; (8000c64 <calcular_z3_z4+0x7a0>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eddf 6ad5 	vldr	s13, [pc, #852]	; 8000c68 <calcular_z3_z4+0x7a4>
 8000916:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800091a:	4ad4      	ldr	r2, [pc, #848]	; (8000c6c <calcular_z3_z4+0x7a8>)
 800091c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800092a:	eef0 7ae7 	vabs.f32	s15, s15
 800092e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000932:	eeb0 0a67 	vmov.f32	s0, s15
 8000936:	f008 fc6b 	bl	8009210 <expf>
 800093a:	eef0 7a40 	vmov.f32	s15, s0
 800093e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000942:	4bcb      	ldr	r3, [pc, #812]	; (8000c70 <calcular_z3_z4+0x7ac>)
 8000944:	edd3 7a00 	vldr	s15, [r3]
 8000948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094c:	4bc8      	ldr	r3, [pc, #800]	; (8000c70 <calcular_z3_z4+0x7ac>)
 800094e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < N4; i++) {
 8000952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000954:	3301      	adds	r3, #1
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
 8000958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800095a:	2b03      	cmp	r3, #3
 800095c:	ddc8      	ble.n	80008f0 <calcular_z3_z4+0x42c>
				}

	            // DINÁMICA DE OSCILADORES (MÉTODO DE EULER)

	            // Cálculo de alpha
	            alpha = 1.0f - sqrtf(x * x + y * y);
 800095e:	4bc5      	ldr	r3, [pc, #788]	; (8000c74 <calcular_z3_z4+0x7b0>)
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	4bc3      	ldr	r3, [pc, #780]	; (8000c74 <calcular_z3_z4+0x7b0>)
 8000966:	edd3 7a00 	vldr	s15, [r3]
 800096a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096e:	4bc2      	ldr	r3, [pc, #776]	; (8000c78 <calcular_z3_z4+0x7b4>)
 8000970:	edd3 6a00 	vldr	s13, [r3]
 8000974:	4bc0      	ldr	r3, [pc, #768]	; (8000c78 <calcular_z3_z4+0x7b4>)
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800097e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	f008 fc79 	bl	800927c <sqrtf>
 800098a:	eef0 7a40 	vmov.f32	s15, s0
 800098e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000996:	4bb9      	ldr	r3, [pc, #740]	; (8000c7c <calcular_z3_z4+0x7b8>)
 8000998:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador base (x, y)
	            x_new = x + dt * (alpha * x - omega * y);
 800099c:	4bb7      	ldr	r3, [pc, #732]	; (8000c7c <calcular_z3_z4+0x7b8>)
 800099e:	ed93 7a00 	vldr	s14, [r3]
 80009a2:	4bb4      	ldr	r3, [pc, #720]	; (8000c74 <calcular_z3_z4+0x7b0>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ac:	4bb4      	ldr	r3, [pc, #720]	; (8000c80 <calcular_z3_z4+0x7bc>)
 80009ae:	edd3 6a00 	vldr	s13, [r3]
 80009b2:	4bb1      	ldr	r3, [pc, #708]	; (8000c78 <calcular_z3_z4+0x7b4>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009c0:	4bb0      	ldr	r3, [pc, #704]	; (8000c84 <calcular_z3_z4+0x7c0>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ca:	4baa      	ldr	r3, [pc, #680]	; (8000c74 <calcular_z3_z4+0x7b0>)
 80009cc:	edd3 7a00 	vldr	s15, [r3]
 80009d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d4:	4bac      	ldr	r3, [pc, #688]	; (8000c88 <calcular_z3_z4+0x7c4>)
 80009d6:	edc3 7a00 	vstr	s15, [r3]
	            y_new = y + dt * (alpha * y + omega * x);
 80009da:	4ba8      	ldr	r3, [pc, #672]	; (8000c7c <calcular_z3_z4+0x7b8>)
 80009dc:	ed93 7a00 	vldr	s14, [r3]
 80009e0:	4ba5      	ldr	r3, [pc, #660]	; (8000c78 <calcular_z3_z4+0x7b4>)
 80009e2:	edd3 7a00 	vldr	s15, [r3]
 80009e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ea:	4ba5      	ldr	r3, [pc, #660]	; (8000c80 <calcular_z3_z4+0x7bc>)
 80009ec:	edd3 6a00 	vldr	s13, [r3]
 80009f0:	4ba0      	ldr	r3, [pc, #640]	; (8000c74 <calcular_z3_z4+0x7b0>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009fe:	4ba1      	ldr	r3, [pc, #644]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000a00:	edd3 7a00 	vldr	s15, [r3]
 8000a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a08:	4b9b      	ldr	r3, [pc, #620]	; (8000c78 <calcular_z3_z4+0x7b4>)
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a12:	4b9e      	ldr	r3, [pc, #632]	; (8000c8c <calcular_z3_z4+0x7c8>)
 8000a14:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 3
	            float primerTermino3 = -beta3 * (z3 - z0_3);
 8000a18:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8000c90 <calcular_z3_z4+0x7cc>
 8000a1c:	eeb1 7a67 	vneg.f32	s14, s15
 8000a20:	4b9c      	ldr	r3, [pc, #624]	; (8000c94 <calcular_z3_z4+0x7d0>)
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	            float dzdt3 = -primerTermino3 + atractores3;
 8000a36:	4b98      	ldr	r3, [pc, #608]	; (8000c98 <calcular_z3_z4+0x7d4>)
 8000a38:	ed93 7a00 	vldr	s14, [r3]
 8000a3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	            z3_new = z3 + dzdt3 * dt;
 8000a48:	4b8e      	ldr	r3, [pc, #568]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000a4a:	ed93 7a00 	vldr	s14, [r3]
 8000a4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a56:	4b8f      	ldr	r3, [pc, #572]	; (8000c94 <calcular_z3_z4+0x7d0>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a60:	4b8e      	ldr	r3, [pc, #568]	; (8000c9c <calcular_z3_z4+0x7d8>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]

	            // Oscilador 4
	            float primerTermino4 = -beta4 * (z4 - z0_4);
 8000a66:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8000ca0 <calcular_z3_z4+0x7dc>
 8000a6a:	eeb1 7a67 	vneg.f32	s14, s15
 8000a6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ca4 <calcular_z3_z4+0x7e0>)
 8000a70:	edd3 7a00 	vldr	s15, [r3]
 8000a74:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8000ca8 <calcular_z3_z4+0x7e4>
 8000a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a80:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	            float dzdt4 = -primerTermino4 + atractores4;
 8000a84:	4b89      	ldr	r3, [pc, #548]	; (8000cac <calcular_z3_z4+0x7e8>)
 8000a86:	ed93 7a00 	vldr	s14, [r3]
 8000a8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	            z4_new = z4 + dzdt4 * dt;
 8000a96:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000a98:	ed93 7a00 	vldr	s14, [r3]
 8000a9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aa4:	4b7f      	ldr	r3, [pc, #508]	; (8000ca4 <calcular_z3_z4+0x7e0>)
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <calcular_z3_z4+0x7ec>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]


	            // Oscilador 3
				float primerTermino1 = -beta3 * (z1 - z0_3);
 8000ab4:	eddf 7a76 	vldr	s15, [pc, #472]	; 8000c90 <calcular_z3_z4+0x7cc>
 8000ab8:	eeb1 7a67 	vneg.f32	s14, s15
 8000abc:	4b7d      	ldr	r3, [pc, #500]	; (8000cb4 <calcular_z3_z4+0x7f0>)
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ac6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ace:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				float dzdt1 = -primerTermino1 + atractores1;
 8000ad2:	4b79      	ldr	r3, [pc, #484]	; (8000cb8 <calcular_z3_z4+0x7f4>)
 8000ad4:	ed93 7a00 	vldr	s14, [r3]
 8000ad8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				z1_new = z1 + dzdt1 * dt;
 8000ae4:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000ae6:	ed93 7a00 	vldr	s14, [r3]
 8000aea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000af2:	4b70      	ldr	r3, [pc, #448]	; (8000cb4 <calcular_z3_z4+0x7f0>)
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afc:	4b6f      	ldr	r3, [pc, #444]	; (8000cbc <calcular_z3_z4+0x7f8>)
 8000afe:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino2 = -beta4 * (z2 - z0_4);
 8000b02:	eddf 7a67 	vldr	s15, [pc, #412]	; 8000ca0 <calcular_z3_z4+0x7dc>
 8000b06:	eeb1 7a67 	vneg.f32	s14, s15
 8000b0a:	4b6d      	ldr	r3, [pc, #436]	; (8000cc0 <calcular_z3_z4+0x7fc>)
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	eddf 6a65 	vldr	s13, [pc, #404]	; 8000ca8 <calcular_z3_z4+0x7e4>
 8000b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float dzdt2 = -primerTermino2 + atractores2;
 8000b20:	4b68      	ldr	r3, [pc, #416]	; (8000cc4 <calcular_z3_z4+0x800>)
 8000b22:	ed93 7a00 	vldr	s14, [r3]
 8000b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2e:	edc7 7a08 	vstr	s15, [r7, #32]
				z2_new = z2 + dzdt2 * dt;
 8000b32:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000b34:	ed93 7a00 	vldr	s14, [r3]
 8000b38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b40:	4b5f      	ldr	r3, [pc, #380]	; (8000cc0 <calcular_z3_z4+0x7fc>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4a:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <calcular_z3_z4+0x804>)
 8000b4c:	edc3 7a00 	vstr	s15, [r3]

				float primerTermino5 = -beta3 * (z5 - z0_3);
 8000b50:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8000c90 <calcular_z3_z4+0x7cc>
 8000b54:	eeb1 7a67 	vneg.f32	s14, s15
 8000b58:	4b5c      	ldr	r3, [pc, #368]	; (8000ccc <calcular_z3_z4+0x808>)
 8000b5a:	edd3 7a00 	vldr	s15, [r3]
 8000b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b6a:	edc7 7a07 	vstr	s15, [r7, #28]
				float dzdt5 = -primerTermino5 + atractores5;
 8000b6e:	4b58      	ldr	r3, [pc, #352]	; (8000cd0 <calcular_z3_z4+0x80c>)
 8000b70:	ed93 7a00 	vldr	s14, [r3]
 8000b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b7c:	edc7 7a06 	vstr	s15, [r7, #24]
				z5_new = z5 + dzdt5 * dt;
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000b82:	ed93 7a00 	vldr	s14, [r3]
 8000b86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <calcular_z3_z4+0x808>)
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <calcular_z3_z4+0x810>)
 8000b9a:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino6 = -beta4 * (z6 - z0_4);
 8000b9e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8000ca0 <calcular_z3_z4+0x7dc>
 8000ba2:	eeb1 7a67 	vneg.f32	s14, s15
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8000ca8 <calcular_z3_z4+0x7e4>
 8000bb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	edc7 7a05 	vstr	s15, [r7, #20]
				float dzdt6 = -primerTermino6 + atractores6;
 8000bbc:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <calcular_z3_z4+0x818>)
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bca:	edc7 7a04 	vstr	s15, [r7, #16]
				z6_new = z6 + dzdt6 * dt;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000bd0:	ed93 7a00 	vldr	s14, [r3]
 8000bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <calcular_z3_z4+0x814>)
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <calcular_z3_z4+0x81c>)
 8000be8:	edc3 7a00 	vstr	s15, [r3]


				// Oscilador 3
				float primerTermino7 = -beta3 * (z7 - z0_3);
 8000bec:	eddf 7a28 	vldr	s15, [pc, #160]	; 8000c90 <calcular_z3_z4+0x7cc>
 8000bf0:	eeb1 7a67 	vneg.f32	s14, s15
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <calcular_z3_z4+0x820>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c06:	edc7 7a03 	vstr	s15, [r7, #12]
				float dzdt7 = -primerTermino7 + atractores7;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <calcular_z3_z4+0x824>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c18:	edc7 7a02 	vstr	s15, [r7, #8]
				z7_new = z7 + dzdt7 * dt;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <calcular_z3_z4+0x7c0>)
 8000c1e:	ed93 7a00 	vldr	s14, [r3]
 8000c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <calcular_z3_z4+0x820>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <calcular_z3_z4+0x828>)
 8000c36:	edc3 7a00 	vstr	s15, [r3]

				// Oscilador 4
				float primerTermino8 = -beta4 * (z8 - z0_4);
 8000c3a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8000ca0 <calcular_z3_z4+0x7dc>
 8000c3e:	eeb1 7a67 	vneg.f32	s14, s15
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <calcular_z3_z4+0x82c>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000ca8 <calcular_z3_z4+0x7e4>
 8000c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c54:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c58:	e04c      	b.n	8000cf4 <calcular_z3_z4+0x830>
 8000c5a:	bf00      	nop
 8000c5c:	08009808 	.word	0x08009808
 8000c60:	08009818 	.word	0x08009818
 8000c64:	20000168 	.word	0x20000168
 8000c68:	40860a92 	.word	0x40860a92
 8000c6c:	08009828 	.word	0x08009828
 8000c70:	200001cc 	.word	0x200001cc
 8000c74:	20000000 	.word	0x20000000
 8000c78:	2000016c 	.word	0x2000016c
 8000c7c:	20000164 	.word	0x20000164
 8000c80:	20000028 	.word	0x20000028
 8000c84:	20000024 	.word	0x20000024
 8000c88:	200001d0 	.word	0x200001d0
 8000c8c:	200001d4 	.word	0x200001d4
 8000c90:	c285f190 	.word	0xc285f190
 8000c94:	20000004 	.word	0x20000004
 8000c98:	200001b0 	.word	0x200001b0
 8000c9c:	200001d8 	.word	0x200001d8
 8000ca0:	c0594af5 	.word	0xc0594af5
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	3edc28f6 	.word	0x3edc28f6
 8000cac:	200001b4 	.word	0x200001b4
 8000cb0:	200001dc 	.word	0x200001dc
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	200001b8 	.word	0x200001b8
 8000cbc:	200001e0 	.word	0x200001e0
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	200001bc 	.word	0x200001bc
 8000cc8:	200001e4 	.word	0x200001e4
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	200001c0 	.word	0x200001c0
 8000cd4:	200001e8 	.word	0x200001e8
 8000cd8:	20000018 	.word	0x20000018
 8000cdc:	200001c4 	.word	0x200001c4
 8000ce0:	200001ec 	.word	0x200001ec
 8000ce4:	2000001c 	.word	0x2000001c
 8000ce8:	200001c8 	.word	0x200001c8
 8000cec:	200001f0 	.word	0x200001f0
 8000cf0:	20000020 	.word	0x20000020
				float dzdt8 = -primerTermino8 + atractores8;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <calcular_z3_z4+0x8bc>)
 8000cf6:	ed93 7a00 	vldr	s14, [r3]
 8000cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d02:	edc7 7a00 	vstr	s15, [r7]
				z8_new = z8 + dzdt8 * dt;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <calcular_z3_z4+0x8c0>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a00 	vldr	s15, [r7]
 8000d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <calcular_z3_z4+0x8c4>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <calcular_z3_z4+0x8c8>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]

	                // ACTUALIZAR ESTADO
	            x = x_new;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <calcular_z3_z4+0x8cc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <calcular_z3_z4+0x8d0>)
 8000d2a:	6013      	str	r3, [r2, #0]
	            y = y_new;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <calcular_z3_z4+0x8d4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <calcular_z3_z4+0x8d8>)
 8000d32:	6013      	str	r3, [r2, #0]
	            z3 = z3_new;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <calcular_z3_z4+0x8dc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <calcular_z3_z4+0x8e0>)
 8000d3a:	6013      	str	r3, [r2, #0]
	            z4 = z4_new;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <calcular_z3_z4+0x8e4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <calcular_z3_z4+0x8e8>)
 8000d42:	6013      	str	r3, [r2, #0]
	            z1 = z1_new;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <calcular_z3_z4+0x8ec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <calcular_z3_z4+0x8f0>)
 8000d4a:	6013      	str	r3, [r2, #0]
	            z2 = z2_new;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <calcular_z3_z4+0x8f4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <calcular_z3_z4+0x8f8>)
 8000d52:	6013      	str	r3, [r2, #0]
	            z5 = z5_new;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <calcular_z3_z4+0x8fc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <calcular_z3_z4+0x900>)
 8000d5a:	6013      	str	r3, [r2, #0]
				z6 = z6_new;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <calcular_z3_z4+0x904>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <calcular_z3_z4+0x908>)
 8000d62:	6013      	str	r3, [r2, #0]
				z7 = z7_new;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <calcular_z3_z4+0x90c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <calcular_z3_z4+0x910>)
 8000d6a:	6013      	str	r3, [r2, #0]
				z8 = z8_new;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <calcular_z3_z4+0x8c8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <calcular_z3_z4+0x8c4>)
 8000d72:	6013      	str	r3, [r2, #0]

}
 8000d74:	bf00      	nop
 8000d76:	3760      	adds	r7, #96	; 0x60
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	ecbd 8b02 	vpop	{d8}
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001cc 	.word	0x200001cc
 8000d84:	20000024 	.word	0x20000024
 8000d88:	20000020 	.word	0x20000020
 8000d8c:	200001f4 	.word	0x200001f4
 8000d90:	200001d0 	.word	0x200001d0
 8000d94:	20000000 	.word	0x20000000
 8000d98:	200001d4 	.word	0x200001d4
 8000d9c:	2000016c 	.word	0x2000016c
 8000da0:	200001d8 	.word	0x200001d8
 8000da4:	20000004 	.word	0x20000004
 8000da8:	200001dc 	.word	0x200001dc
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200001e0 	.word	0x200001e0
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	200001e4 	.word	0x200001e4
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	200001e8 	.word	0x200001e8
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	200001ec 	.word	0x200001ec
 8000dcc:	20000018 	.word	0x20000018
 8000dd0:	200001f0 	.word	0x200001f0
 8000dd4:	2000001c 	.word	0x2000001c

08000dd8 <enviar_dato>:


void enviar_dato(uint8_t* dato, uint8_t size ){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart2, dato, size, HAL_MAX_DELAY);
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <enviar_dato+0x24>)
 8000df0:	f004 f80b 	bl	8004e0a <HAL_UART_Transmit>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000011c 	.word	0x2000011c

08000e00 <syncwrite_mover_servos>:

void syncwrite_mover_servos(uint8_t *ids, uint16_t *posiciones, uint8_t cantidad){
 8000e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e04:	b08d      	sub	sp, #52	; 0x34
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	466b      	mov	r3, sp
 8000e12:	461e      	mov	r6, r3
	const uint8_t INSTRUCCION = 0x83; //FUNCION SYNWRITE EN HEZADECIMAL UWU
 8000e14:	2383      	movs	r3, #131	; 0x83
 8000e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	const uint8_t ID_BROADCAST = 0xFE;
 8000e1a:	23fe      	movs	r3, #254	; 0xfe
 8000e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	const uint8_t START_ADDR = GOAL_POSITION_L; //posible solucion al problema del espejo en los motores
 8000e20:	231e      	movs	r3, #30
 8000e22:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	//propuesta cambiar al R pero no conozco el hezadecimal para esa instruccion CREARLo??
	const uint8_t BYTES_POR_SERVO = 3; //es el id + 2 bytes de posicion
 8000e26:	2303      	movs	r3, #3
 8000e28:	f887 3020 	strb.w	r3, [r7, #32]
	// algo como 4 headers + N *3(id + 2 bytes) + 1 byte de cheksum

	uint8_t longitud = 4+ cantidad*BYTES_POR_SERVO;
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e32:	fb12 f303 	smulbb	r3, r2, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	3304      	adds	r3, #4
 8000e3a:	77fb      	strb	r3, [r7, #31]
	uint8_t paquete[6 + cantidad * BYTES_POR_SERVO];
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e42:	fb02 f303 	mul.w	r3, r2, r3
 8000e46:	1d99      	adds	r1, r3, #6
 8000e48:	1e4b      	subs	r3, r1, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4690      	mov	r8, r2
 8000e52:	4699      	mov	r9, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e68:	460a      	mov	r2, r1
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4614      	mov	r4, r2
 8000e6e:	461d      	mov	r5, r3
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	00eb      	lsls	r3, r5, #3
 8000e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e7e:	00e2      	lsls	r2, r4, #3
 8000e80:	460b      	mov	r3, r1
 8000e82:	3307      	adds	r3, #7
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	ebad 0d03 	sub.w	sp, sp, r3
 8000e8c:	466b      	mov	r3, sp
 8000e8e:	3300      	adds	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]

	int i = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
	    paquete[i++] = 0xFF;
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	21ff      	movs	r1, #255	; 0xff
 8000ea0:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 0xFF;
 8000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	21ff      	movs	r1, #255	; 0xff
 8000eac:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = ID_BROADCAST;
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8000eba:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = longitud;
 8000ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	7ff9      	ldrb	r1, [r7, #31]
 8000ec6:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = INSTRUCCION;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000ed4:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = START_ADDR;
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000ee2:	54d1      	strb	r1, [r2, r3]
	    paquete[i++] = 2; // 2 bytes por dato (posición)
 8000ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	2102      	movs	r1, #2
 8000eee:	54d1      	strb	r1, [r2, r3]

	    for (uint8_t j = 0; j < cantidad; j++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000ef6:	e025      	b.n	8000f44 <syncwrite_mover_servos+0x144>
	            uint16_t pos = posiciones[j];
 8000ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	4413      	add	r3, r2
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	827b      	strh	r3, [r7, #18]
	            paquete[i++] = ids[j];         // ID del servo
 8000f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	441a      	add	r2, r3
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	1c59      	adds	r1, r3, #1
 8000f12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = pos & 0xFF;     // LSB
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f20:	8a7a      	ldrh	r2, [r7, #18]
 8000f22:	b2d1      	uxtb	r1, r2
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	54d1      	strb	r1, [r2, r3]
	            paquete[i++] = (pos >> 8) & 0xFF; // MSB
 8000f28:	8a7b      	ldrh	r3, [r7, #18]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f34:	b2c9      	uxtb	r1, r1
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	54d1      	strb	r1, [r2, r3]
	    for (uint8_t j = 0; j < cantidad; j++) {
 8000f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f44:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3d4      	bcc.n	8000ef8 <syncwrite_mover_servos+0xf8>
	        }
	    //cheksum

	    uint8_t checksum = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000f54:	2302      	movs	r3, #2
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
 8000f58:	e00b      	b.n	8000f72 <syncwrite_mover_servos+0x172>
	           checksum += paquete[j];
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	4413      	add	r3, r2
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f66:	4413      	add	r3, r2
 8000f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       for (int j = 2; j < i; j++) {
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	3301      	adds	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbef      	blt.n	8000f5a <syncwrite_mover_servos+0x15a>
	       }
	       checksum = ~checksum;
 8000f7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	       paquete[i++] = checksum;
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8000f90:	54d1      	strb	r1, [r2, r3]

	       // Enviar por UART
	       enviar_dato(paquete, i);
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ff1d 	bl	8000dd8 <enviar_dato>
 8000f9e:	46b5      	mov	sp, r6
}
 8000fa0:	bf00      	nop
 8000fa2:	3734      	adds	r7, #52	; 0x34
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000fac <grados_a_posicion>:

uint16_t grados_a_posicion(float grados) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (grados < 0.0f) grados = 0.0f;
 8000fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d502      	bpl.n	8000fca <grados_a_posicion+0x1e>
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
    if (grados > 300.0f) grados = 300.0f;
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001004 <grados_a_posicion+0x58>
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd01      	ble.n	8000fe0 <grados_a_posicion+0x34>
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <grados_a_posicion+0x5c>)
 8000fde:	607b      	str	r3, [r7, #4]
    return (uint16_t)(grados * (1023.0f / 300.0f));
 8000fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800100c <grados_a_posicion+0x60>
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff0:	ee17 3a90 	vmov	r3, s15
 8000ff4:	b29b      	uxth	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	43960000 	.word	0x43960000
 8001008:	43960000 	.word	0x43960000
 800100c:	405a3d71 	.word	0x405a3d71

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b092      	sub	sp, #72	; 0x48
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
+  HAL_Init();
 8001016:	f000 fd07 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f9a7 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fa6f 	bl	8001500 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001022:	f000 fa0d 	bl	8001440 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001026:	f007 fca9 	bl	800897c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800102a:	f000 fa3f 	bl	80014ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t id[] = {0, 1, 2,3,4,5,6,7,8,9,10,11};
 800102e:	4ab6      	ldr	r2, [pc, #728]	; (8001308 <main+0x2f8>)
 8001030:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001034:	ca07      	ldmia	r2, {r0, r1, r2}
 8001036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint16_t posicion[] = {512, 512, 410,512, 512, 410,512, 512, 410,512, 512, 410};
 800103a:	4bb4      	ldr	r3, [pc, #720]	; (800130c <main+0x2fc>)
 800103c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001040:	461d      	mov	r5, r3
 8001042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001046:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104a:	e884 0003 	stmia.w	r4, {r0, r1}


  syncwrite_mover_servos(id, posicion, 12);
 800104e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001052:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001056:	220c      	movs	r2, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fed1 	bl	8000e00 <syncwrite_mover_servos>

  HAL_Delay(3000);
 800105e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001062:	f000 fd53 	bl	8001b0c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001066:	f007 fcaf 	bl	80089c8 <MX_USB_HOST_Process>

    calcular_z3_z4();
 800106a:	f7ff fa2b 	bl	80004c4 <calcular_z3_z4>

    z3_grados = (z3 * 24 + 148);
 800106e:	4ba8      	ldr	r3, [pc, #672]	; (8001310 <main+0x300>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001314 <main+0x304>
 8001080:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001084:	4ba4      	ldr	r3, [pc, #656]	; (8001318 <main+0x308>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
    z4_grados = z4 * 38  + 98;
 800108a:	4ba4      	ldr	r3, [pc, #656]	; (800131c <main+0x30c>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001320 <main+0x310>
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001324 <main+0x314>
 800109c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010a0:	4ba1      	ldr	r3, [pc, #644]	; (8001328 <main+0x318>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]

    z7_grados = (z1 * 24 + 148);
 80010a6:	4ba1      	ldr	r3, [pc, #644]	; (800132c <main+0x31c>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001314 <main+0x304>
 80010b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010bc:	4b9c      	ldr	r3, [pc, #624]	; (8001330 <main+0x320>)
 80010be:	edc3 7a00 	vstr	s15, [r3]
    z8_grados = z2 * 38  + 98;
 80010c2:	4b9c      	ldr	r3, [pc, #624]	; (8001334 <main+0x324>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001320 <main+0x310>
 80010cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001324 <main+0x314>
 80010d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d8:	4b97      	ldr	r3, [pc, #604]	; (8001338 <main+0x328>)
 80010da:	edc3 7a00 	vstr	s15, [r3]

    z1_grados = (z1 * 24 + 148);
 80010de:	4b93      	ldr	r3, [pc, #588]	; (800132c <main+0x31c>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80010e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ec:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001314 <main+0x304>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	4b91      	ldr	r3, [pc, #580]	; (800133c <main+0x32c>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
    z2_grados = z2 * 38  + 98;
 80010fa:	4b8e      	ldr	r3, [pc, #568]	; (8001334 <main+0x324>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001320 <main+0x310>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001324 <main+0x314>
 800110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001110:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <main+0x330>)
 8001112:	edc3 7a00 	vstr	s15, [r3]

    z5_grados = (z3 * 24 + 148);
 8001116:	4b7e      	ldr	r3, [pc, #504]	; (8001310 <main+0x300>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001314 <main+0x304>
 8001128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112c:	4b85      	ldr	r3, [pc, #532]	; (8001344 <main+0x334>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
    z6_grados = z4 * 38  + 98;
 8001132:	4b7a      	ldr	r3, [pc, #488]	; (800131c <main+0x30c>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001320 <main+0x310>
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001324 <main+0x314>
 8001144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001148:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <main+0x338>)
 800114a:	edc3 7a00 	vstr	s15, [r3]



    z3_posicion = grados_a_posicion(z3_grados);
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <main+0x308>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	f7ff ff28 	bl	8000fac <grados_a_posicion>
 800115c:	4603      	mov	r3, r0
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001166:	4b79      	ldr	r3, [pc, #484]	; (800134c <main+0x33c>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
    z4_posicion = grados_a_posicion(z4_grados);
 800116c:	4b6e      	ldr	r3, [pc, #440]	; (8001328 <main+0x318>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	f7ff ff19 	bl	8000fac <grados_a_posicion>
 800117a:	4603      	mov	r3, r0
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001184:	4b72      	ldr	r3, [pc, #456]	; (8001350 <main+0x340>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
    z1_posicion = grados_a_posicion(z1_grados);
 800118a:	4b6c      	ldr	r3, [pc, #432]	; (800133c <main+0x32c>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	f7ff ff0a 	bl	8000fac <grados_a_posicion>
 8001198:	4603      	mov	r3, r0
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <main+0x344>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
    z2_posicion = grados_a_posicion(z2_grados);
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <main+0x330>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	f7ff fefb 	bl	8000fac <grados_a_posicion>
 80011b6:	4603      	mov	r3, r0
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c0:	4b65      	ldr	r3, [pc, #404]	; (8001358 <main+0x348>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]

    z5_posicion = grados_a_posicion(z5_grados);
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <main+0x334>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f7ff feec 	bl	8000fac <grados_a_posicion>
 80011d4:	4603      	mov	r3, r0
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011de:	4b5f      	ldr	r3, [pc, #380]	; (800135c <main+0x34c>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]
        z6_posicion = grados_a_posicion(z6_grados);
 80011e4:	4b58      	ldr	r3, [pc, #352]	; (8001348 <main+0x338>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	f7ff fedd 	bl	8000fac <grados_a_posicion>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	4b58      	ldr	r3, [pc, #352]	; (8001360 <main+0x350>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
        z7_posicion = grados_a_posicion(z7_grados);
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <main+0x320>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff fece 	bl	8000fac <grados_a_posicion>
 8001210:	4603      	mov	r3, r0
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121a:	4b52      	ldr	r3, [pc, #328]	; (8001364 <main+0x354>)
 800121c:	edc3 7a00 	vstr	s15, [r3]
        z8_posicion = grados_a_posicion(z8_grados);
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <main+0x328>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	f7ff febf 	bl	8000fac <grados_a_posicion>
 800122e:	4603      	mov	r3, r0
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <main+0x358>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
    //PATA delantera IZQUIERDA

    uint8_t ids[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <main+0x2f8>)
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t posiciones[] = {512, z3_posicion, z4_posicion,512, z1_posicion, z2_posicion,512, z5_posicion, z6_posicion,512, z7_posicion, z8_posicion};
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	803b      	strh	r3, [r7, #0]
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <main+0x33c>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800125a:	ee17 3a90 	vmov	r3, s15
 800125e:	b29b      	uxth	r3, r3
 8001260:	807b      	strh	r3, [r7, #2]
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <main+0x340>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	ee17 3a90 	vmov	r3, s15
 8001270:	b29b      	uxth	r3, r3
 8001272:	80bb      	strh	r3, [r7, #4]
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <main+0x344>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	b29b      	uxth	r3, r3
 800128a:	813b      	strh	r3, [r7, #8]
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <main+0x348>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001296:	ee17 3a90 	vmov	r3, s15
 800129a:	b29b      	uxth	r3, r3
 800129c:	817b      	strh	r3, [r7, #10]
 800129e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a2:	81bb      	strh	r3, [r7, #12]
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <main+0x34c>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	81fb      	strh	r3, [r7, #14]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <main+0x350>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 3a90 	vmov	r3, s15
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	823b      	strh	r3, [r7, #16]
 80012c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012cc:	827b      	strh	r3, [r7, #18]
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <main+0x354>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <main+0x358>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	82fb      	strh	r3, [r7, #22]


    syncwrite_mover_servos(ids, posiciones, 12);
 80012f2:	4639      	mov	r1, r7
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	220c      	movs	r2, #12
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fd80 	bl	8000e00 <syncwrite_mover_servos>

    HAL_Delay(0.01);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 fc03 	bl	8001b0c <HAL_Delay>
  {
 8001306:	e6ae      	b.n	8001066 <main+0x56>
 8001308:	080097c8 	.word	0x080097c8
 800130c:	080097d4 	.word	0x080097d4
 8001310:	20000004 	.word	0x20000004
 8001314:	43140000 	.word	0x43140000
 8001318:	20000170 	.word	0x20000170
 800131c:	20000008 	.word	0x20000008
 8001320:	42180000 	.word	0x42180000
 8001324:	42c40000 	.word	0x42c40000
 8001328:	20000174 	.word	0x20000174
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000188 	.word	0x20000188
 8001334:	20000010 	.word	0x20000010
 8001338:	2000018c 	.word	0x2000018c
 800133c:	20000178 	.word	0x20000178
 8001340:	2000017c 	.word	0x2000017c
 8001344:	20000180 	.word	0x20000180
 8001348:	20000184 	.word	0x20000184
 800134c:	20000190 	.word	0x20000190
 8001350:	20000194 	.word	0x20000194
 8001354:	20000198 	.word	0x20000198
 8001358:	2000019c 	.word	0x2000019c
 800135c:	200001a0 	.word	0x200001a0
 8001360:	200001a4 	.word	0x200001a4
 8001364:	200001a8 	.word	0x200001a8
 8001368:	200001ac 	.word	0x200001ac

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	; 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2230      	movs	r2, #48	; 0x30
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f007 feb6 	bl	80090ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <SystemClock_Config+0xcc>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a27      	ldr	r2, [pc, #156]	; (8001438 <SystemClock_Config+0xcc>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <SystemClock_Config+0xcc>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <SystemClock_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <SystemClock_Config+0xd0>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <SystemClock_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ea:	2307      	movs	r3, #7
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 ff90 	bl	8004318 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013fe:	f000 f9af 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2105      	movs	r1, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f003 f9f1 	bl	8004808 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800142c:	f000 f998 	bl	8001760 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	; 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_SPI1_Init+0x64>)
 800144c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_SPI1_Init+0x64>)
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SPI1_Init+0x64>)
 800148c:	220a      	movs	r2, #10
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001492:	f003 fbd9 	bl	8004c48 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800149c:	f000 f960 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000c4 	.word	0x200000c4
 80014a8:	40013000 	.word	0x40013000

080014ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <MX_USART2_UART_Init+0x50>)
 80014ba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014d0:	220c      	movs	r2, #12
 80014d2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_USART2_UART_Init+0x48>)
 80014e2:	f003 fc3a 	bl	8004d5a <HAL_HalfDuplex_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80014ec:	f000 f938 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000011c 	.word	0x2000011c
 80014f8:	40004400 	.word	0x40004400
 80014fc:	000f4240 	.word	0x000f4240

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <MX_GPIO_Init+0x248>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <MX_GPIO_Init+0x248>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <MX_GPIO_Init+0x248>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b84      	ldr	r3, [pc, #528]	; (8001748 <MX_GPIO_Init+0x248>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a83      	ldr	r2, [pc, #524]	; (8001748 <MX_GPIO_Init+0x248>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <MX_GPIO_Init+0x248>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <MX_GPIO_Init+0x248>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a7c      	ldr	r2, [pc, #496]	; (8001748 <MX_GPIO_Init+0x248>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <MX_GPIO_Init+0x248>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <MX_GPIO_Init+0x248>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a75      	ldr	r2, [pc, #468]	; (8001748 <MX_GPIO_Init+0x248>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b73      	ldr	r3, [pc, #460]	; (8001748 <MX_GPIO_Init+0x248>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <MX_GPIO_Init+0x248>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <MX_GPIO_Init+0x248>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <MX_GPIO_Init+0x248>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b68      	ldr	r3, [pc, #416]	; (8001748 <MX_GPIO_Init+0x248>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a67      	ldr	r2, [pc, #412]	; (8001748 <MX_GPIO_Init+0x248>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <MX_GPIO_Init+0x248>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2108      	movs	r1, #8
 80015c2:	4862      	ldr	r0, [pc, #392]	; (800174c <MX_GPIO_Init+0x24c>)
 80015c4:	f000 fd74 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2101      	movs	r1, #1
 80015cc:	4860      	ldr	r0, [pc, #384]	; (8001750 <MX_GPIO_Init+0x250>)
 80015ce:	f000 fd6f 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015d2:	2200      	movs	r2, #0
 80015d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015d8:	485e      	ldr	r0, [pc, #376]	; (8001754 <MX_GPIO_Init+0x254>)
 80015da:	f000 fd69 	bl	80020b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4855      	ldr	r0, [pc, #340]	; (800174c <MX_GPIO_Init+0x24c>)
 80015f6:	f000 fbbf 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	484f      	ldr	r0, [pc, #316]	; (8001750 <MX_GPIO_Init+0x250>)
 8001612:	f000 fbb1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001616:	2308      	movs	r3, #8
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001626:	2305      	movs	r3, #5
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4847      	ldr	r0, [pc, #284]	; (8001750 <MX_GPIO_Init+0x250>)
 8001632:	f000 fba1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800163a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4843      	ldr	r0, [pc, #268]	; (8001758 <MX_GPIO_Init+0x258>)
 800164c:	f000 fb94 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001650:	2310      	movs	r3, #16
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001660:	2306      	movs	r3, #6
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	483b      	ldr	r0, [pc, #236]	; (8001758 <MX_GPIO_Init+0x258>)
 800166c:	f000 fb84 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001670:	2304      	movs	r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4836      	ldr	r0, [pc, #216]	; (800175c <MX_GPIO_Init+0x25c>)
 8001684:	f000 fb78 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800169a:	2305      	movs	r3, #5
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	482d      	ldr	r0, [pc, #180]	; (800175c <MX_GPIO_Init+0x25c>)
 80016a6:	f000 fb67 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4824      	ldr	r0, [pc, #144]	; (8001754 <MX_GPIO_Init+0x254>)
 80016c4:	f000 fb58 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SD_Pin;
 80016c8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016da:	2306      	movs	r3, #6
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_GPIO_Init+0x250>)
 80016e6:	f000 fb47 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016ea:	2320      	movs	r3, #32
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4815      	ldr	r0, [pc, #84]	; (8001754 <MX_GPIO_Init+0x254>)
 80016fe:	f000 fb3b 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001702:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001714:	2304      	movs	r3, #4
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <MX_GPIO_Init+0x25c>)
 8001720:	f000 fb2a 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001728:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_GPIO_Init+0x24c>)
 800173a:	f000 fb1d 	bl	8001d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3730      	adds	r7, #48	; 0x30
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40021000 	.word	0x40021000
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_MspInit+0x4c>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x4c>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017aa:	2007      	movs	r0, #7
 80017ac:	f000 faa2 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_SPI_MspInit+0x84>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12b      	bne.n	8001836 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_SPI_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_SPI_MspInit+0x88>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_SPI_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001816:	23e0      	movs	r3, #224	; 0xe0
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_SPI_MspInit+0x8c>)
 8001832:	f000 faa1 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40013000 	.word	0x40013000
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	; (80018d0 <HAL_UART_MspInit+0x84>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12b      	bne.n	80018c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0x88>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_UART_MspInit+0x88>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0x88>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_UART_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_UART_MspInit+0x88>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_UART_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a6:	2304      	movs	r3, #4
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018aa:	2312      	movs	r3, #18
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b6:	2307      	movs	r3, #7
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <HAL_UART_MspInit+0x8c>)
 80018c2:	f000 fa59 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020000 	.word	0x40020000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f8d0 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <OTG_FS_IRQHandler+0x10>)
 8001936:	f000 feb5 	bl	80026a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200005dc 	.word	0x200005dc

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f007 fbd2 	bl	800911c <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20020000 	.word	0x20020000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	200001f8 	.word	0x200001f8
 80019ac:	20000b08 	.word	0x20000b08

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d8:	f7ff ffea 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	; (8001a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	; (8001a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a02:	f007 fb91 	bl	8009128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff fb03 	bl	8001010 <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001a18:	080098b0 	.word	0x080098b0
  ldr r2, =_sbss
 8001a1c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001a20:	20000b04 	.word	0x20000b04

08001a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_Init+0x40>)
 8001a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_Init+0x40>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x40>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f94f 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fe86 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f967 	bl	8001d5e <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f92f 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	2000002c 	.word	0x2000002c
 8001ac4:	20000034 	.word	0x20000034
 8001ac8:	20000030 	.word	0x20000030

08001acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000034 	.word	0x20000034
 8001af0:	200001fc 	.word	0x200001fc

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200001fc 	.word	0x200001fc

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000034 	.word	0x20000034

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f7ff ff8e 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff29 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff3e 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff8e 	bl	8001c48 <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5d 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff31 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e16b      	b.n	800206c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 815a 	bne.w	8002066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d005      	beq.n	8001dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d130      	bne.n	8001e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d017      	beq.n	8001e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80b4 	beq.w	8002066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_GPIO_Init+0x30c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a5f      	ldr	r2, [pc, #380]	; (8002084 <HAL_GPIO_Init+0x30c>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_GPIO_Init+0x30c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1a:	4a5b      	ldr	r2, [pc, #364]	; (8002088 <HAL_GPIO_Init+0x310>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_GPIO_Init+0x314>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02b      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_GPIO_Init+0x318>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d025      	beq.n	8001f9a <HAL_GPIO_Init+0x222>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_GPIO_Init+0x31c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01f      	beq.n	8001f96 <HAL_GPIO_Init+0x21e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_GPIO_Init+0x320>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d019      	beq.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_GPIO_Init+0x324>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x216>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4d      	ldr	r2, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x328>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x212>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x32c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x20e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_GPIO_Init+0x330>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x20a>
 8001f7e:	2307      	movs	r3, #7
 8001f80:	e00e      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f82:	2308      	movs	r3, #8
 8001f84:	e00c      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f86:	2306      	movs	r3, #6
 8001f88:	e00a      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	e008      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f8e:	2304      	movs	r3, #4
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f92:	2303      	movs	r3, #3
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x310>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a32      	ldr	r2, [pc, #200]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_GPIO_Init+0x334>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_GPIO_Init+0x334>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_GPIO_Init+0x334>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_GPIO_Init+0x334>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_GPIO_Init+0x334>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <HAL_GPIO_Init+0x334>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	f67f ae90 	bls.w	8001d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40021000 	.word	0x40021000
 80020a0:	40021400 	.word	0x40021400
 80020a4:	40021800 	.word	0x40021800
 80020a8:	40021c00 	.word	0x40021c00
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af02      	add	r7, sp, #8
 80020e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e059      	b.n	80021a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 fc92 	bl	8008a38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d102      	bne.n	800212a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa9b 	bl	800566a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7c1a      	ldrb	r2, [r3, #16]
 800213c:	f88d 2000 	strb.w	r2, [sp]
 8002140:	3304      	adds	r3, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	f003 fa1c 	bl	8005580 <USB_CoreInit>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e026      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fa93 	bl	800568c <USB_SetCurrentMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e017      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7c1a      	ldrb	r2, [r3, #16]
 8002180:	f88d 2000 	strb.w	r2, [sp]
 8002184:	3304      	adds	r3, #4
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	f003 fc36 	bl	80059f8 <USB_HostInit>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e004      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	70fb      	strb	r3, [r7, #3]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70bb      	strb	r3, [r7, #2]
 80021c6:	4613      	mov	r3, r2
 80021c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_HCD_HC_Init+0x2c>
 80021d8:	2302      	movs	r3, #2
 80021da:	e09d      	b.n	8002318 <HAL_HCD_HC_Init+0x168>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3319      	adds	r3, #25
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3314      	adds	r3, #20
 8002208:	787a      	ldrb	r2, [r7, #1]
 800220a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3315      	adds	r3, #21
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3326      	adds	r3, #38	; 0x26
 8002230:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002234:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	78bb      	ldrb	r3, [r7, #2]
 800223a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3316      	adds	r3, #22
 800224e:	4602      	mov	r2, r0
 8002250:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fbc8 	bl	80029ec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800225c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da0a      	bge.n	800227a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3317      	adds	r3, #23
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e009      	b.n	800228e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3317      	adds	r3, #23
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fd14 	bl	8005cc0 <USB_GetHostSpeed>
 8002298:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800229a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2bbc      	cmp	r3, #188	; 0xbc
 80022b4:	d901      	bls.n	80022ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80022b6:	23bc      	movs	r3, #188	; 0xbc
 80022b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3318      	adds	r3, #24
 80022ca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	b298      	uxth	r0, r3
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3328      	adds	r3, #40	; 0x28
 80022e4:	4602      	mov	r2, r0
 80022e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	787c      	ldrb	r4, [r7, #1]
 80022f2:	78ba      	ldrb	r2, [r7, #2]
 80022f4:	78f9      	ldrb	r1, [r7, #3]
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4623      	mov	r3, r4
 8002306:	f003 fd03 	bl	8005d10 <USB_HC_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_HCD_HC_Halt+0x1e>
 800233a:	2302      	movs	r3, #2
 800233c:	e00f      	b.n	800235e <HAL_HCD_HC_Halt+0x3e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f004 f895 	bl	800647e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	460b      	mov	r3, r1
 800237c:	70bb      	strb	r3, [r7, #2]
 800237e:	4613      	mov	r3, r2
 8002380:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3317      	adds	r3, #23
 8002392:	78ba      	ldrb	r2, [r7, #2]
 8002394:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3326      	adds	r3, #38	; 0x26
 80023a6:	787a      	ldrb	r2, [r7, #1]
 80023a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023aa:	7c3b      	ldrb	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d114      	bne.n	80023da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	332a      	adds	r3, #42	; 0x2a
 80023c0:	2203      	movs	r2, #3
 80023c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3319      	adds	r3, #25
 80023d4:	7f3a      	ldrb	r2, [r7, #28]
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e009      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	332a      	adds	r3, #42	; 0x2a
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023ee:	787b      	ldrb	r3, [r7, #1]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	f200 8102 	bhi.w	80025fa <HAL_HCD_HC_SubmitRequest+0x292>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	080025e5 	.word	0x080025e5
 8002404:	080024d1 	.word	0x080024d1
 8002408:	0800255b 	.word	0x0800255b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800240c:	7c3b      	ldrb	r3, [r7, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 80f5 	bne.w	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002414:	78bb      	ldrb	r3, [r7, #2]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12d      	bne.n	8002476 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800241a:	8b3b      	ldrh	r3, [r7, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	333d      	adds	r3, #61	; 0x3d
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	333d      	adds	r3, #61	; 0x3d
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	332a      	adds	r3, #42	; 0x2a
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800245e:	e0ce      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	332a      	adds	r3, #42	; 0x2a
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	e0c3      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	331a      	adds	r3, #26
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 80b8 	bne.w	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333c      	adds	r3, #60	; 0x3c
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	332a      	adds	r3, #42	; 0x2a
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
      break;
 80024b8:	e0a1      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	332a      	adds	r3, #42	; 0x2a
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e096      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024d0:	78bb      	ldrb	r3, [r7, #2]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d120      	bne.n	8002518 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	333d      	adds	r3, #61	; 0x3d
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	332a      	adds	r3, #42	; 0x2a
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002500:	e07e      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	332a      	adds	r3, #42	; 0x2a
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
      break;
 8002516:	e073      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	332a      	adds	r3, #42	; 0x2a
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
      break;
 8002542:	e05d      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	332a      	adds	r3, #42	; 0x2a
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
      break;
 8002558:	e052      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d120      	bne.n	80025a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	333d      	adds	r3, #61	; 0x3d
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	332a      	adds	r3, #42	; 0x2a
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800258a:	e039      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	332a      	adds	r3, #42	; 0x2a
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
      break;
 80025a0:	e02e      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	333c      	adds	r3, #60	; 0x3c
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	332a      	adds	r3, #42	; 0x2a
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
      break;
 80025cc:	e018      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	332a      	adds	r3, #42	; 0x2a
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
      break;
 80025e2:	e00d      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	332a      	adds	r3, #42	; 0x2a
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	332c      	adds	r3, #44	; 0x2c
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	8b39      	ldrh	r1, [r7, #24]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4403      	add	r3, r0
 8002624:	3334      	adds	r3, #52	; 0x34
 8002626:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334c      	adds	r3, #76	; 0x4c
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3338      	adds	r3, #56	; 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3315      	adds	r3, #21
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334d      	adds	r3, #77	; 0x4d
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3310      	adds	r3, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	1d19      	adds	r1, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	799b      	ldrb	r3, [r3, #6]
 8002692:	461a      	mov	r2, r3
 8002694:	f003 fc68 	bl	8005f68 <USB_HC_StartXfer>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f95c 	bl	8005978 <USB_GetMode>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f040 80fb 	bne.w	80028be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 f91f 	bl	8005910 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80f1 	beq.w	80028bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 f916 	bl	8005910 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ee:	d104      	bne.n	80026fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 f906 	bl	8005910 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270e:	d104      	bne.n	800271a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002718:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f8f6 	bl	8005910 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800272a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800272e:	d104      	bne.n	800273a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002738:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f8e6 	bl	8005910 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d103      	bne.n	8002756 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2202      	movs	r2, #2
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f8d8 	bl	8005910 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800276a:	d120      	bne.n	80027ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002774:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002786:	2110      	movs	r1, #16
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f002 ffcb 	bl	8005724 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800278e:	6938      	ldr	r0, [r7, #16]
 8002790:	f002 fffa 	bl	8005788 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7a5b      	ldrb	r3, [r3, #9]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d105      	bne.n	80027a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 f9ec 	bl	8005b80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f006 f9b5 	bl	8008b18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f8ac 	bl	8005910 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c2:	d102      	bne.n	80027ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 fd33 	bl	8004230 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 f89e 	bl	8005910 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d106      	bne.n	80027ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f006 f97e 	bl	8008ae0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2208      	movs	r2, #8
 80027ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 f88d 	bl	8005910 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002800:	d139      	bne.n	8002876 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fe28 	bl	800645c <USB_HC_ReadInterrupt>
 800280c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e025      	b.n	8002860 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d018      	beq.n	800285a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283e:	d106      	bne.n	800284e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f905 	bl	8002a56 <HCD_HC_IN_IRQHandler>
 800284c:	e005      	b.n	800285a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 ff67 	bl	8003728 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	461a      	mov	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4293      	cmp	r3, r2
 800286a:	d3d3      	bcc.n	8002814 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 f848 	bl	8005910 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d101      	bne.n	800288e <HAL_HCD_IRQHandler+0x1ea>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_HCD_IRQHandler+0x1ec>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d014      	beq.n	80028be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f001 fbe4 	bl	8004072 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0210 	orr.w	r2, r2, #16
 80028b8:	619a      	str	r2, [r3, #24]
 80028ba:	e000      	b.n	80028be <HAL_HCD_IRQHandler+0x21a>
      return;
 80028bc:	bf00      	nop
    }
  }
}
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_HCD_Start+0x16>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e013      	b.n	8002902 <HAL_HCD_Start+0x3e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 f9b0 	bl	8005c4e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fea8 	bl	8005648 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_HCD_Stop+0x16>
 800291c:	2302      	movs	r3, #2
 800291e:	e00d      	b.n	800293c <HAL_HCD_Stop+0x32>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 ff03 	bl	8006738 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f952 	bl	8005bfa <USB_ResetPort>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334c      	adds	r3, #76	; 0x4c
 800297c:	781b      	ldrb	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3338      	adds	r3, #56	; 0x38
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 f994 	bl	8005cee <USB_GetCurrentFrame>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 f96f 	bl	8005cc0 <USB_GetHostSpeed>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	331a      	adds	r3, #26
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	331b      	adds	r3, #27
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3325      	adds	r3, #37	; 0x25
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 ff5e 	bl	8005936 <USB_ReadChInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11a      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2304      	movs	r3, #4
 8002a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	334d      	adds	r3, #77	; 0x4d
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fce3 	bl	800647e <USB_HC_Halt>
 8002ab8:	e09e      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 ff37 	bl	8005936 <USB_ReadChInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d11b      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334d      	adds	r3, #77	; 0x4d
 8002af8:	2208      	movs	r2, #8
 8002afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fcba 	bl	800647e <USB_HC_Halt>
 8002b0a:	e075      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 ff0e 	bl	8005936 <USB_ReadChInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d11a      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	2308      	movs	r3, #8
 8002b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	334d      	adds	r3, #77	; 0x4d
 8002b46:	2206      	movs	r2, #6
 8002b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fc93 	bl	800647e <USB_HC_Halt>
 8002b58:	e04e      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fee7 	bl	8005936 <USB_ReadChInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b72:	d11b      	bne.n	8002bac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334d      	adds	r3, #77	; 0x4d
 8002b98:	2209      	movs	r2, #9
 8002b9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fc6a 	bl	800647e <USB_HC_Halt>
 8002baa:	e025      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 febe 	bl	8005936 <USB_ReadChInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d119      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	334d      	adds	r3, #77	; 0x4d
 8002be6:	2207      	movs	r2, #7
 8002be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fc43 	bl	800647e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 fe98 	bl	8005936 <USB_ReadChInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d112      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fc2f 	bl	800647e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	f000 bd75 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fe78 	bl	8005936 <USB_ReadChInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 8128 	bne.w	8002ea2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2320      	movs	r3, #32
 8002c62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	331b      	adds	r3, #27
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d119      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	331b      	adds	r3, #27
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	799b      	ldrb	r3, [r3, #6]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01b      	beq.n	8002cee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3330      	adds	r3, #48	; 0x30
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	1ac9      	subs	r1, r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4403      	add	r3, r0
 8002cea:	3338      	adds	r3, #56	; 0x38
 8002cec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334d      	adds	r3, #77	; 0x4d
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	; 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	2301      	movs	r3, #1
 8002d26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3326      	adds	r3, #38	; 0x26
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3326      	adds	r3, #38	; 0x26
 8002d4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d110      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fb8e 	bl	800647e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2310      	movs	r3, #16
 8002d72:	6093      	str	r3, [r2, #8]
 8002d74:	e03d      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3326      	adds	r3, #38	; 0x26
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d00a      	beq.n	8002da2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3326      	adds	r3, #38	; 0x26
 8002d9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d127      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dc0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	334c      	adds	r3, #76	; 0x4c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334c      	adds	r3, #76	; 0x4c
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	4619      	mov	r1, r3
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f005 fea1 	bl	8008b34 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	799b      	ldrb	r3, [r3, #6]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d13b      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3338      	adds	r3, #56	; 0x38
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4403      	add	r3, r0
 8002e1a:	3328      	adds	r3, #40	; 0x28
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	440b      	add	r3, r1
 8002e20:	1e59      	subs	r1, r3, #1
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4403      	add	r3, r0
 8002e30:	3328      	adds	r3, #40	; 0x28
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8470 	beq.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	333c      	adds	r3, #60	; 0x3c
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	333c      	adds	r3, #60	; 0x3c
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	f000 bc58 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	333c      	adds	r3, #60	; 0x3c
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	333c      	adds	r3, #60	; 0x3c
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	f000 bc40 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fd43 	bl	8005936 <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d131      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2320      	movs	r3, #32
 8002eca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	331a      	adds	r3, #26
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 841f 	bne.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	331b      	adds	r3, #27
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	; 0x4d
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fab2 	bl	800647e <USB_HC_Halt>
 8002f1a:	f000 bc02 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fd05 	bl	8005936 <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 8305 	bne.w	8003542 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2302      	movs	r3, #2
 8002f48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	; 0x4d
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d114      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	; 0x4d
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334c      	adds	r3, #76	; 0x4c
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e2cc      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	; 0x4d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d114      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	; 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	; 0x4c
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e2ac      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	; 0x4d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d00b      	beq.n	8002ff8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	; 0x4d
 8002ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	f040 80a6 	bne.w	8003144 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334d      	adds	r3, #77	; 0x4d
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3344      	adds	r3, #68	; 0x44
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	3344      	adds	r3, #68	; 0x44
 800302e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3344      	adds	r3, #68	; 0x44
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d943      	bls.n	80030ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	; 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	331a      	adds	r3, #26
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	331b      	adds	r3, #27
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331c      	adds	r3, #28
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	334c      	adds	r3, #76	; 0x4c
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030cc:	e229      	b.n	8003522 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	; 0x4c
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3326      	adds	r3, #38	; 0x26
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3326      	adds	r3, #38	; 0x26
 8003108:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800310a:	2b02      	cmp	r3, #2
 800310c:	f040 8209 	bne.w	8003522 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003126:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800312e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003142:	e1ee      	b.n	8003522 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	; 0x4d
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b05      	cmp	r3, #5
 8003158:	f040 80c8 	bne.w	80032ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	; 0x4d
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	331b      	adds	r3, #27
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 81ce 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d16b      	bne.n	8003276 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3348      	adds	r3, #72	; 0x48
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4403      	add	r3, r0
 80031be:	3348      	adds	r3, #72	; 0x48
 80031c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3348      	adds	r3, #72	; 0x48
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d943      	bls.n	8003260 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	331b      	adds	r3, #27
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	; 0x44
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d809      	bhi.n	800322a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331c      	adds	r3, #28
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003248:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	; 0x4c
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e014      	b.n	800328a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334c      	adds	r3, #76	; 0x4c
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e009      	b.n	800328a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334c      	adds	r3, #76	; 0x4c
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3326      	adds	r3, #38	; 0x26
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3326      	adds	r3, #38	; 0x26
 80032b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f040 8136 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e11b      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	; 0x4d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	f040 8081 	bne.w	8003406 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	; 0x4d
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	331b      	adds	r3, #27
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 80fa 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	; 0x4c
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	0151      	lsls	r1, r2, #5
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	440a      	add	r2, r1
 800335a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003382:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	440a      	add	r2, r1
 800339a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3326      	adds	r3, #38	; 0x26
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3326      	adds	r3, #38	; 0x26
 80033ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 80a9 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e08e      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334d      	adds	r3, #77	; 0x4d
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d143      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	334d      	adds	r3, #77	; 0x4d
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334c      	adds	r3, #76	; 0x4c
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3326      	adds	r3, #38	; 0x26
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3326      	adds	r3, #38	; 0x26
 800346a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346c:	2b02      	cmp	r3, #2
 800346e:	d159      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003486:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800348e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e03f      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	; 0x4d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d126      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334d      	adds	r3, #77	; 0x4d
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	; 0x44
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4403      	add	r3, r0
 80034ee:	3344      	adds	r3, #68	; 0x44
 80034f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	; 0x4c
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e00d      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	; 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	f000 8100 	beq.w	8003720 <HCD_HC_IN_IRQHandler+0xcca>
 8003520:	e000      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003522:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334c      	adds	r3, #76	; 0x4c
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f005 fafa 	bl	8008b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003540:	e0ef      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f002 f9f3 	bl	8005936 <USB_ReadChInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d12f      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	334d      	adds	r3, #77	; 0x4d
 800357c:	2205      	movs	r2, #5
 800357e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	331a      	adds	r3, #26
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3344      	adds	r3, #68	; 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 ff63 	bl	800647e <USB_HC_Halt>
 80035b8:	e0b3      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 f9b7 	bl	8005936 <USB_ReadChInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	f040 80a7 	bne.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3326      	adds	r3, #38	; 0x26
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d11b      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3344      	adds	r3, #68	; 0x44
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	; 0x4d
 800360e:	2204      	movs	r2, #4
 8003610:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f002 ff2f 	bl	800647e <USB_HC_Halt>
 8003620:	e03f      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3326      	adds	r3, #38	; 0x26
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3326      	adds	r3, #38	; 0x26
 8003648:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800364a:	2b02      	cmp	r3, #2
 800364c:	d129      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3344      	adds	r3, #68	; 0x44
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HCD_HC_IN_IRQHandler+0xc2a>
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	331b      	adds	r3, #27
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	; 0x4d
 8003690:	2204      	movs	r2, #4
 8003692:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f002 feee 	bl	800647e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	331b      	adds	r3, #27
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d129      	bne.n	800370c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	331b      	adds	r3, #27
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	440a      	add	r2, r1
 8003702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003706:	f043 0320 	orr.w	r3, r3, #32
 800370a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	461a      	mov	r2, r3
 800371a:	2310      	movs	r3, #16
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e000      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003720:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 f8f5 	bl	8005936 <USB_ReadChInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d11b      	bne.n	800378e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2304      	movs	r3, #4
 8003766:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334d      	adds	r3, #77	; 0x4d
 8003778:	2207      	movs	r2, #7
 800377a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f002 fe7a 	bl	800647e <USB_HC_Halt>
 800378a:	f000 bc6f 	b.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f002 f8cd 	bl	8005936 <USB_ReadChInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	f040 8082 	bne.w	80038ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2320      	movs	r3, #32
 80037b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3319      	adds	r3, #25
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d124      	bne.n	800381a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3319      	adds	r3, #25
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334c      	adds	r3, #76	; 0x4c
 80037f4:	2202      	movs	r2, #2
 80037f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334d      	adds	r3, #77	; 0x4d
 8003808:	2203      	movs	r2, #3
 800380a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f002 fe32 	bl	800647e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331a      	adds	r3, #26
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 841d 	bne.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	331b      	adds	r3, #27
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8411 	bne.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	; 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d009      	beq.n	8003874 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	331b      	adds	r3, #27
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	334d      	adds	r3, #77	; 0x4d
 8003884:	2203      	movs	r2, #3
 8003886:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f002 fdf4 	bl	800647e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3344      	adds	r3, #68	; 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e3df      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 f83e 	bl	8005936 <USB_ReadChInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c4:	d111      	bne.n	80038ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fdcb 	bl	800647e <USB_HC_Halt>
 80038e8:	e3c0      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 f81f 	bl	8005936 <USB_ReadChInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d168      	bne.n	80039d4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3344      	adds	r3, #68	; 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f002 f809 	bl	8005936 <USB_ReadChInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d112      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3319      	adds	r3, #25
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2340      	movs	r3, #64	; 0x40
 8003952:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	331b      	adds	r3, #27
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	331b      	adds	r3, #27
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2301      	movs	r3, #1
 80039ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	; 0x4d
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fd56 	bl	800647e <USB_HC_Halt>
 80039d2:	e34b      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 ffaa 	bl	8005936 <USB_ReadChInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d139      	bne.n	8003a60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334d      	adds	r3, #77	; 0x4d
 80039fc:	2205      	movs	r2, #5
 80039fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	331a      	adds	r3, #26
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3319      	adds	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3344      	adds	r3, #68	; 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 fd19 	bl	800647e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	e305      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 ff64 	bl	8005936 <USB_ReadChInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d11a      	bne.n	8003aae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	2308      	movs	r3, #8
 8003a88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	; 0x4d
 8003a9a:	2206      	movs	r2, #6
 8003a9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f002 fce9 	bl	800647e <USB_HC_Halt>
 8003aac:	e2de      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 ff3d 	bl	8005936 <USB_ReadChInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d144      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	; 0x4d
 8003aea:	2204      	movs	r2, #4
 8003aec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3319      	adds	r3, #25
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d114      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3318      	adds	r3, #24
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	3319      	adds	r3, #25
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fca1 	bl	800647e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	6093      	str	r3, [r2, #8]
 8003b4e:	e28d      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 feec 	bl	8005936 <USB_ReadChInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d169      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	799b      	ldrb	r3, [r3, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334d      	adds	r3, #77	; 0x4d
 8003b80:	2207      	movs	r2, #7
 8003b82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f002 fc76 	bl	800647e <USB_HC_Halt>
 8003b92:	e049      	b.n	8003c28 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3344      	adds	r3, #68	; 0x44
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	3344      	adds	r3, #68	; 0x44
 8003bb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	; 0x44
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d922      	bls.n	8003c14 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3344      	adds	r3, #68	; 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334c      	adds	r3, #76	; 0x4c
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	334c      	adds	r3, #76	; 0x4c
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f004 ff91 	bl	8008b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c12:	e009      	b.n	8003c28 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334c      	adds	r3, #76	; 0x4c
 8003c24:	2202      	movs	r2, #2
 8003c26:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	6093      	str	r3, [r2, #8]
 8003c3a:	e217      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fe76 	bl	8005936 <USB_ReadChInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d11b      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	; 0x4d
 8003c66:	2209      	movs	r2, #9
 8003c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 fc03 	bl	800647e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8a:	6093      	str	r3, [r2, #8]
 8003c8c:	e1ee      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fe4d 	bl	8005936 <USB_ReadChInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	f040 81df 	bne.w	8004066 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334d      	adds	r3, #77	; 0x4d
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 8093 	bne.w	8003df8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	; 0x4d
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	334c      	adds	r3, #76	; 0x4c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3326      	adds	r3, #38	; 0x26
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d00b      	beq.n	8003d28 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3326      	adds	r3, #38	; 0x26
 8003d20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f040 8190 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	799b      	ldrb	r3, [r3, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d115      	bne.n	8003d5c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	333d      	adds	r3, #61	; 0x3d
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	f083 0301 	eor.w	r3, r3, #1
 8003d48:	b2d8      	uxtb	r0, r3
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	333d      	adds	r3, #61	; 0x3d
 8003d58:	4602      	mov	r2, r0
 8003d5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	799b      	ldrb	r3, [r3, #6]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 8171 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3334      	adds	r3, #52	; 0x34
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8165 	beq.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3334      	adds	r3, #52	; 0x34
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	3328      	adds	r3, #40	; 0x28
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	440b      	add	r3, r1
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	3328      	adds	r3, #40	; 0x28
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 813f 	beq.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	333d      	adds	r3, #61	; 0x3d
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	333d      	adds	r3, #61	; 0x3d
 8003df2:	4602      	mov	r2, r0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e127      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	; 0x4d
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d120      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334d      	adds	r3, #77	; 0x4d
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	331b      	adds	r3, #27
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 8107 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	; 0x4c
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e0fb      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334d      	adds	r3, #77	; 0x4d
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d13a      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334d      	adds	r3, #77	; 0x4d
 8003e76:	2202      	movs	r2, #2
 8003e78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	; 0x4c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	331b      	adds	r3, #27
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 80d1 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	331b      	adds	r3, #27
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed8:	6053      	str	r3, [r2, #4]
 8003eda:	e0b5      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334d      	adds	r3, #77	; 0x4d
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d114      	bne.n	8003f1c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334d      	adds	r3, #77	; 0x4d
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	334c      	adds	r3, #76	; 0x4c
 8003f16:	2202      	movs	r2, #2
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e095      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	334d      	adds	r3, #77	; 0x4d
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d114      	bne.n	8003f5c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	334d      	adds	r3, #77	; 0x4d
 8003f42:	2202      	movs	r2, #2
 8003f44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	334c      	adds	r3, #76	; 0x4c
 8003f56:	2205      	movs	r2, #5
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e075      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	334d      	adds	r3, #77	; 0x4d
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b07      	cmp	r3, #7
 8003f70:	d00a      	beq.n	8003f88 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334d      	adds	r3, #77	; 0x4d
 8003f82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d170      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334d      	adds	r3, #77	; 0x4d
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3344      	adds	r3, #68	; 0x44
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4403      	add	r3, r0
 8003fbc:	3344      	adds	r3, #68	; 0x44
 8003fbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3344      	adds	r3, #68	; 0x44
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d914      	bls.n	8004000 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3344      	adds	r3, #68	; 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	; 0x4c
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffe:	e022      	b.n	8004046 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334c      	adds	r3, #76	; 0x4c
 8004010:	2202      	movs	r2, #2
 8004012:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800402a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004032:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004046:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334c      	adds	r3, #76	; 0x4c
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f004 fd68 	bl	8008b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004064:	e002      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800406a:	bf00      	nop
  }
}
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	0c5b      	lsrs	r3, r3, #17
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d004      	beq.n	80040b8 <HCD_RXQLVL_IRQHandler+0x46>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	f000 80b6 	beq.w	8004222 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040b6:	e0b7      	b.n	8004228 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80b3 	beq.w	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	332c      	adds	r3, #44	; 0x2c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a7 	beq.w	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	18d1      	adds	r1, r2, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	3334      	adds	r3, #52	; 0x34
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4299      	cmp	r1, r3
 8004102:	f200 8083 	bhi.w	800420c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	332c      	adds	r3, #44	; 0x2c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	b292      	uxth	r2, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f001 fb9d 	bl	8005860 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	332c      	adds	r3, #44	; 0x2c
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	18d1      	adds	r1, r2, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	332c      	adds	r3, #44	; 0x2c
 800414c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3338      	adds	r3, #56	; 0x38
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	18d1      	adds	r1, r2, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4403      	add	r3, r0
 8004172:	3338      	adds	r3, #56	; 0x38
 8004174:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	0cdb      	lsrs	r3, r3, #19
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3328      	adds	r3, #40	; 0x28
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d13f      	bne.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03c      	beq.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	333c      	adds	r3, #60	; 0x3c
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f083 0301 	eor.w	r3, r3, #1
 80041f4:	b2d8      	uxtb	r0, r3
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	333c      	adds	r3, #60	; 0x3c
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e00c      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	334c      	adds	r3, #76	; 0x4c
 800421c:	2204      	movs	r2, #4
 800421e:	701a      	strb	r2, [r3, #0]
      break;
 8004220:	e001      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004226:	bf00      	nop
  }
}
 8004228:	bf00      	nop
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800425c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d10b      	bne.n	8004280 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f004 fc42 	bl	8008afc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b08      	cmp	r3, #8
 8004288:	d132      	bne.n	80042f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d126      	bne.n	80042ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7a5b      	ldrb	r3, [r3, #9]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d113      	bne.n	80042cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ae:	d106      	bne.n	80042be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 fc62 	bl	8005b80 <USB_InitFSLSPClkSel>
 80042bc:	e011      	b.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fc5b 	bl	8005b80 <USB_InitFSLSPClkSel>
 80042ca:	e00a      	b.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	79db      	ldrb	r3, [r3, #7]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042da:	461a      	mov	r2, r3
 80042dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f004 fc34 	bl	8008b50 <HAL_HCD_PortEnabled_Callback>
 80042e8:	e002      	b.n	80042f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f004 fc3e 	bl	8008b6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d103      	bne.n	8004302 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f043 0320 	orr.w	r3, r3, #32
 8004300:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6013      	str	r3, [r2, #0]
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e267      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d075      	beq.n	8004422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004336:	4b88      	ldr	r3, [pc, #544]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d00c      	beq.n	800435c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004342:	4b85      	ldr	r3, [pc, #532]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434a:	2b08      	cmp	r3, #8
 800434c:	d112      	bne.n	8004374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b82      	ldr	r3, [pc, #520]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435a:	d10b      	bne.n	8004374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	4b7e      	ldr	r3, [pc, #504]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05b      	beq.n	8004420 <HAL_RCC_OscConfig+0x108>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d157      	bne.n	8004420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e242      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x74>
 800437e:	4b76      	ldr	r3, [pc, #472]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a75      	ldr	r2, [pc, #468]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x98>
 8004396:	4b70      	ldr	r3, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6f      	ldr	r2, [pc, #444]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b6d      	ldr	r3, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6c      	ldr	r2, [pc, #432]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 80043b0:	4b69      	ldr	r3, [pc, #420]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a68      	ldr	r2, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fd fb90 	bl	8001af4 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd fb8c 	bl	8001af4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e207      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b5b      	ldr	r3, [pc, #364]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xc0>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fb7c 	bl	8001af4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fb78 	bl	8001af4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1f3      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	4b51      	ldr	r3, [pc, #324]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0xe8>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d063      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442e:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b47      	ldr	r3, [pc, #284]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d11c      	bne.n	8004480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b44      	ldr	r3, [pc, #272]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004452:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x152>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e1c7      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4937      	ldr	r1, [pc, #220]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	e03a      	b.n	80044f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004488:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x244>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fb31 	bl	8001af4 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004496:	f7fd fb2d 	bl	8001af4 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e1a8      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4925      	ldr	r1, [pc, #148]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]
 80044c8:	e015      	b.n	80044f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x244>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fb10 	bl	8001af4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fd fb0c 	bl	8001af4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e187      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d036      	beq.n	8004570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <HAL_RCC_OscConfig+0x248>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fd faf0 	bl	8001af4 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004518:	f7fd faec 	bl	8001af4 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e167      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_RCC_OscConfig+0x240>)
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x200>
 8004536:	e01b      	b.n	8004570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_RCC_OscConfig+0x248>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fd fad9 	bl	8001af4 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004544:	e00e      	b.n	8004564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004546:	f7fd fad5 	bl	8001af4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d907      	bls.n	8004564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e150      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
 8004558:	40023800 	.word	0x40023800
 800455c:	42470000 	.word	0x42470000
 8004560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	4b88      	ldr	r3, [pc, #544]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ea      	bne.n	8004546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8097 	beq.w	80046ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004582:	4b81      	ldr	r3, [pc, #516]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	4b7d      	ldr	r3, [pc, #500]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a7c      	ldr	r2, [pc, #496]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b7a      	ldr	r3, [pc, #488]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	4b77      	ldr	r3, [pc, #476]	; (800478c <HAL_RCC_OscConfig+0x474>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d118      	bne.n	80045ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ba:	4b74      	ldr	r3, [pc, #464]	; (800478c <HAL_RCC_OscConfig+0x474>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a73      	ldr	r2, [pc, #460]	; (800478c <HAL_RCC_OscConfig+0x474>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c6:	f7fd fa95 	bl	8001af4 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fd fa91 	bl	8001af4 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e10c      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_RCC_OscConfig+0x474>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x2ea>
 80045f4:	4b64      	ldr	r3, [pc, #400]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a63      	ldr	r2, [pc, #396]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	e01c      	b.n	800463c <HAL_RCC_OscConfig+0x324>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x30c>
 800460a:	4b5f      	ldr	r3, [pc, #380]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4a5e      	ldr	r2, [pc, #376]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	6713      	str	r3, [r2, #112]	; 0x70
 8004616:	4b5c      	ldr	r3, [pc, #368]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	4a5b      	ldr	r2, [pc, #364]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0x324>
 8004624:	4b58      	ldr	r3, [pc, #352]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a57      	ldr	r2, [pc, #348]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	4b55      	ldr	r3, [pc, #340]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a54      	ldr	r2, [pc, #336]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 0304 	bic.w	r3, r3, #4
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd fa56 	bl	8001af4 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fd fa52 	bl	8001af4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0cb      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004662:	4b49      	ldr	r3, [pc, #292]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ee      	beq.n	800464c <HAL_RCC_OscConfig+0x334>
 800466e:	e014      	b.n	800469a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004670:	f7fd fa40 	bl	8001af4 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fa3c 	bl	8001af4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0b5      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468e:	4b3e      	ldr	r3, [pc, #248]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ee      	bne.n	8004678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a0:	4b39      	ldr	r3, [pc, #228]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	4a38      	ldr	r2, [pc, #224]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a1 	beq.w	80047f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b6:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d05c      	beq.n	800477c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d141      	bne.n	800474e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <HAL_RCC_OscConfig+0x478>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fd fa10 	bl	8001af4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd fa0c 	bl	8001af4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e087      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	3b01      	subs	r3, #1
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	491b      	ldr	r1, [pc, #108]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCC_OscConfig+0x478>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7fd f9e5 	bl	8001af4 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472e:	f7fd f9e1 	bl	8001af4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e05c      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x416>
 800474c:	e054      	b.n	80047f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_OscConfig+0x478>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd f9ce 	bl	8001af4 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd f9ca 	bl	8001af4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e045      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCC_OscConfig+0x470>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x444>
 800477a:	e03d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e038      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
 8004788:	40023800 	.word	0x40023800
 800478c:	40007000 	.word	0x40007000
 8004790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_RCC_OscConfig+0x4ec>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d028      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d121      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d11a      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d111      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	3b01      	subs	r3, #1
 80047de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0cc      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b68      	ldr	r3, [pc, #416]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d90c      	bls.n	8004844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800487e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d044      	beq.n	8004928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d119      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e06f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e067      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4934      	ldr	r1, [pc, #208]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fd f8fc 	bl	8001af4 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fd f8f8 	bl	8001af4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 020c 	and.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1eb      	bne.n	8004900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d20c      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd f85c 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023c00 	.word	0x40023c00
 80049c4:	40023800 	.word	0x40023800
 80049c8:	08009838 	.word	0x08009838
 80049cc:	2000002c 	.word	0x2000002c
 80049d0:	20000030 	.word	0x20000030

080049d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d8:	b094      	sub	sp, #80	; 0x50
 80049da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
 80049e0:	2300      	movs	r3, #0
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	2300      	movs	r3, #0
 80049e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ec:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d00d      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x40>
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	f200 80e1 	bhi.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x34>
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a06:	e0db      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4b73      	ldr	r3, [pc, #460]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a0c:	e0db      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0e:	4b73      	ldr	r3, [pc, #460]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a12:	e0d8      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a14:	4b6f      	ldr	r3, [pc, #444]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1e:	4b6d      	ldr	r3, [pc, #436]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d063      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
 8004a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	0159      	lsls	r1, r3, #5
 8004a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a58:	0150      	lsls	r0, r2, #5
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4621      	mov	r1, r4
 8004a60:	1a51      	subs	r1, r2, r1
 8004a62:	6139      	str	r1, [r7, #16]
 8004a64:	4629      	mov	r1, r5
 8004a66:	eb63 0301 	sbc.w	r3, r3, r1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	018b      	lsls	r3, r1, #6
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a82:	4651      	mov	r1, sl
 8004a84:	018a      	lsls	r2, r1, #6
 8004a86:	4651      	mov	r1, sl
 8004a88:	ebb2 0801 	subs.w	r8, r2, r1
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa6:	4690      	mov	r8, r2
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	eb18 0303 	adds.w	r3, r8, r3
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	eb49 0303 	adc.w	r3, r9, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	024b      	lsls	r3, r1, #9
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	024a      	lsls	r2, r1, #9
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	2200      	movs	r2, #0
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae4:	f7fb fb70 	bl	80001c8 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af0:	e058      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af2:	4b38      	ldr	r3, [pc, #224]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	2200      	movs	r2, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	4611      	mov	r1, r2
 8004afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	2300      	movs	r3, #0
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	0159      	lsls	r1, r3, #5
 8004b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1e:	0150      	lsls	r0, r2, #5
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4641      	mov	r1, r8
 8004b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b44:	ebb2 040a 	subs.w	r4, r2, sl
 8004b48:	eb63 050b 	sbc.w	r5, r3, fp
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	00eb      	lsls	r3, r5, #3
 8004b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b5a:	00e2      	lsls	r2, r4, #3
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	18e3      	adds	r3, r4, r3
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	464b      	mov	r3, r9
 8004b68:	eb45 0303 	adc.w	r3, r5, r3
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	028b      	lsls	r3, r1, #10
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b84:	4621      	mov	r1, r4
 8004b86:	028a      	lsls	r2, r1, #10
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	2200      	movs	r2, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	61fa      	str	r2, [r7, #28]
 8004b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b98:	f7fb fb16 	bl	80001c8 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3750      	adds	r7, #80	; 0x50
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	007a1200 	.word	0x007a1200

08004be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000002c 	.word	0x2000002c

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bfc:	f7ff fff0 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08009848 	.word	0x08009848

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c24:	f7ff ffdc 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4903      	ldr	r1, [pc, #12]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40023800 	.word	0x40023800
 8004c44:	08009848 	.word	0x08009848

08004c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07b      	b.n	8004d52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d009      	beq.n	8004c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
 8004c72:	e005      	b.n	8004c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fd8e 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	ea42 0103 	orr.w	r1, r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0104 	and.w	r1, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0210 	and.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e04a      	b.n	8004e02 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fc fd63 	bl	800184c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2224      	movs	r2, #36	; 0x24
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f97a 	bl	8005098 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004dc2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d175      	bne.n	8004f16 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_UART_Transmit+0x2c>
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06e      	b.n	8004f18 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e48:	f7fc fe54 	bl	8001af4 <HAL_GetTick>
 8004e4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e62:	d108      	bne.n	8004e76 <HAL_UART_Transmit+0x6c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	e003      	b.n	8004e7e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e7e:	e02e      	b.n	8004ede <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f848 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e03a      	b.n	8004f18 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	3302      	adds	r3, #2
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	e007      	b.n	8004ed0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	781a      	ldrb	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1cb      	bne.n	8004e80 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f814 	bl	8004f20 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e006      	b.n	8004f18 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f30:	e03b      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d037      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fc fddb 	bl	8001af4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e03a      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d023      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b80      	cmp	r3, #128	; 0x80
 8004f66:	d020      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d01d      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d116      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f81d 	bl	8004fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0b4      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b095      	sub	sp, #84	; 0x54
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ffa:	643a      	str	r2, [r7, #64]	; 0x40
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e5      	bne.n	8004fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3314      	adds	r3, #20
 8005014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	61fb      	str	r3, [r7, #28]
   return(result);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	2b01      	cmp	r3, #1
 8005048:	d119      	bne.n	800507e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	60bb      	str	r3, [r7, #8]
   return(result);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0310 	bic.w	r3, r3, #16
 8005060:	647b      	str	r3, [r7, #68]	; 0x44
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506a:	61ba      	str	r2, [r7, #24]
 800506c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	613b      	str	r3, [r7, #16]
   return(result);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e5      	bne.n	800504a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800508c:	bf00      	nop
 800508e:	3754      	adds	r7, #84	; 0x54
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b0c0      	sub	sp, #256	; 0x100
 800509e:	af00      	add	r7, sp, #0
 80050a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	ea40 0301 	orr.w	r3, r0, r1
 80050c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050f0:	f021 010c 	bic.w	r1, r1, #12
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050fe:	430b      	orrs	r3, r1
 8005100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	6999      	ldr	r1, [r3, #24]
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	ea40 0301 	orr.w	r3, r0, r1
 800511e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b8f      	ldr	r3, [pc, #572]	; (8005364 <UART_SetConfig+0x2cc>)
 8005128:	429a      	cmp	r2, r3
 800512a:	d005      	beq.n	8005138 <UART_SetConfig+0xa0>
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b8d      	ldr	r3, [pc, #564]	; (8005368 <UART_SetConfig+0x2d0>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d104      	bne.n	8005142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7ff fd72 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 800513c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005140:	e003      	b.n	800514a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005142:	f7ff fd59 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 8005146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	f040 810c 	bne.w	8005370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800516a:	4622      	mov	r2, r4
 800516c:	462b      	mov	r3, r5
 800516e:	1891      	adds	r1, r2, r2
 8005170:	65b9      	str	r1, [r7, #88]	; 0x58
 8005172:	415b      	adcs	r3, r3
 8005174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800517a:	4621      	mov	r1, r4
 800517c:	eb12 0801 	adds.w	r8, r2, r1
 8005180:	4629      	mov	r1, r5
 8005182:	eb43 0901 	adc.w	r9, r3, r1
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800519a:	4690      	mov	r8, r2
 800519c:	4699      	mov	r9, r3
 800519e:	4623      	mov	r3, r4
 80051a0:	eb18 0303 	adds.w	r3, r8, r3
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb49 0303 	adc.w	r3, r9, r3
 80051ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051c6:	460b      	mov	r3, r1
 80051c8:	18db      	adds	r3, r3, r3
 80051ca:	653b      	str	r3, [r7, #80]	; 0x50
 80051cc:	4613      	mov	r3, r2
 80051ce:	eb42 0303 	adc.w	r3, r2, r3
 80051d2:	657b      	str	r3, [r7, #84]	; 0x54
 80051d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051dc:	f7fa fff4 	bl	80001c8 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b61      	ldr	r3, [pc, #388]	; (800536c <UART_SetConfig+0x2d4>)
 80051e6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	011c      	lsls	r4, r3, #4
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	64b9      	str	r1, [r7, #72]	; 0x48
 8005208:	415b      	adcs	r3, r3
 800520a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005210:	4641      	mov	r1, r8
 8005212:	eb12 0a01 	adds.w	sl, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb43 0b01 	adc.w	fp, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800522c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005230:	4692      	mov	sl, r2
 8005232:	469b      	mov	fp, r3
 8005234:	4643      	mov	r3, r8
 8005236:	eb1a 0303 	adds.w	r3, sl, r3
 800523a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800523e:	464b      	mov	r3, r9
 8005240:	eb4b 0303 	adc.w	r3, fp, r3
 8005244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800525c:	460b      	mov	r3, r1
 800525e:	18db      	adds	r3, r3, r3
 8005260:	643b      	str	r3, [r7, #64]	; 0x40
 8005262:	4613      	mov	r3, r2
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
 800526a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800526e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005272:	f7fa ffa9 	bl	80001c8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4611      	mov	r1, r2
 800527c:	4b3b      	ldr	r3, [pc, #236]	; (800536c <UART_SetConfig+0x2d4>)
 800527e:	fba3 2301 	umull	r2, r3, r3, r1
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2264      	movs	r2, #100	; 0x64
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	1acb      	subs	r3, r1, r3
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <UART_SetConfig+0x2d4>)
 8005294:	fba3 2302 	umull	r2, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052a0:	441c      	add	r4, r3
 80052a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80052bc:	415b      	adcs	r3, r3
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052c4:	4641      	mov	r1, r8
 80052c6:	1851      	adds	r1, r2, r1
 80052c8:	6339      	str	r1, [r7, #48]	; 0x30
 80052ca:	4649      	mov	r1, r9
 80052cc:	414b      	adcs	r3, r1
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052dc:	4659      	mov	r1, fp
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4651      	mov	r1, sl
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4642      	mov	r2, r8
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052f8:	464b      	mov	r3, r9
 80052fa:	460a      	mov	r2, r1
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005318:	460b      	mov	r3, r1
 800531a:	18db      	adds	r3, r3, r3
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
 800531e:	4613      	mov	r3, r2
 8005320:	eb42 0303 	adc.w	r3, r2, r3
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800532a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800532e:	f7fa ff4b 	bl	80001c8 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <UART_SetConfig+0x2d4>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	; 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	3332      	adds	r3, #50	; 0x32
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <UART_SetConfig+0x2d4>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 0207 	and.w	r2, r3, #7
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4422      	add	r2, r4
 800535e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005360:	e106      	b.n	8005570 <UART_SetConfig+0x4d8>
 8005362:	bf00      	nop
 8005364:	40011000 	.word	0x40011000
 8005368:	40011400 	.word	0x40011400
 800536c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800537a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800537e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005382:	4642      	mov	r2, r8
 8005384:	464b      	mov	r3, r9
 8005386:	1891      	adds	r1, r2, r2
 8005388:	6239      	str	r1, [r7, #32]
 800538a:	415b      	adcs	r3, r3
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005392:	4641      	mov	r1, r8
 8005394:	1854      	adds	r4, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb43 0501 	adc.w	r5, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	00eb      	lsls	r3, r5, #3
 80053a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053aa:	00e2      	lsls	r2, r4, #3
 80053ac:	4614      	mov	r4, r2
 80053ae:	461d      	mov	r5, r3
 80053b0:	4643      	mov	r3, r8
 80053b2:	18e3      	adds	r3, r4, r3
 80053b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b8:	464b      	mov	r3, r9
 80053ba:	eb45 0303 	adc.w	r3, r5, r3
 80053be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053de:	4629      	mov	r1, r5
 80053e0:	008b      	lsls	r3, r1, #2
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e8:	4621      	mov	r1, r4
 80053ea:	008a      	lsls	r2, r1, #2
 80053ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053f0:	f7fa feea 	bl	80001c8 <__aeabi_uldivmod>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4b60      	ldr	r3, [pc, #384]	; (800557c <UART_SetConfig+0x4e4>)
 80053fa:	fba3 2302 	umull	r2, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	011c      	lsls	r4, r3, #4
 8005402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800540c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	61b9      	str	r1, [r7, #24]
 800541c:	415b      	adcs	r3, r3
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6139      	str	r1, [r7, #16]
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005458:	464b      	mov	r3, r9
 800545a:	460a      	mov	r2, r1
 800545c:	eb42 0303 	adc.w	r3, r2, r3
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	67bb      	str	r3, [r7, #120]	; 0x78
 800546e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800547c:	4649      	mov	r1, r9
 800547e:	008b      	lsls	r3, r1, #2
 8005480:	4641      	mov	r1, r8
 8005482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005486:	4641      	mov	r1, r8
 8005488:	008a      	lsls	r2, r1, #2
 800548a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800548e:	f7fa fe9b 	bl	80001c8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4611      	mov	r1, r2
 8005498:	4b38      	ldr	r3, [pc, #224]	; (800557c <UART_SetConfig+0x4e4>)
 800549a:	fba3 2301 	umull	r2, r3, r3, r1
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2264      	movs	r2, #100	; 0x64
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	1acb      	subs	r3, r1, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a33      	ldr	r2, [pc, #204]	; (800557c <UART_SetConfig+0x4e4>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b8:	441c      	add	r4, r3
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	673b      	str	r3, [r7, #112]	; 0x70
 80054c2:	677a      	str	r2, [r7, #116]	; 0x74
 80054c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054c8:	4642      	mov	r2, r8
 80054ca:	464b      	mov	r3, r9
 80054cc:	1891      	adds	r1, r2, r2
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	415b      	adcs	r3, r3
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d8:	4641      	mov	r1, r8
 80054da:	1851      	adds	r1, r2, r1
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	4649      	mov	r1, r9
 80054e0:	414b      	adcs	r3, r1
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054f0:	4659      	mov	r1, fp
 80054f2:	00cb      	lsls	r3, r1, #3
 80054f4:	4651      	mov	r1, sl
 80054f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054fa:	4651      	mov	r1, sl
 80054fc:	00ca      	lsls	r2, r1, #3
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	4603      	mov	r3, r0
 8005504:	4642      	mov	r2, r8
 8005506:	189b      	adds	r3, r3, r2
 8005508:	66bb      	str	r3, [r7, #104]	; 0x68
 800550a:	464b      	mov	r3, r9
 800550c:	460a      	mov	r2, r1
 800550e:	eb42 0303 	adc.w	r3, r2, r3
 8005512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	663b      	str	r3, [r7, #96]	; 0x60
 800551e:	667a      	str	r2, [r7, #100]	; 0x64
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800552c:	4649      	mov	r1, r9
 800552e:	008b      	lsls	r3, r1, #2
 8005530:	4641      	mov	r1, r8
 8005532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005536:	4641      	mov	r1, r8
 8005538:	008a      	lsls	r2, r1, #2
 800553a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800553e:	f7fa fe43 	bl	80001c8 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <UART_SetConfig+0x4e4>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <UART_SetConfig+0x4e4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 020f 	and.w	r2, r3, #15
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4422      	add	r2, r4
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557c:	51eb851f 	.word	0x51eb851f

08005580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005580:	b084      	sub	sp, #16
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	f107 001c 	add.w	r0, r7, #28
 800558e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005592:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005596:	2b01      	cmp	r3, #1
 8005598:	d123      	bne.n	80055e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9dc 	bl	8005994 <USB_CoreReset>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]
 80055e0:	e01b      	b.n	800561a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9d0 	bl	8005994 <USB_CoreReset>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
 800560c:	e005      	b.n	800561a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800561a:	7fbb      	ldrb	r3, [r7, #30]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10b      	bne.n	8005638 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f043 0206 	orr.w	r2, r3, #6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005644:	b004      	add	sp, #16
 8005646:	4770      	bx	lr

08005648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d115      	bne.n	80056da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ba:	200a      	movs	r0, #10
 80056bc:	f7fc fa26 	bl	8001b0c <HAL_Delay>
      ms += 10U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	330a      	adds	r3, #10
 80056c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f956 	bl	8005978 <USB_GetMode>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d01e      	beq.n	8005710 <USB_SetCurrentMode+0x84>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2bc7      	cmp	r3, #199	; 0xc7
 80056d6:	d9f0      	bls.n	80056ba <USB_SetCurrentMode+0x2e>
 80056d8:	e01a      	b.n	8005710 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d115      	bne.n	800570c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ec:	200a      	movs	r0, #10
 80056ee:	f7fc fa0d 	bl	8001b0c <HAL_Delay>
      ms += 10U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	330a      	adds	r3, #10
 80056f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f93d 	bl	8005978 <USB_GetMode>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <USB_SetCurrentMode+0x84>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2bc7      	cmp	r3, #199	; 0xc7
 8005708:	d9f0      	bls.n	80056ec <USB_SetCurrentMode+0x60>
 800570a:	e001      	b.n	8005710 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e005      	b.n	800571c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2bc8      	cmp	r3, #200	; 0xc8
 8005714:	d101      	bne.n	800571a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800573e:	d901      	bls.n	8005744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e01b      	b.n	800577c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	daf2      	bge.n	8005732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005768:	d901      	bls.n	800576e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e006      	b.n	800577c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d0f0      	beq.n	800575c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057a0:	d901      	bls.n	80057a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e018      	b.n	80057d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	daf2      	bge.n	8005794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2210      	movs	r2, #16
 80057b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057c4:	d901      	bls.n	80057ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e006      	b.n	80057d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b10      	cmp	r3, #16
 80057d4:	d0f0      	beq.n	80057b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	; 0x24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	460b      	mov	r3, r1
 80057f4:	71fb      	strb	r3, [r7, #7]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d123      	bne.n	8005852 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800580a:	88bb      	ldrh	r3, [r7, #4]
 800580c:	3303      	adds	r3, #3
 800580e:	089b      	lsrs	r3, r3, #2
 8005810:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e018      	b.n	800584a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	031a      	lsls	r2, r3, #12
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	461a      	mov	r2, r3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3301      	adds	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3301      	adds	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	3301      	adds	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d3e2      	bcc.n	8005818 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3724      	adds	r7, #36	; 0x24
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005860:	b480      	push	{r7}
 8005862:	b08b      	sub	sp, #44	; 0x2c
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	b29b      	uxth	r3, r3
 800587c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	e014      	b.n	80058b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	601a      	str	r2, [r3, #0]
    pDest++;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	3301      	adds	r3, #1
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	3301      	adds	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	3301      	adds	r3, #1
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	3301      	adds	r3, #1
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	6a3a      	ldr	r2, [r7, #32]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3e6      	bcc.n	800588c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058be:	8bfb      	ldrh	r3, [r7, #30]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01e      	beq.n	8005902 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ce:	461a      	mov	r2, r3
 80058d0:	f107 0310 	add.w	r3, r7, #16
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	701a      	strb	r2, [r3, #0]
      i++;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	3301      	adds	r3, #1
 80058ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	3301      	adds	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058f6:	8bfb      	ldrh	r3, [r7, #30]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058fc:	8bfb      	ldrh	r3, [r7, #30]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1ea      	bne.n	80058d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005904:	4618      	mov	r0, r3
 8005906:	372c      	adds	r7, #44	; 0x2c
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800596a:	68bb      	ldr	r3, [r7, #8]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0301 	and.w	r3, r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059ac:	d901      	bls.n	80059b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e01b      	b.n	80059ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	daf2      	bge.n	80059a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059d6:	d901      	bls.n	80059dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d0f0      	beq.n	80059ca <USB_CoreReset+0x36>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059f8:	b084      	sub	sp, #16
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d119      	bne.n	8005a82 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10a      	bne.n	8005a6c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e014      	b.n	8005a96 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a7a:	f023 0304 	bic.w	r3, r3, #4
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e009      	b.n	8005a96 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a90:	f023 0304 	bic.w	r3, r3, #4
 8005a94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a96:	2110      	movs	r1, #16
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fe43 	bl	8005724 <USB_FlushTxFifo>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fe6d 	bl	8005788 <USB_FlushRxFifo>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	e015      	b.n	8005aea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005aee:	461a      	mov	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d3e3      	bcc.n	8005abe <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
 8005b02:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <USB_HostInit+0x170>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10b      	bne.n	8005b24 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <USB_HostInit+0x174>)
 8005b18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <USB_HostInit+0x178>)
 8005b1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b22:	e009      	b.n	8005b38 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <USB_HostInit+0x17c>)
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <USB_HostInit+0x180>)
 8005b34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f043 0210 	orr.w	r2, r3, #16
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <USB_HostInit+0x184>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b64:	b004      	add	sp, #16
 8005b66:	4770      	bx	lr
 8005b68:	40040000 	.word	0x40040000
 8005b6c:	01000200 	.word	0x01000200
 8005b70:	00e00300 	.word	0x00e00300
 8005b74:	00600080 	.word	0x00600080
 8005b78:	004000e0 	.word	0x004000e0
 8005b7c:	a3200008 	.word	0xa3200008

08005b80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bce:	6053      	str	r3, [r2, #4]
 8005bd0:	e00c      	b.n	8005bec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d107      	bne.n	8005be8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bde:	461a      	mov	r2, r3
 8005be0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	e001      	b.n	8005bec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c28:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c2a:	2064      	movs	r0, #100	; 0x64
 8005c2c:	f7fb ff6e 	bl	8001b0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c3e:	200a      	movs	r0, #10
 8005c40:	f7fb ff64 	bl	8001b0c <HAL_Delay>

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <USB_DriveVbus+0x44>
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d106      	bne.n	8005c92 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c90:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9c:	d109      	bne.n	8005cb2 <USB_DriveVbus+0x64>
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	0c5b      	lsrs	r3, r3, #17
 8005cde:	f003 0303 	and.w	r3, r3, #3
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	b29b      	uxth	r3, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	70fb      	strb	r3, [r7, #3]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70bb      	strb	r3, [r7, #2]
 8005d26:	4613      	mov	r3, r2
 8005d28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d87c      	bhi.n	8005e48 <USB_HC_Init+0x138>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <USB_HC_Init+0x44>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005e0b 	.word	0x08005e0b
 8005d5c:	08005d65 	.word	0x08005d65
 8005d60:	08005dcd 	.word	0x08005dcd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	461a      	mov	r2, r3
 8005d72:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da10      	bge.n	8005da2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005da0:	e055      	b.n	8005e4e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a6f      	ldr	r2, [pc, #444]	; (8005f64 <USB_HC_Init+0x254>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d151      	bne.n	8005e4e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	78fa      	ldrb	r2, [r7, #3]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dc8:	60d3      	str	r3, [r2, #12]
      break;
 8005dca:	e040      	b.n	8005e4e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f240 639d 	movw	r3, #1693	; 0x69d
 8005dde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da34      	bge.n	8005e52 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e08:	e023      	b.n	8005e52 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e16:	461a      	mov	r2, r3
 8005e18:	f240 2325 	movw	r3, #549	; 0x225
 8005e1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da17      	bge.n	8005e56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e46:	e006      	b.n	8005e56 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e4c:	e004      	b.n	8005e58 <USB_HC_Init+0x148>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e002      	b.n	8005e58 <USB_HC_Init+0x148>
      break;
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <USB_HC_Init+0x148>
      break;
 8005e56:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9e:	6939      	ldr	r1, [r7, #16]
 8005ea0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005eb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da03      	bge.n	8005ec4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e001      	b.n	8005ec8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fef9 	bl	8005cc0 <USB_GetHostSpeed>
 8005ece:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d106      	bne.n	8005ee6 <USB_HC_Init+0x1d6>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d003      	beq.n	8005ee6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e001      	b.n	8005eea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eea:	787b      	ldrb	r3, [r7, #1]
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ef2:	78bb      	ldrb	r3, [r7, #2]
 8005ef4:	02db      	lsls	r3, r3, #11
 8005ef6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005efa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005efc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f00:	049b      	lsls	r3, r3, #18
 8005f02:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f06:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005f08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f0e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f28:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d003      	beq.n	8005f3a <USB_HC_Init+0x22a>
 8005f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d10f      	bne.n	8005f5a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40040000 	.word	0x40040000

08005f68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	; 0x30
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f84:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <USB_HC_StartXfer+0x198>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d12f      	bne.n	8005fee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d11c      	bne.n	8005fce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7c9b      	ldrb	r3, [r3, #18]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <USB_HC_StartXfer+0x3c>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	7c9b      	ldrb	r3, [r3, #18]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d124      	bne.n	8005fee <USB_HC_StartXfer+0x86>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	799b      	ldrb	r3, [r3, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d120      	bne.n	8005fee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	6a3a      	ldr	r2, [r7, #32]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	60d3      	str	r3, [r2, #12]
 8005fcc:	e00f      	b.n	8005fee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	791b      	ldrb	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <USB_HC_StartXfer+0x86>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	795b      	ldrb	r3, [r3, #5]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d107      	bne.n	8005fee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fb6b 	bl	80066c0 <USB_DoPing>
        return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e232      	b.n	8006454 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	799b      	ldrb	r3, [r3, #6]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d158      	bne.n	80060a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	8a92      	ldrh	r2, [r2, #20]
 8006008:	fb03 f202 	mul.w	r2, r3, r2
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	61da      	str	r2, [r3, #28]
 8006010:	e07c      	b.n	800610c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	7c9b      	ldrb	r3, [r3, #18]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d130      	bne.n	800607c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	2bbc      	cmp	r3, #188	; 0xbc
 8006020:	d918      	bls.n	8006054 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	8a9b      	ldrh	r3, [r3, #20]
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d003      	beq.n	8006044 <USB_HC_StartXfer+0xdc>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d103      	bne.n	800604c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2202      	movs	r2, #2
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e05f      	b.n	800610c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2201      	movs	r2, #1
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e05b      	b.n	800610c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d007      	beq.n	8006074 <USB_HC_StartXfer+0x10c>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d003      	beq.n	8006074 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2204      	movs	r2, #4
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e04b      	b.n	800610c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2203      	movs	r2, #3
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	e047      	b.n	800610c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10d      	bne.n	800609e <USB_HC_StartXfer+0x136>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	8a92      	ldrh	r2, [r2, #20]
 800608a:	4293      	cmp	r3, r2
 800608c:	d907      	bls.n	800609e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800608e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	8a92      	ldrh	r2, [r2, #20]
 8006094:	fb03 f202 	mul.w	r2, r3, r2
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61da      	str	r2, [r3, #28]
 800609c:	e036      	b.n	800610c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	61da      	str	r2, [r3, #28]
 80060a6:	e031      	b.n	800610c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d018      	beq.n	80060e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	8a92      	ldrh	r2, [r2, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	3b01      	subs	r3, #1
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	8a92      	ldrh	r2, [r2, #20]
 80060c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060c4:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80060c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060c8:	8b7b      	ldrh	r3, [r7, #26]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90b      	bls.n	80060e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80060ce:	8b7b      	ldrh	r3, [r7, #26]
 80060d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	8a92      	ldrh	r2, [r2, #20]
 80060d8:	fb03 f202 	mul.w	r2, r3, r2
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61da      	str	r2, [r3, #28]
 80060e0:	e001      	b.n	80060e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80060e2:	2301      	movs	r3, #1
 80060e4:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	8a92      	ldrh	r2, [r2, #20]
 80060f4:	fb03 f202 	mul.w	r2, r3, r2
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61da      	str	r2, [r3, #28]
 80060fc:	e006      	b.n	800610c <USB_HC_StartXfer+0x1a4>
 80060fe:	bf00      	nop
 8006100:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6a1a      	ldr	r2, [r3, #32]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006116:	04d9      	lsls	r1, r3, #19
 8006118:	4ba3      	ldr	r3, [pc, #652]	; (80063a8 <USB_HC_StartXfer+0x440>)
 800611a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800611c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	7d9b      	ldrb	r3, [r3, #22]
 8006122:	075b      	lsls	r3, r3, #29
 8006124:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	0148      	lsls	r0, r1, #5
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	4401      	add	r1, r0
 8006130:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006134:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006136:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	460a      	mov	r2, r1
 8006150:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf0c      	ite	eq
 8006162:	2301      	moveq	r3, #1
 8006164:	2300      	movne	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	6a3a      	ldr	r2, [r7, #32]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006188:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	7e7b      	ldrb	r3, [r7, #25]
 800619a:	075b      	lsls	r3, r3, #29
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	0148      	lsls	r0, r1, #5
 80061a0:	6a39      	ldr	r1, [r7, #32]
 80061a2:	4401      	add	r1, r0
 80061a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	799b      	ldrb	r3, [r3, #6]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	f040 80c3 	bne.w	800633c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7c5b      	ldrb	r3, [r3, #17]
 80061ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061c0:	4313      	orrs	r3, r2
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	79db      	ldrb	r3, [r3, #7]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d123      	bne.n	8006244 <USB_HC_StartXfer+0x2dc>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	78db      	ldrb	r3, [r3, #3]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d11f      	bne.n	8006244 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	4413      	add	r3, r2
 800620c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	440a      	add	r2, r1
 800621a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006222:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006242:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	7c9b      	ldrb	r3, [r3, #18]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d003      	beq.n	8006254 <USB_HC_StartXfer+0x2ec>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	7c9b      	ldrb	r3, [r3, #18]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d117      	bne.n	8006284 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006258:	2b01      	cmp	r3, #1
 800625a:	d113      	bne.n	8006284 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d10f      	bne.n	8006284 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006282:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	7c9b      	ldrb	r3, [r3, #18]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d162      	bne.n	8006352 <USB_HC_StartXfer+0x3ea>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	78db      	ldrb	r3, [r3, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d15e      	bne.n	8006352 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	3b01      	subs	r3, #1
 800629a:	2b03      	cmp	r3, #3
 800629c:	d858      	bhi.n	8006350 <USB_HC_StartXfer+0x3e8>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <USB_HC_StartXfer+0x33c>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062f9 	.word	0x080062f9
 80062b0:	0800631b 	.word	0x0800631b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d2:	6053      	str	r3, [r2, #4]
          break;
 80062d4:	e03d      	b.n	8006352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f0:	f043 030e 	orr.w	r3, r3, #14
 80062f4:	6053      	str	r3, [r2, #4]
          break;
 80062f6:	e02c      	b.n	8006352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	6a3a      	ldr	r2, [r7, #32]
 800630c:	440a      	add	r2, r1
 800630e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006316:	6053      	str	r3, [r2, #4]
          break;
 8006318:	e01b      	b.n	8006352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006338:	6053      	str	r3, [r2, #4]
          break;
 800633a:	e00a      	b.n	8006352 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	461a      	mov	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	6053      	str	r3, [r2, #4]
 800634e:	e000      	b.n	8006352 <USB_HC_StartXfer+0x3ea>
          break;
 8006350:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006368:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	e003      	b.n	8006384 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006382:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800638a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	461a      	mov	r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e055      	b.n	8006454 <USB_HC_StartXfer+0x4ec>
 80063a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	78db      	ldrb	r3, [r3, #3]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d14e      	bne.n	8006452 <USB_HC_StartXfer+0x4ea>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d04a      	beq.n	8006452 <USB_HC_StartXfer+0x4ea>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	79db      	ldrb	r3, [r3, #7]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d146      	bne.n	8006452 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	7c9b      	ldrb	r3, [r3, #18]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d831      	bhi.n	8006430 <USB_HC_StartXfer+0x4c8>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <USB_HC_StartXfer+0x46c>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	08006409 	.word	0x08006409
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	08006409 	.word	0x08006409
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	3303      	adds	r3, #3
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063ee:	8afa      	ldrh	r2, [r7, #22]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d91c      	bls.n	8006434 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	619a      	str	r2, [r3, #24]
        }
        break;
 8006406:	e015      	b.n	8006434 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	3303      	adds	r3, #3
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006412:	8afa      	ldrh	r2, [r7, #22]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	b29b      	uxth	r3, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d90a      	bls.n	8006438 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]
        }
        break;
 800642e:	e003      	b.n	8006438 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <USB_HC_StartXfer+0x4d2>
        break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <USB_HC_StartXfer+0x4d2>
        break;
 8006438:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6999      	ldr	r1, [r3, #24]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785a      	ldrb	r2, [r3, #1]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	b29b      	uxth	r3, r3
 8006448:	2000      	movs	r0, #0
 800644a:	9000      	str	r0, [sp, #0]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff f9c9 	bl	80057e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3728      	adds	r7, #40	; 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	b29b      	uxth	r3, r3
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800647e:	b480      	push	{r7}
 8006480:	b089      	sub	sp, #36	; 0x24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	0c9b      	lsrs	r3, r3, #18
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	0fdb      	lsrs	r3, r3, #31
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	0fdb      	lsrs	r3, r3, #31
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d10d      	bne.n	8006500 <USB_HC_Halt+0x82>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <USB_HC_Halt+0x82>
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d002      	beq.n	80064fc <USB_HC_Halt+0x7e>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d101      	bne.n	8006500 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e0d8      	b.n	80066b2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <USB_HC_Halt+0x8e>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d173      	bne.n	80065f4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d14a      	bne.n	80065ce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d133      	bne.n	80065ac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006562:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006582:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3301      	adds	r3, #1
 8006588:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006590:	d82e      	bhi.n	80065f0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a8:	d0ec      	beq.n	8006584 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065aa:	e081      	b.n	80066b0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065cc:	e070      	b.n	80066b0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ee:	e05f      	b.n	80066b0 <USB_HC_Halt+0x232>
            break;
 80065f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065f2:	e05d      	b.n	80066b0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006612:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d133      	bne.n	800668c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006642:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006662:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3301      	adds	r3, #1
 8006668:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006670:	d81d      	bhi.n	80066ae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006688:	d0ec      	beq.n	8006664 <USB_HC_Halt+0x1e6>
 800668a:	e011      	b.n	80066b0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e000      	b.n	80066b0 <USB_HC_Halt+0x232>
          break;
 80066ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3724      	adds	r7, #36	; 0x24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066d4:	2301      	movs	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	04da      	lsls	r2, r3, #19
 80066dc:	4b15      	ldr	r3, [pc, #84]	; (8006734 <USB_DoPing+0x74>)
 80066de:	4013      	ands	r3, r2
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006708:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006710:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671e:	461a      	mov	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	1ff80000 	.word	0x1ff80000

08006738 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fe ff8c 	bl	800566a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006752:	2110      	movs	r1, #16
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe ffe5 	bl	8005724 <USB_FlushTxFifo>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff f80f 	bl	8005788 <USB_FlushRxFifo>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006774:	2300      	movs	r3, #0
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e01f      	b.n	80067ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006790:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	461a      	mov	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b0f      	cmp	r3, #15
 80067be:	d9dc      	bls.n	800677a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e034      	b.n	8006830 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	461a      	mov	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680c:	d80c      	bhi.n	8006828 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006824:	d0ec      	beq.n	8006800 <USB_StopHost+0xc8>
 8006826:	e000      	b.n	800682a <USB_StopHost+0xf2>
        break;
 8006828:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3301      	adds	r3, #1
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d9c7      	bls.n	80067c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683c:	461a      	mov	r2, r3
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
 8006842:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f04f 32ff 	mov.w	r2, #4294967295
 800684a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fe fefb 	bl	8005648 <USB_EnableGlobalInt>

  return ret;
 8006852:	7ffb      	ldrb	r3, [r7, #31]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b089      	sub	sp, #36	; 0x24
 8006860:	af04      	add	r7, sp, #16
 8006862:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006864:	2301      	movs	r3, #1
 8006866:	2202      	movs	r2, #2
 8006868:	2102      	movs	r1, #2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fc85 	bl	800717a <USBH_FindInterface>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d002      	beq.n	8006880 <USBH_CDC_InterfaceInit+0x24>
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d901      	bls.n	8006884 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006880:	2302      	movs	r3, #2
 8006882:	e13d      	b.n	8006b00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc5a 	bl	8007142 <USBH_SelectInterface>
 800688e:	4603      	mov	r3, r0
 8006890:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006898:	2302      	movs	r3, #2
 800689a:	e131      	b.n	8006b00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068a2:	2050      	movs	r0, #80	; 0x50
 80068a4:	f002 fb66 	bl	8008f74 <malloc>
 80068a8:	4603      	mov	r3, r0
 80068aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068bc:	2302      	movs	r3, #2
 80068be:	e11f      	b.n	8006b00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068c0:	2250      	movs	r2, #80	; 0x50
 80068c2:	2100      	movs	r1, #0
 80068c4:	68b8      	ldr	r0, [r7, #8]
 80068c6:	f002 fc11 	bl	80090ec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	211a      	movs	r1, #26
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da15      	bge.n	800690e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	211a      	movs	r1, #26
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	211a      	movs	r1, #26
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 ffce 	bl	80088b6 <USBH_AllocPipe>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	7819      	ldrb	r1, [r3, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	7858      	ldrb	r0, [r3, #1]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	8952      	ldrh	r2, [r2, #10]
 800693a:	9202      	str	r2, [sp, #8]
 800693c:	2203      	movs	r2, #3
 800693e:	9201      	str	r2, [sp, #4]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	4623      	mov	r3, r4
 8006944:	4602      	mov	r2, r0
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 ff86 	bl	8008858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2200      	movs	r2, #0
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f002 fa87 	bl	8008e68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	210a      	movs	r1, #10
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fc0a 	bl	800717a <USBH_FindInterface>
 8006966:	4603      	mov	r3, r0
 8006968:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2bff      	cmp	r3, #255	; 0xff
 800696e:	d002      	beq.n	8006976 <USBH_CDC_InterfaceInit+0x11a>
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d901      	bls.n	800697a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006976:	2302      	movs	r3, #2
 8006978:	e0c2      	b.n	8006b00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	211a      	movs	r1, #26
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	4413      	add	r3, r2
 8006986:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	da16      	bge.n	80069c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	211a      	movs	r1, #26
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	4413      	add	r3, r2
 800699e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	211a      	movs	r1, #26
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069b8:	881a      	ldrh	r2, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	835a      	strh	r2, [r3, #26]
 80069be:	e015      	b.n	80069ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	211a      	movs	r1, #26
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	211a      	movs	r1, #26
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	211a      	movs	r1, #26
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da16      	bge.n	8006a32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	211a      	movs	r1, #26
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	211a      	movs	r1, #26
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	835a      	strh	r2, [r3, #26]
 8006a30:	e015      	b.n	8006a5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	211a      	movs	r1, #26
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a42:	781a      	ldrb	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	211a      	movs	r1, #26
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7b9b      	ldrb	r3, [r3, #14]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 ff26 	bl	80088b6 <USBH_AllocPipe>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	7bdb      	ldrb	r3, [r3, #15]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 ff1c 	bl	80088b6 <USBH_AllocPipe>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	7b59      	ldrb	r1, [r3, #13]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7b98      	ldrb	r0, [r3, #14]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	8b12      	ldrh	r2, [r2, #24]
 8006a9e:	9202      	str	r2, [sp, #8]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	9201      	str	r2, [sp, #4]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	4623      	mov	r3, r4
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fed4 	bl	8008858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	7b19      	ldrb	r1, [r3, #12]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	7bd8      	ldrb	r0, [r3, #15]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	8b52      	ldrh	r2, [r2, #26]
 8006ac8:	9202      	str	r2, [sp, #8]
 8006aca:	2202      	movs	r2, #2
 8006acc:	9201      	str	r2, [sp, #4]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 febf 	bl	8008858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	7b5b      	ldrb	r3, [r3, #13]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f002 f9bc 	bl	8008e68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 f9b5 	bl	8008e68 <USBH_LL_SetToggle>

  return USBH_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd90      	pop	{r4, r7, pc}

08006b08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00e      	beq.n	8006b40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 feb4 	bl	8008896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fedf 	bl	80088f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	7b1b      	ldrb	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00e      	beq.n	8006b66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	7b1b      	ldrb	r3, [r3, #12]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fea1 	bl	8008896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	7b1b      	ldrb	r3, [r3, #12]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fecc 	bl	80088f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7b5b      	ldrb	r3, [r3, #13]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	7b5b      	ldrb	r3, [r3, #13]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fe8e 	bl	8008896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	7b5b      	ldrb	r3, [r3, #13]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 feb9 	bl	80088f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f002 f9ef 	bl	8008f84 <free>
    phost->pActiveClass->pData = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bac:	2200      	movs	r2, #0
 8006bae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3340      	adds	r3, #64	; 0x40
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8b1 	bl	8006d3a <GetLineCoding>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be8:	2102      	movs	r1, #2
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bee:	7afb      	ldrb	r3, [r7, #11]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d877      	bhi.n	8006d0c <USBH_CDC_Process+0x114>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <USBH_CDC_Process+0x2c>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c3f 	.word	0x08006c3f
 8006c2c:	08006c6f 	.word	0x08006c6f
 8006c30:	08006ce3 	.word	0x08006ce3
 8006c34:	08006cf1 	.word	0x08006cf1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3c:	e06d      	b.n	8006d1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f897 	bl	8006d78 <SetLineCoding>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c5c:	e058      	b.n	8006d10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d055      	beq.n	8006d10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2204      	movs	r2, #4
 8006c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c6c:	e050      	b.n	8006d10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3340      	adds	r3, #64	; 0x40
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f860 	bl	8006d3a <GetLineCoding>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d126      	bne.n	8006cd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d13b      	bne.n	8006d14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d133      	bne.n	8006d14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d12b      	bne.n	8006d14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d124      	bne.n	8006d14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f958 	bl	8006f80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cd0:	e020      	b.n	8006d14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d01d      	beq.n	8006d14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ce0:	e018      	b.n	8006d14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f867 	bl	8006db6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8da 	bl	8006ea2 <CDC_ProcessReception>
      break;
 8006cee:	e014      	b.n	8006d1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f822 	bl	8007d3c <USBH_ClrFeature>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d0a:	e005      	b.n	8006d18 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d0c:	bf00      	nop
 8006d0e:	e004      	b.n	8006d1a <USBH_CDC_Process+0x122>
      break;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <USBH_CDC_Process+0x122>
      break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <USBH_CDC_Process+0x122>
      break;
 8006d18:	bf00      	nop

  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	22a1      	movs	r2, #161	; 0xa1
 8006d48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2221      	movs	r2, #33	; 0x21
 8006d4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2207      	movs	r2, #7
 8006d60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2207      	movs	r2, #7
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fb23 	bl	80083b4 <USBH_CtlReq>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2221      	movs	r2, #33	; 0x21
 8006d86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2207      	movs	r2, #7
 8006d9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2207      	movs	r2, #7
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fb04 	bl	80083b4 <USBH_CtlReq>
 8006dac:	4603      	mov	r3, r0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af02      	add	r7, sp, #8
 8006dbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d002      	beq.n	8006ddc <CDC_ProcessTransmission+0x26>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d023      	beq.n	8006e22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dda:	e05e      	b.n	8006e9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	8b12      	ldrh	r2, [r2, #24]
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d90b      	bls.n	8006e00 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	69d9      	ldr	r1, [r3, #28]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8b1a      	ldrh	r2, [r3, #24]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	7b5b      	ldrb	r3, [r3, #13]
 8006df4:	2001      	movs	r0, #1
 8006df6:	9000      	str	r0, [sp, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fcea 	bl	80087d2 <USBH_BulkSendData>
 8006dfe:	e00b      	b.n	8006e18 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	7b5b      	ldrb	r3, [r3, #13]
 8006e0e:	2001      	movs	r0, #1
 8006e10:	9000      	str	r0, [sp, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fcdd 	bl	80087d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e20:	e03b      	b.n	8006e9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	7b5b      	ldrb	r3, [r3, #13]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fff3 	bl	8008e14 <USBH_LL_GetURBState>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d128      	bne.n	8006e8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	8b12      	ldrh	r2, [r2, #24]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d90e      	bls.n	8006e62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	8b12      	ldrh	r2, [r2, #24]
 8006e4c:	1a9a      	subs	r2, r3, r2
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	8b12      	ldrh	r2, [r2, #24]
 8006e5a:	441a      	add	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	61da      	str	r2, [r3, #28]
 8006e60:	e002      	b.n	8006e68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e78:	e00e      	b.n	8006e98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f868 	bl	8006f58 <USBH_CDC_TransmitCallback>
      break;
 8006e88:	e006      	b.n	8006e98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d103      	bne.n	8006e98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e98:	bf00      	nop
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d002      	beq.n	8006ec8 <CDC_ProcessReception+0x26>
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d00e      	beq.n	8006ee4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ec6:	e043      	b.n	8006f50 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6a19      	ldr	r1, [r3, #32]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	8b5a      	ldrh	r2, [r3, #26]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	7b1b      	ldrb	r3, [r3, #12]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fca1 	bl	800881c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2204      	movs	r2, #4
 8006ede:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ee2:	e035      	b.n	8006f50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	7b1b      	ldrb	r3, [r3, #12]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 ff92 	bl	8008e14 <USBH_LL_GetURBState>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ef4:	7cfb      	ldrb	r3, [r7, #19]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d129      	bne.n	8006f4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	7b1b      	ldrb	r3, [r3, #12]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fef5 	bl	8008cf0 <USBH_LL_GetLastXferSize>
 8006f06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d016      	beq.n	8006f40 <CDC_ProcessReception+0x9e>
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	8b5b      	ldrh	r3, [r3, #26]
 8006f16:	461a      	mov	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d910      	bls.n	8006f40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad2      	subs	r2, r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	441a      	add	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2203      	movs	r2, #3
 8006f3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f3e:	e006      	b.n	8006f4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f80f 	bl	8006f6c <USBH_CDC_ReceiveCallback>
      break;
 8006f4e:	bf00      	nop
  }
}
 8006f50:	bf00      	nop
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e029      	b.n	8007000 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	79fa      	ldrb	r2, [r7, #7]
 8006fb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f81f 	bl	8007008 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 fdc5 	bl	8008b88 <USBH_LL_Init>

  return USBH_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e009      	b.n	800702e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	33e0      	adds	r3, #224	; 0xe0
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d9f2      	bls.n	800701a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e009      	b.n	800704e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007054:	d3f1      	bcc.n	800703a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2240      	movs	r2, #64	; 0x40
 800707a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	331c      	adds	r3, #28
 80070a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 f81d 	bl	80090ec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f002 f814 	bl	80090ec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f203 3326 	addw	r3, r3, #806	; 0x326
 80070ca:	2212      	movs	r2, #18
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 f80c 	bl	80090ec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070da:	223e      	movs	r2, #62	; 0x3e
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 f804 	bl	80090ec <memset>

  return USBH_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d016      	beq.n	8007130 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10e      	bne.n	800712a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	33de      	adds	r3, #222	; 0xde
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	e004      	b.n	8007134 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800712a:	2302      	movs	r3, #2
 800712c:	73fb      	strb	r3, [r7, #15]
 800712e:	e001      	b.n	8007134 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	429a      	cmp	r2, r3
 800715c:	d204      	bcs.n	8007168 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	78fa      	ldrb	r2, [r7, #3]
 8007162:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007166:	e001      	b.n	800716c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800717a:	b480      	push	{r7}
 800717c:	b087      	sub	sp, #28
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	461a      	mov	r2, r3
 8007188:	4603      	mov	r3, r0
 800718a:	70fb      	strb	r3, [r7, #3]
 800718c:	460b      	mov	r3, r1
 800718e:	70bb      	strb	r3, [r7, #2]
 8007190:	4613      	mov	r3, r2
 8007192:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071a4:	e025      	b.n	80071f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	221a      	movs	r2, #26
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	3308      	adds	r3, #8
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	3302      	adds	r3, #2
 80071b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	795b      	ldrb	r3, [r3, #5]
 80071bc:	78fa      	ldrb	r2, [r7, #3]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d002      	beq.n	80071c8 <USBH_FindInterface+0x4e>
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	2bff      	cmp	r3, #255	; 0xff
 80071c6:	d111      	bne.n	80071ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071cc:	78ba      	ldrb	r2, [r7, #2]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d002      	beq.n	80071d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071d2:	78bb      	ldrb	r3, [r7, #2]
 80071d4:	2bff      	cmp	r3, #255	; 0xff
 80071d6:	d109      	bne.n	80071ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071dc:	787a      	ldrb	r2, [r7, #1]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d002      	beq.n	80071e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071e2:	787b      	ldrb	r3, [r7, #1]
 80071e4:	2bff      	cmp	r3, #255	; 0xff
 80071e6:	d101      	bne.n	80071ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	e006      	b.n	80071fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	3301      	adds	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d9d6      	bls.n	80071a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071f8:	23ff      	movs	r3, #255	; 0xff
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fcf6 	bl	8008c00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007214:	2101      	movs	r1, #1
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fe0f 	bl	8008e3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af04      	add	r7, sp, #16
 800722e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d102      	bne.n	800724a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2203      	movs	r2, #3
 8007248:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b0b      	cmp	r3, #11
 8007252:	f200 81be 	bhi.w	80075d2 <USBH_Process+0x3aa>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <USBH_Process+0x34>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	0800728d 	.word	0x0800728d
 8007260:	080072bf 	.word	0x080072bf
 8007264:	08007327 	.word	0x08007327
 8007268:	0800756d 	.word	0x0800756d
 800726c:	080075d3 	.word	0x080075d3
 8007270:	080073cb 	.word	0x080073cb
 8007274:	08007513 	.word	0x08007513
 8007278:	08007401 	.word	0x08007401
 800727c:	08007421 	.word	0x08007421
 8007280:	08007441 	.word	0x08007441
 8007284:	08007485 	.word	0x08007485
 8007288:	08007555 	.word	0x08007555
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 819e 	beq.w	80075d6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072a0:	20c8      	movs	r0, #200	; 0xc8
 80072a2:	f001 fe14 	bl	8008ece <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fd07 	bl	8008cba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072bc:	e18b      	b.n	80075d6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d107      	bne.n	80072d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072d6:	e18d      	b.n	80075f4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e2:	d914      	bls.n	800730e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d903      	bls.n	8007306 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	220d      	movs	r2, #13
 8007302:	701a      	strb	r2, [r3, #0]
      break;
 8007304:	e176      	b.n	80075f4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
      break;
 800730c:	e172      	b.n	80075f4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007314:	f103 020a 	add.w	r2, r3, #10
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800731e:	200a      	movs	r0, #10
 8007320:	f001 fdd5 	bl	8008ece <USBH_Delay>
      break;
 8007324:	e166      	b.n	80075f4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007336:	2104      	movs	r1, #4
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800733c:	2064      	movs	r0, #100	; 0x64
 800733e:	f001 fdc6 	bl	8008ece <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fc92 	bl	8008c6c <USBH_LL_GetSpeed>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2205      	movs	r2, #5
 8007356:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007358:	2100      	movs	r1, #0
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 faab 	bl	80088b6 <USBH_AllocPipe>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007368:	2180      	movs	r1, #128	; 0x80
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 faa3 	bl	80088b6 <USBH_AllocPipe>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7919      	ldrb	r1, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800738c:	b292      	uxth	r2, r2
 800738e:	9202      	str	r2, [sp, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	9201      	str	r2, [sp, #4]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4603      	mov	r3, r0
 8007398:	2280      	movs	r2, #128	; 0x80
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 fa5c 	bl	8008858 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7959      	ldrb	r1, [r3, #5]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073b4:	b292      	uxth	r2, r2
 80073b6:	9202      	str	r2, [sp, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	9201      	str	r2, [sp, #4]
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4603      	mov	r3, r0
 80073c0:	2200      	movs	r2, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 fa48 	bl	8008858 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073c8:	e114      	b.n	80075f4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f918 	bl	8007600 <USBH_HandleEnum>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 80fe 	bne.w	80075da <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d103      	bne.n	80073f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2208      	movs	r2, #8
 80073f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073f6:	e0f0      	b.n	80075da <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2207      	movs	r2, #7
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e0ec      	b.n	80075da <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80e9 	beq.w	80075de <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007412:	2101      	movs	r1, #1
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2208      	movs	r2, #8
 800741c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800741e:	e0de      	b.n	80075de <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007426:	b29b      	uxth	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fc3f 	bl	8007cae <USBH_SetCfg>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 80d5 	bne.w	80075e2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2209      	movs	r2, #9
 800743c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800743e:	e0d0      	b.n	80075e2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800744e:	2101      	movs	r1, #1
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc4f 	bl	8007cf4 <USBH_SetFeature>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	220a      	movs	r2, #10
 8007466:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007468:	e0bd      	b.n	80075e6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b03      	cmp	r3, #3
 8007470:	f040 80b9 	bne.w	80075e6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220a      	movs	r2, #10
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e0b4      	b.n	80075e6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	220a      	movs	r2, #10
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e0b0      	b.n	80075e6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80ad 	beq.w	80075ea <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e016      	b.n	80074cc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32de      	adds	r2, #222	; 0xde
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	791a      	ldrb	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d108      	bne.n	80074c6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074b4:	7bfa      	ldrb	r2, [r7, #15]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32de      	adds	r2, #222	; 0xde
 80074ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074c4:	e005      	b.n	80074d2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	3301      	adds	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0e5      	beq.n	800749e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d016      	beq.n	800750a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2206      	movs	r2, #6
 80074f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074fa:	2103      	movs	r1, #3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007500:	e073      	b.n	80075ea <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220d      	movs	r2, #13
 8007506:	701a      	strb	r2, [r3, #0]
      break;
 8007508:	e06f      	b.n	80075ea <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220d      	movs	r2, #13
 800750e:	701a      	strb	r2, [r3, #0]
      break;
 8007510:	e06b      	b.n	80075ea <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d103      	bne.n	800753c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	220b      	movs	r2, #11
 8007538:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800753a:	e058      	b.n	80075ee <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d154      	bne.n	80075ee <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220d      	movs	r2, #13
 8007548:	701a      	strb	r2, [r3, #0]
      break;
 800754a:	e050      	b.n	80075ee <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	220d      	movs	r2, #13
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	e04c      	b.n	80075ee <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d049      	beq.n	80075f2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
      }
      break;
 800756a:	e042      	b.n	80075f2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fd47 	bl	8007008 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a8:	2105      	movs	r1, #5
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d107      	bne.n	80075ca <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe1f 	bl	8007206 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c8:	e014      	b.n	80075f4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fb18 	bl	8008c00 <USBH_LL_Start>
      break;
 80075d0:	e010      	b.n	80075f4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80075d2:	bf00      	nop
 80075d4:	e00e      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075d6:	bf00      	nop
 80075d8:	e00c      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075da:	bf00      	nop
 80075dc:	e00a      	b.n	80075f4 <USBH_Process+0x3cc>
    break;
 80075de:	bf00      	nop
 80075e0:	e008      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075e2:	bf00      	nop
 80075e4:	e006      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075e6:	bf00      	nop
 80075e8:	e004      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075ea:	bf00      	nop
 80075ec:	e002      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <USBH_Process+0x3cc>
      break;
 80075f2:	bf00      	nop
  }
  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop

08007600 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af04      	add	r7, sp, #16
 8007606:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800760c:	2301      	movs	r3, #1
 800760e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b07      	cmp	r3, #7
 8007616:	f200 81c1 	bhi.w	800799c <USBH_HandleEnum+0x39c>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBH_HandleEnum+0x20>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007641 	.word	0x08007641
 8007624:	080076ff 	.word	0x080076ff
 8007628:	08007769 	.word	0x08007769
 800762c:	080077f7 	.word	0x080077f7
 8007630:	08007861 	.word	0x08007861
 8007634:	080078d1 	.word	0x080078d1
 8007638:	08007917 	.word	0x08007917
 800763c:	0800795d 	.word	0x0800795d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007640:	2108      	movs	r1, #8
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa50 	bl	8007ae8 <USBH_Get_DevDesc>
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d130      	bne.n	80076b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7919      	ldrb	r1, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007676:	b292      	uxth	r2, r2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	2280      	movs	r2, #128	; 0x80
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f8e7 	bl	8008858 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7959      	ldrb	r1, [r3, #5]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800769e:	b292      	uxth	r2, r2
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	9201      	str	r2, [sp, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4603      	mov	r3, r0
 80076aa:	2200      	movs	r2, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f8d3 	bl	8008858 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076b2:	e175      	b.n	80079a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	f040 8172 	bne.w	80079a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076c2:	3301      	adds	r3, #1
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d903      	bls.n	80076de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220d      	movs	r2, #13
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	e160      	b.n	80079a0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	795b      	ldrb	r3, [r3, #5]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f907 	bl	80088f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	791b      	ldrb	r3, [r3, #4]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f901 	bl	80088f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]
      break;
 80076fc:	e150      	b.n	80079a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076fe:	2112      	movs	r1, #18
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f9f1 	bl	8007ae8 <USBH_Get_DevDesc>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007716:	e145      	b.n	80079a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b03      	cmp	r3, #3
 800771c:	f040 8142 	bne.w	80079a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007726:	3301      	adds	r3, #1
 8007728:	b2da      	uxtb	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007736:	2b03      	cmp	r3, #3
 8007738:	d903      	bls.n	8007742 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	220d      	movs	r2, #13
 800773e:	701a      	strb	r2, [r3, #0]
      break;
 8007740:	e130      	b.n	80079a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	795b      	ldrb	r3, [r3, #5]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f8d5 	bl	80088f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 f8cf 	bl	80088f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
      break;
 8007766:	e11d      	b.n	80079a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007768:	2101      	movs	r1, #1
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa7b 	bl	8007c66 <USBH_SetAddress>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d132      	bne.n	80077e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800777a:	2002      	movs	r0, #2
 800777c:	f001 fba7 	bl	8008ece <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2203      	movs	r2, #3
 800778c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7919      	ldrb	r1, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077a2:	b292      	uxth	r2, r2
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	9201      	str	r2, [sp, #4]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	4603      	mov	r3, r0
 80077ae:	2280      	movs	r2, #128	; 0x80
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f851 	bl	8008858 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7959      	ldrb	r1, [r3, #5]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077ca:	b292      	uxth	r2, r2
 80077cc:	9202      	str	r2, [sp, #8]
 80077ce:	2200      	movs	r2, #0
 80077d0:	9201      	str	r2, [sp, #4]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	4603      	mov	r3, r0
 80077d6:	2200      	movs	r2, #0
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 f83d 	bl	8008858 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077de:	e0e3      	b.n	80079a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	f040 80e0 	bne.w	80079a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	220d      	movs	r2, #13
 80077ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	705a      	strb	r2, [r3, #1]
      break;
 80077f4:	e0d8      	b.n	80079a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077f6:	2109      	movs	r1, #9
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9a1 	bl	8007b40 <USBH_Get_CfgDesc>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2204      	movs	r2, #4
 800780c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800780e:	e0cd      	b.n	80079ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	f040 80ca 	bne.w	80079ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781e:	3301      	adds	r3, #1
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782e:	2b03      	cmp	r3, #3
 8007830:	d903      	bls.n	800783a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220d      	movs	r2, #13
 8007836:	701a      	strb	r2, [r3, #0]
      break;
 8007838:	e0b8      	b.n	80079ac <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	795b      	ldrb	r3, [r3, #5]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f859 	bl	80088f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	791b      	ldrb	r3, [r3, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f853 	bl	80088f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
      break;
 800785e:	e0a5      	b.n	80079ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f969 	bl	8007b40 <USBH_Get_CfgDesc>
 800786e:	4603      	mov	r3, r0
 8007870:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2205      	movs	r2, #5
 800787c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800787e:	e097      	b.n	80079b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 8094 	bne.w	80079b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800788e:	3301      	adds	r3, #1
 8007890:	b2da      	uxtb	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d903      	bls.n	80078aa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	220d      	movs	r2, #13
 80078a6:	701a      	strb	r2, [r3, #0]
      break;
 80078a8:	e082      	b.n	80079b0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	795b      	ldrb	r3, [r3, #5]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f821 	bl	80088f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f81b 	bl	80088f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e06f      	b.n	80079b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d019      	beq.n	800790e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078e6:	23ff      	movs	r3, #255	; 0xff
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f953 	bl	8007b94 <USBH_Get_StringDesc>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d103      	bne.n	8007900 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2206      	movs	r2, #6
 80078fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078fe:	e059      	b.n	80079b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b03      	cmp	r3, #3
 8007904:	d156      	bne.n	80079b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2206      	movs	r2, #6
 800790a:	705a      	strb	r2, [r3, #1]
      break;
 800790c:	e052      	b.n	80079b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2206      	movs	r2, #6
 8007912:	705a      	strb	r2, [r3, #1]
      break;
 8007914:	e04e      	b.n	80079b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800791c:	2b00      	cmp	r3, #0
 800791e:	d019      	beq.n	8007954 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800792c:	23ff      	movs	r3, #255	; 0xff
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f930 	bl	8007b94 <USBH_Get_StringDesc>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d103      	bne.n	8007946 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2207      	movs	r2, #7
 8007942:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007944:	e038      	b.n	80079b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d135      	bne.n	80079b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2207      	movs	r2, #7
 8007950:	705a      	strb	r2, [r3, #1]
      break;
 8007952:	e031      	b.n	80079b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2207      	movs	r2, #7
 8007958:	705a      	strb	r2, [r3, #1]
      break;
 800795a:	e02d      	b.n	80079b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007972:	23ff      	movs	r3, #255	; 0xff
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f90d 	bl	8007b94 <USBH_Get_StringDesc>
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007988:	e018      	b.n	80079bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d115      	bne.n	80079bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
      break;
 8007994:	e012      	b.n	80079bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
      break;
 800799a:	e00f      	b.n	80079bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800799c:	bf00      	nop
 800799e:	e00e      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079a0:	bf00      	nop
 80079a2:	e00c      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079a4:	bf00      	nop
 80079a6:	e00a      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079a8:	bf00      	nop
 80079aa:	e008      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079ac:	bf00      	nop
 80079ae:	e006      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079b0:	bf00      	nop
 80079b2:	e004      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <USBH_HandleEnum+0x3be>
      break;
 80079bc:	bf00      	nop
  }
  return Status;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f804 	bl	8007a0a <USBH_HandleSof>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b0b      	cmp	r3, #11
 8007a1a:	d10a      	bne.n	8007a32 <USBH_HandleSof+0x28>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
  }
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a4a:	bf00      	nop
}
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a66:	bf00      	nop
}
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f8b8 	bl	8008c36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 ff13 	bl	80088f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 ff0d 	bl	80088f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007af4:	887b      	ldrh	r3, [r7, #2]
 8007af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007afa:	d901      	bls.n	8007b00 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e01b      	b.n	8007b38 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f872 	bl	8007bfc <USBH_GetDescriptor>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b28:	887a      	ldrh	r2, [r7, #2]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f929 	bl	8007d84 <USBH_ParseDevDesc>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	331c      	adds	r3, #28
 8007b50:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b52:	887b      	ldrh	r3, [r7, #2]
 8007b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b58:	d901      	bls.n	8007b5e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e016      	b.n	8007b8c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f846 	bl	8007bfc <USBH_GetDescriptor>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d107      	bne.n	8007b8a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b7a:	887b      	ldrh	r3, [r7, #2]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f9b3 	bl	8007eec <USBH_ParseCfgDesc>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	72fb      	strb	r3, [r7, #11]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007ba8:	893b      	ldrh	r3, [r7, #8]
 8007baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bae:	d802      	bhi.n	8007bb6 <USBH_Get_StringDesc+0x22>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e01c      	b.n	8007bf4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007bc2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007bca:	893b      	ldrh	r3, [r7, #8]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f812 	bl	8007bfc <USBH_GetDescriptor>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007be8:	893a      	ldrh	r2, [r7, #8]
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fb93 	bl	8008318 <USBH_ParseStringDesc>
  }

  return status;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	72fb      	strb	r3, [r7, #11]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	789b      	ldrb	r3, [r3, #2]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d11c      	bne.n	8007c50 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2206      	movs	r2, #6
 8007c26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	893a      	ldrh	r2, [r7, #8]
 8007c2c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c2e:	893b      	ldrh	r3, [r7, #8]
 8007c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c38:	d104      	bne.n	8007c44 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f240 4209 	movw	r2, #1033	; 0x409
 8007c40:	829a      	strh	r2, [r3, #20]
 8007c42:	e002      	b.n	8007c4a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8b3a      	ldrh	r2, [r7, #24]
 8007c4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c50:	8b3b      	ldrh	r3, [r7, #24]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 fbac 	bl	80083b4 <USBH_CtlReq>
 8007c5c:	4603      	mov	r3, r0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	789b      	ldrb	r3, [r3, #2]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10f      	bne.n	8007c9a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2205      	movs	r2, #5
 8007c84:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb88 	bl	80083b4 <USBH_CtlReq>
 8007ca4:	4603      	mov	r3, r0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	789b      	ldrb	r3, [r3, #2]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10e      	bne.n	8007ce0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2209      	movs	r2, #9
 8007ccc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	887a      	ldrh	r2, [r7, #2]
 8007cd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fb65 	bl	80083b4 <USBH_CtlReq>
 8007cea:	4603      	mov	r3, r0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	789b      	ldrb	r3, [r3, #2]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10f      	bne.n	8007d28 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2203      	movs	r2, #3
 8007d12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fb41 	bl	80083b4 <USBH_CtlReq>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	789b      	ldrb	r3, [r3, #2]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d10f      	bne.n	8007d70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fb1d 	bl	80083b4 <USBH_CtlReq>
 8007d7a:	4603      	mov	r3, r0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007d98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007da4:	2302      	movs	r3, #2
 8007da6:	e098      	b.n	8007eda <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	785a      	ldrb	r2, [r3, #1]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3302      	adds	r3, #2
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3303      	adds	r3, #3
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	791a      	ldrb	r2, [r3, #4]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	795a      	ldrb	r2, [r3, #5]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	799a      	ldrb	r2, [r3, #6]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	79da      	ldrb	r2, [r3, #7]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d11b      	bne.n	8007e40 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	79db      	ldrb	r3, [r3, #7]
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	dc0f      	bgt.n	8007e30 <USBH_ParseDevDesc+0xac>
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	db0f      	blt.n	8007e34 <USBH_ParseDevDesc+0xb0>
 8007e14:	3b08      	subs	r3, #8
 8007e16:	4a34      	ldr	r2, [pc, #208]	; (8007ee8 <USBH_ParseDevDesc+0x164>)
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <USBH_ParseDevDesc+0xb8>
 8007e2e:	e001      	b.n	8007e34 <USBH_ParseDevDesc+0xb0>
 8007e30:	2b40      	cmp	r3, #64	; 0x40
 8007e32:	d003      	beq.n	8007e3c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2208      	movs	r2, #8
 8007e38:	71da      	strb	r2, [r3, #7]
        break;
 8007e3a:	e000      	b.n	8007e3e <USBH_ParseDevDesc+0xba>
        break;
 8007e3c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e3e:	e00e      	b.n	8007e5e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d107      	bne.n	8007e5a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	79db      	ldrb	r3, [r3, #7]
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d005      	beq.n	8007e5e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2208      	movs	r2, #8
 8007e56:	71da      	strb	r2, [r3, #7]
 8007e58:	e001      	b.n	8007e5e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d939      	bls.n	8007ed8 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3308      	adds	r3, #8
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3309      	adds	r3, #9
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	330a      	adds	r3, #10
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	330b      	adds	r3, #11
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4313      	orrs	r3, r2
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	330d      	adds	r3, #13
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	7b9a      	ldrb	r2, [r3, #14]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	7bda      	ldrb	r2, [r3, #15]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	7c1a      	ldrb	r2, [r3, #16]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	7c5a      	ldrb	r2, [r3, #17]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	01000101 	.word	0x01000101

08007eec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f00:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e0db      	b.n	80080d6 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	785a      	ldrb	r2, [r3, #1]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	3302      	adds	r3, #2
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3303      	adds	r3, #3
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4e:	bf28      	it	cs
 8007f50:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	791a      	ldrb	r2, [r3, #4]
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	795a      	ldrb	r2, [r3, #5]
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	799a      	ldrb	r2, [r3, #6]
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	79da      	ldrb	r2, [r3, #7]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	7a1a      	ldrb	r2, [r3, #8]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b09      	cmp	r3, #9
 8007f88:	d002      	beq.n	8007f90 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	2209      	movs	r2, #9
 8007f8e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	f240 809d 	bls.w	80080d2 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f98:	2309      	movs	r3, #9
 8007f9a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fa0:	e081      	b.n	80080a6 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fa2:	f107 0316 	add.w	r3, r7, #22
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007faa:	f000 f9e8 	bl	800837e <USBH_GetNextDesc>
 8007fae:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d176      	bne.n	80080a6 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	d002      	beq.n	8007fc6 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2209      	movs	r2, #9
 8007fc4:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fca:	221a      	movs	r2, #26
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	6a3a      	ldr	r2, [r7, #32]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fdc:	69f8      	ldr	r0, [r7, #28]
 8007fde:	f000 f87e 	bl	80080de <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fec:	e043      	b.n	8008076 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fee:	f107 0316 	add.w	r3, r7, #22
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff6:	f000 f9c2 	bl	800837e <USBH_GetNextDesc>
 8007ffa:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b05      	cmp	r3, #5
 8008002:	d138      	bne.n	8008076 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	795b      	ldrb	r3, [r3, #5]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d113      	bne.n	8008034 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008010:	2b02      	cmp	r3, #2
 8008012:	d003      	beq.n	800801c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	799b      	ldrb	r3, [r3, #6]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d10b      	bne.n	8008034 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	79db      	ldrb	r3, [r3, #7]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <USBH_ParseCfgDesc+0x150>
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b09      	cmp	r3, #9
 800802a:	d007      	beq.n	800803c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	2209      	movs	r2, #9
 8008030:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008032:	e003      	b.n	800803c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	2207      	movs	r2, #7
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e000      	b.n	800803e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800803c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800803e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008042:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008046:	3201      	adds	r2, #1
 8008048:	00d2      	lsls	r2, r2, #3
 800804a:	211a      	movs	r1, #26
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	3308      	adds	r3, #8
 8008054:	6a3a      	ldr	r2, [r7, #32]
 8008056:	4413      	add	r3, r2
 8008058:	3304      	adds	r3, #4
 800805a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800805c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800805e:	69b9      	ldr	r1, [r7, #24]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f870 	bl	8008146 <USBH_ParseEPDesc>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800806c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008070:	3301      	adds	r3, #1
 8008072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	791b      	ldrb	r3, [r3, #4]
 800807a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800807e:	429a      	cmp	r2, r3
 8008080:	d204      	bcs.n	800808c <USBH_ParseCfgDesc+0x1a0>
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	885a      	ldrh	r2, [r3, #2]
 8008086:	8afb      	ldrh	r3, [r7, #22]
 8008088:	429a      	cmp	r2, r3
 800808a:	d8b0      	bhi.n	8007fee <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008094:	429a      	cmp	r2, r3
 8008096:	d201      	bcs.n	800809c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008098:	2303      	movs	r3, #3
 800809a:	e01c      	b.n	80080d6 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800809c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a0:	3301      	adds	r3, #1
 80080a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d805      	bhi.n	80080ba <USBH_ParseCfgDesc+0x1ce>
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	885a      	ldrh	r2, [r3, #2]
 80080b2:	8afb      	ldrh	r3, [r7, #22]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	f63f af74 	bhi.w	8007fa2 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	791b      	ldrb	r3, [r3, #4]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	bf28      	it	cs
 80080c2:	2302      	movcs	r3, #2
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d201      	bcs.n	80080d2 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e001      	b.n	80080d6 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80080d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3730      	adds	r7, #48	; 0x30
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781a      	ldrb	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	785a      	ldrb	r2, [r3, #1]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	789a      	ldrb	r2, [r3, #2]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	78da      	ldrb	r2, [r3, #3]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3304      	adds	r3, #4
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	bf28      	it	cs
 8008112:	2302      	movcs	r3, #2
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	795a      	ldrb	r2, [r3, #5]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	799a      	ldrb	r2, [r3, #6]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	79da      	ldrb	r2, [r3, #7]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	7a1a      	ldrb	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	721a      	strb	r2, [r3, #8]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008146:	b480      	push	{r7}
 8008148:	b087      	sub	sp, #28
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	785a      	ldrb	r2, [r3, #1]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	789a      	ldrb	r2, [r3, #2]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	78da      	ldrb	r2, [r3, #3]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3305      	adds	r3, #5
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	799a      	ldrb	r2, [r3, #6]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081aa:	d804      	bhi.n	80081b6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b4:	d901      	bls.n	80081ba <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80081b6:	2303      	movs	r3, #3
 80081b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d136      	bne.n	8008232 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	78db      	ldrb	r3, [r3, #3]
 80081c8:	f003 0303 	and.w	r3, r3, #3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d108      	bne.n	80081e2 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	889b      	ldrh	r3, [r3, #4]
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d8:	f240 8097 	bls.w	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
 80081e0:	e093      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	78db      	ldrb	r3, [r3, #3]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d107      	bne.n	80081fe <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	f240 8089 	bls.w	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	e085      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	78db      	ldrb	r3, [r3, #3]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b01      	cmp	r3, #1
 8008208:	d005      	beq.n	8008216 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008212:	2b03      	cmp	r3, #3
 8008214:	d10a      	bne.n	800822c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	799b      	ldrb	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <USBH_ParseEPDesc+0xe0>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	799b      	ldrb	r3, [r3, #6]
 8008222:	2b10      	cmp	r3, #16
 8008224:	d970      	bls.n	8008308 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008226:	2303      	movs	r3, #3
 8008228:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800822a:	e06d      	b.n	8008308 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800822c:	2303      	movs	r3, #3
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	e06b      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008238:	2b01      	cmp	r3, #1
 800823a:	d13c      	bne.n	80082b6 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	78db      	ldrb	r3, [r3, #3]
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d005      	beq.n	8008254 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	889b      	ldrh	r3, [r3, #4]
 8008258:	2b40      	cmp	r3, #64	; 0x40
 800825a:	d956      	bls.n	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800825c:	2303      	movs	r3, #3
 800825e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008260:	e053      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10e      	bne.n	800828c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	799b      	ldrb	r3, [r3, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800827a:	2b10      	cmp	r3, #16
 800827c:	d803      	bhi.n	8008286 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d941      	bls.n	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
 800828a:	e03e      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b03      	cmp	r3, #3
 8008296:	d10b      	bne.n	80082b0 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	799b      	ldrb	r3, [r3, #6]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <USBH_ParseEPDesc+0x164>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	889b      	ldrh	r3, [r3, #4]
 80082a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a8:	d32f      	bcc.n	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082aa:	2303      	movs	r3, #3
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	e02c      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082b0:	2303      	movs	r3, #3
 80082b2:	75fb      	strb	r3, [r7, #23]
 80082b4:	e029      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d120      	bne.n	8008302 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	78db      	ldrb	r3, [r3, #3]
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	889b      	ldrh	r3, [r3, #4]
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d01a      	beq.n	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
 80082d8:	e017      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d10a      	bne.n	80082fc <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	799b      	ldrb	r3, [r3, #6]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <USBH_ParseEPDesc+0x1b0>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	889b      	ldrh	r3, [r3, #4]
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d909      	bls.n	800830a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80082f6:	2303      	movs	r3, #3
 80082f8:	75fb      	strb	r3, [r7, #23]
 80082fa:	e006      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
 8008300:	e003      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008302:	2303      	movs	r3, #3
 8008304:	75fb      	strb	r3, [r7, #23]
 8008306:	e000      	b.n	800830a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008308:	bf00      	nop
  }

  return status;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
}
 800830c:	4618      	mov	r0, r3
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d120      	bne.n	8008372 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	1e9a      	subs	r2, r3, #2
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	4293      	cmp	r3, r2
 800833a:	bf28      	it	cs
 800833c:	4613      	movcs	r3, r2
 800833e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3302      	adds	r3, #2
 8008344:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008346:	2300      	movs	r3, #0
 8008348:	82fb      	strh	r3, [r7, #22]
 800834a:	e00b      	b.n	8008364 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800834c:	8afb      	ldrh	r3, [r7, #22]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3301      	adds	r3, #1
 800835c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800835e:	8afb      	ldrh	r3, [r7, #22]
 8008360:	3302      	adds	r3, #2
 8008362:	82fb      	strh	r3, [r7, #22]
 8008364:	8afa      	ldrh	r2, [r7, #22]
 8008366:	8abb      	ldrh	r3, [r7, #20]
 8008368:	429a      	cmp	r2, r3
 800836a:	d3ef      	bcc.n	800834c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
  }
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800837e:	b480      	push	{r7}
 8008380:	b085      	sub	sp, #20
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	881a      	ldrh	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	4413      	add	r3, r2
 8008394:	b29a      	uxth	r2, r3
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4413      	add	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083a6:	68fb      	ldr	r3, [r7, #12]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	789b      	ldrb	r3, [r3, #2]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d002      	beq.n	80083d4 <USBH_CtlReq+0x20>
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d00f      	beq.n	80083f2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80083d2:	e027      	b.n	8008424 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2202      	movs	r2, #2
 80083ea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
      break;
 80083f0:	e018      	b.n	8008424 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f81c 	bl	8008430 <USBH_HandleControl>
 80083f8:	4603      	mov	r3, r0
 80083fa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USBH_CtlReq+0x54>
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d106      	bne.n	8008416 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	761a      	strb	r2, [r3, #24]
      break;
 8008414:	e005      	b.n	8008422 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	2b02      	cmp	r3, #2
 800841a:	d102      	bne.n	8008422 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	709a      	strb	r2, [r3, #2]
      break;
 8008422:	bf00      	nop
  }
  return status;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7e1b      	ldrb	r3, [r3, #24]
 8008444:	3b01      	subs	r3, #1
 8008446:	2b0a      	cmp	r3, #10
 8008448:	f200 8156 	bhi.w	80086f8 <USBH_HandleControl+0x2c8>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <USBH_HandleControl+0x24>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008481 	.word	0x08008481
 8008458:	0800849b 	.word	0x0800849b
 800845c:	08008505 	.word	0x08008505
 8008460:	0800852b 	.word	0x0800852b
 8008464:	08008563 	.word	0x08008563
 8008468:	0800858d 	.word	0x0800858d
 800846c:	080085df 	.word	0x080085df
 8008470:	08008601 	.word	0x08008601
 8008474:	0800863d 	.word	0x0800863d
 8008478:	08008663 	.word	0x08008663
 800847c:	080086a1 	.word	0x080086a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0110 	add.w	r1, r3, #16
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	795b      	ldrb	r3, [r3, #5]
 800848a:	461a      	mov	r2, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f943 	bl	8008718 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2202      	movs	r2, #2
 8008496:	761a      	strb	r2, [r3, #24]
      break;
 8008498:	e139      	b.n	800870e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	795b      	ldrb	r3, [r3, #5]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fcb7 	bl	8008e14 <USBH_LL_GetURBState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d11e      	bne.n	80084ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7c1b      	ldrb	r3, [r3, #16]
 80084b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8adb      	ldrh	r3, [r3, #22]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80084c2:	7b7b      	ldrb	r3, [r7, #13]
 80084c4:	2b80      	cmp	r3, #128	; 0x80
 80084c6:	d103      	bne.n	80084d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2203      	movs	r2, #3
 80084cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084ce:	e115      	b.n	80086fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2205      	movs	r2, #5
 80084d4:	761a      	strb	r2, [r3, #24]
      break;
 80084d6:	e111      	b.n	80086fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80084d8:	7b7b      	ldrb	r3, [r7, #13]
 80084da:	2b80      	cmp	r3, #128	; 0x80
 80084dc:	d103      	bne.n	80084e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2209      	movs	r2, #9
 80084e2:	761a      	strb	r2, [r3, #24]
      break;
 80084e4:	e10a      	b.n	80086fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2207      	movs	r2, #7
 80084ea:	761a      	strb	r2, [r3, #24]
      break;
 80084ec:	e106      	b.n	80086fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d003      	beq.n	80084fc <USBH_HandleControl+0xcc>
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	f040 8100 	bne.w	80086fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	220b      	movs	r2, #11
 8008500:	761a      	strb	r2, [r3, #24]
      break;
 8008502:	e0fb      	b.n	80086fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6899      	ldr	r1, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	899a      	ldrh	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	791b      	ldrb	r3, [r3, #4]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f93a 	bl	8008796 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2204      	movs	r2, #4
 8008526:	761a      	strb	r2, [r3, #24]
      break;
 8008528:	e0f1      	b.n	800870e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	791b      	ldrb	r3, [r3, #4]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fc6f 	bl	8008e14 <USBH_LL_GetURBState>
 8008536:	4603      	mov	r3, r0
 8008538:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d102      	bne.n	8008546 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2209      	movs	r2, #9
 8008544:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b05      	cmp	r3, #5
 800854a:	d102      	bne.n	8008552 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800854c:	2303      	movs	r3, #3
 800854e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008550:	e0d6      	b.n	8008700 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b04      	cmp	r3, #4
 8008556:	f040 80d3 	bne.w	8008700 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	220b      	movs	r2, #11
 800855e:	761a      	strb	r2, [r3, #24]
      break;
 8008560:	e0ce      	b.n	8008700 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6899      	ldr	r1, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	899a      	ldrh	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	2001      	movs	r0, #1
 8008570:	9000      	str	r0, [sp, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f8ea 	bl	800874c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2206      	movs	r2, #6
 8008588:	761a      	strb	r2, [r3, #24]
      break;
 800858a:	e0c0      	b.n	800870e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	795b      	ldrb	r3, [r3, #5]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fc3e 	bl	8008e14 <USBH_LL_GetURBState>
 8008598:	4603      	mov	r3, r0
 800859a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d103      	bne.n	80085aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2207      	movs	r2, #7
 80085a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085a8:	e0ac      	b.n	8008704 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b05      	cmp	r3, #5
 80085ae:	d105      	bne.n	80085bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	220c      	movs	r2, #12
 80085b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085b6:	2303      	movs	r3, #3
 80085b8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ba:	e0a3      	b.n	8008704 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d103      	bne.n	80085ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2205      	movs	r2, #5
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e09c      	b.n	8008704 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	f040 8099 	bne.w	8008704 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	220b      	movs	r2, #11
 80085d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
      break;
 80085dc:	e092      	b.n	8008704 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	791b      	ldrb	r3, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8d5 	bl	8008796 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2208      	movs	r2, #8
 80085fc:	761a      	strb	r2, [r3, #24]

      break;
 80085fe:	e086      	b.n	800870e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	791b      	ldrb	r3, [r3, #4]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc04 	bl	8008e14 <USBH_LL_GetURBState>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d105      	bne.n	8008622 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	220d      	movs	r2, #13
 800861a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008620:	e072      	b.n	8008708 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d103      	bne.n	8008630 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220b      	movs	r2, #11
 800862c:	761a      	strb	r2, [r3, #24]
      break;
 800862e:	e06b      	b.n	8008708 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b05      	cmp	r3, #5
 8008634:	d168      	bne.n	8008708 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008636:	2303      	movs	r3, #3
 8008638:	73fb      	strb	r3, [r7, #15]
      break;
 800863a:	e065      	b.n	8008708 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	795b      	ldrb	r3, [r3, #5]
 8008640:	2201      	movs	r2, #1
 8008642:	9200      	str	r2, [sp, #0]
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f87f 	bl	800874c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	220a      	movs	r2, #10
 800865e:	761a      	strb	r2, [r3, #24]
      break;
 8008660:	e055      	b.n	800870e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	795b      	ldrb	r3, [r3, #5]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fbd3 	bl	8008e14 <USBH_LL_GetURBState>
 800866e:	4603      	mov	r3, r0
 8008670:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	220d      	movs	r2, #13
 8008680:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008682:	e043      	b.n	800870c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d103      	bne.n	8008692 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2209      	movs	r2, #9
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e03c      	b.n	800870c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b04      	cmp	r3, #4
 8008696:	d139      	bne.n	800870c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	220b      	movs	r2, #11
 800869c:	761a      	strb	r2, [r3, #24]
      break;
 800869e:	e035      	b.n	800870c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	7e5b      	ldrb	r3, [r3, #25]
 80086a4:	3301      	adds	r3, #1
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	765a      	strb	r2, [r3, #25]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7e5b      	ldrb	r3, [r3, #25]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d806      	bhi.n	80086c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80086c0:	e025      	b.n	800870e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086c8:	2106      	movs	r1, #6
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	795b      	ldrb	r3, [r3, #5]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f90c 	bl	80088f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	791b      	ldrb	r3, [r3, #4]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f906 	bl	80088f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086f2:	2302      	movs	r3, #2
 80086f4:	73fb      	strb	r3, [r7, #15]
      break;
 80086f6:	e00a      	b.n	800870e <USBH_HandleControl+0x2de>

    default:
      break;
 80086f8:	bf00      	nop
 80086fa:	e008      	b.n	800870e <USBH_HandleControl+0x2de>
      break;
 80086fc:	bf00      	nop
 80086fe:	e006      	b.n	800870e <USBH_HandleControl+0x2de>
      break;
 8008700:	bf00      	nop
 8008702:	e004      	b.n	800870e <USBH_HandleControl+0x2de>
      break;
 8008704:	bf00      	nop
 8008706:	e002      	b.n	800870e <USBH_HandleControl+0x2de>
      break;
 8008708:	bf00      	nop
 800870a:	e000      	b.n	800870e <USBH_HandleControl+0x2de>
      break;
 800870c:	bf00      	nop
  }

  return status;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af04      	add	r7, sp, #16
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008726:	79f9      	ldrb	r1, [r7, #7]
 8008728:	2300      	movs	r3, #0
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	2308      	movs	r3, #8
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	2300      	movs	r3, #0
 800873a:	2200      	movs	r2, #0
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fb38 	bl	8008db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af04      	add	r7, sp, #16
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	460b      	mov	r3, r1
 800875c:	80fb      	strh	r3, [r7, #6]
 800875e:	4613      	mov	r3, r2
 8008760:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008770:	7979      	ldrb	r1, [r7, #5]
 8008772:	7e3b      	ldrb	r3, [r7, #24]
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	2301      	movs	r3, #1
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	2200      	movs	r2, #0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fb13 	bl	8008db2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af04      	add	r7, sp, #16
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	4611      	mov	r1, r2
 80087a2:	461a      	mov	r2, r3
 80087a4:	460b      	mov	r3, r1
 80087a6:	80fb      	strh	r3, [r7, #6]
 80087a8:	4613      	mov	r3, r2
 80087aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087ac:	7979      	ldrb	r1, [r7, #5]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9303      	str	r3, [sp, #12]
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	2301      	movs	r3, #1
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	2201      	movs	r2, #1
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 faf5 	bl	8008db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087c8:	2300      	movs	r3, #0

}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b088      	sub	sp, #32
 80087d6:	af04      	add	r7, sp, #16
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	4611      	mov	r1, r2
 80087de:	461a      	mov	r2, r3
 80087e0:	460b      	mov	r3, r1
 80087e2:	80fb      	strh	r3, [r7, #6]
 80087e4:	4613      	mov	r3, r2
 80087e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087f6:	7979      	ldrb	r1, [r7, #5]
 80087f8:	7e3b      	ldrb	r3, [r7, #24]
 80087fa:	9303      	str	r3, [sp, #12]
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	2301      	movs	r3, #1
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fad0 	bl	8008db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af04      	add	r7, sp, #16
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	460b      	mov	r3, r1
 800882c:	80fb      	strh	r3, [r7, #6]
 800882e:	4613      	mov	r3, r2
 8008830:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008832:	7979      	ldrb	r1, [r7, #5]
 8008834:	2300      	movs	r3, #0
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	88fb      	ldrh	r3, [r7, #6]
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	2301      	movs	r3, #1
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	2302      	movs	r3, #2
 8008846:	2201      	movs	r2, #1
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fab2 	bl	8008db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af04      	add	r7, sp, #16
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	461a      	mov	r2, r3
 8008866:	4603      	mov	r3, r0
 8008868:	70fb      	strb	r3, [r7, #3]
 800886a:	460b      	mov	r3, r1
 800886c:	70bb      	strb	r3, [r7, #2]
 800886e:	4613      	mov	r3, r2
 8008870:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008872:	7878      	ldrb	r0, [r7, #1]
 8008874:	78ba      	ldrb	r2, [r7, #2]
 8008876:	78f9      	ldrb	r1, [r7, #3]
 8008878:	8b3b      	ldrh	r3, [r7, #24]
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	7d3b      	ldrb	r3, [r7, #20]
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	7c3b      	ldrb	r3, [r7, #16]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	4603      	mov	r3, r0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa45 	bl	8008d16 <USBH_LL_OpenPipe>

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa64 	bl	8008d74 <USBH_LL_ClosePipe>

  return USBH_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f836 	bl	8008934 <USBH_GetFreePipe>
 80088c8:	4603      	mov	r3, r0
 80088ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00a      	beq.n	80088ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	89fb      	ldrh	r3, [r7, #14]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	33e0      	adds	r3, #224	; 0xe0
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088ec:	89fb      	ldrh	r3, [r7, #14]
 80088ee:	b2db      	uxtb	r3, r3
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d80d      	bhi.n	8008926 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	33e0      	adds	r3, #224	; 0xe0
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	33e0      	adds	r3, #224	; 0xe0
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e00f      	b.n	8008966 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	33e0      	adds	r3, #224	; 0xe0
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	b29b      	uxth	r3, r3
 800895e:	e007      	b.n	8008970 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	3301      	adds	r3, #1
 8008964:	73fb      	strb	r3, [r7, #15]
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	2b0f      	cmp	r3, #15
 800896a:	d9ec      	bls.n	8008946 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800896c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008980:	2201      	movs	r2, #1
 8008982:	490e      	ldr	r1, [pc, #56]	; (80089bc <MX_USB_HOST_Init+0x40>)
 8008984:	480e      	ldr	r0, [pc, #56]	; (80089c0 <MX_USB_HOST_Init+0x44>)
 8008986:	f7fe fb05 	bl	8006f94 <USBH_Init>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008990:	f7f8 fee6 	bl	8001760 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008994:	490b      	ldr	r1, [pc, #44]	; (80089c4 <MX_USB_HOST_Init+0x48>)
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <MX_USB_HOST_Init+0x44>)
 8008998:	f7fe fba9 	bl	80070ee <USBH_RegisterClass>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80089a2:	f7f8 fedd 	bl	8001760 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80089a6:	4806      	ldr	r0, [pc, #24]	; (80089c0 <MX_USB_HOST_Init+0x44>)
 80089a8:	f7fe fc2d 	bl	8007206 <USBH_Start>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80089b2:	f7f8 fed5 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	20000200 	.word	0x20000200
 80089c4:	20000038 	.word	0x20000038

080089c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80089cc:	4802      	ldr	r0, [pc, #8]	; (80089d8 <MX_USB_HOST_Process+0x10>)
 80089ce:	f7fe fc2b 	bl	8007228 <USBH_Process>
}
 80089d2:	bf00      	nop
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000200 	.word	0x20000200

080089dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d819      	bhi.n	8008a24 <USBH_UserProcess+0x48>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <USBH_UserProcess+0x1c>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a25 	.word	0x08008a25
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a1d 	.word	0x08008a1d
 8008a08:	08008a0d 	.word	0x08008a0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <USBH_UserProcess+0x58>)
 8008a0e:	2203      	movs	r2, #3
 8008a10:	701a      	strb	r2, [r3, #0]
  break;
 8008a12:	e008      	b.n	8008a26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a14:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <USBH_UserProcess+0x58>)
 8008a16:	2202      	movs	r2, #2
 8008a18:	701a      	strb	r2, [r3, #0]
  break;
 8008a1a:	e004      	b.n	8008a26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <USBH_UserProcess+0x58>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
  break;
 8008a22:	e000      	b.n	8008a26 <USBH_UserProcess+0x4a>

  default:
  break;
 8008a24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	200005d8 	.word	0x200005d8

08008a38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a40:	f107 0314 	add.w	r3, r7, #20
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
 8008a4c:	60da      	str	r2, [r3, #12]
 8008a4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a58:	d13a      	bne.n	8008ad0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a84:	2300      	movs	r3, #0
 8008a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a88:	230a      	movs	r3, #10
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a8c:	f107 0314 	add.w	r3, r7, #20
 8008a90:	4619      	mov	r1, r3
 8008a92:	4812      	ldr	r0, [pc, #72]	; (8008adc <HAL_HCD_MspInit+0xa4>)
 8008a94:	f7f9 f970 	bl	8001d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a98:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	4a0e      	ldr	r2, [pc, #56]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa2:	6353      	str	r3, [r2, #52]	; 0x34
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	4b0b      	ldr	r3, [pc, #44]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aac:	4a0a      	ldr	r2, [pc, #40]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8008ab4:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <HAL_HCD_MspInit+0xa0>)
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2043      	movs	r0, #67	; 0x43
 8008ac6:	f7f9 f920 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aca:	2043      	movs	r0, #67	; 0x43
 8008acc:	f7f9 f939 	bl	8001d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	3728      	adds	r7, #40	; 0x28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40023800 	.word	0x40023800
 8008adc:	40020000 	.word	0x40020000

08008ae0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe ff79 	bl	80079e6 <USBH_LL_IncTimer>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe ffb1 	bl	8007a72 <USBH_LL_Connect>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ffba 	bl	8007aa0 <USBH_LL_Disconnect>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
 8008b40:	4613      	mov	r3, r2
 8008b42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe ff6b 	bl	8007a3a <USBH_LL_PortEnabled>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe ff6b 	bl	8007a56 <USBH_LL_PortDisabled>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d12a      	bne.n	8008bf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b9a:	4a18      	ldr	r2, [pc, #96]	; (8008bfc <USBH_LL_Init+0x74>)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <USBH_LL_Init+0x74>)
 8008ba6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008bb2:	4b12      	ldr	r3, [pc, #72]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008bb8:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008bd0:	480a      	ldr	r0, [pc, #40]	; (8008bfc <USBH_LL_Init+0x74>)
 8008bd2:	f7f9 fa86 	bl	80020e2 <HAL_HCD_Init>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008bdc:	f7f8 fdc0 	bl	8001760 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008be0:	4806      	ldr	r0, [pc, #24]	; (8008bfc <USBH_LL_Init+0x74>)
 8008be2:	f7f9 fee7 	bl	80029b4 <HAL_HCD_GetCurrentFrame>
 8008be6:	4603      	mov	r3, r0
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7fe feec 	bl	80079c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200005dc 	.word	0x200005dc

08008c00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f9 fe54 	bl	80028c4 <HAL_HCD_Start>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f95e 	bl	8008ee4 <USBH_Get_USB_Status>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f9 fe5c 	bl	800290a <HAL_HCD_Stop>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f943 	bl	8008ee4 <USBH_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c74:	2301      	movs	r3, #1
 8008c76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f9 fea6 	bl	80029d0 <HAL_HCD_GetCurrentSpeed>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d00c      	beq.n	8008ca4 <USBH_LL_GetSpeed+0x38>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d80d      	bhi.n	8008caa <USBH_LL_GetSpeed+0x3e>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <USBH_LL_GetSpeed+0x2c>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d003      	beq.n	8008c9e <USBH_LL_GetSpeed+0x32>
 8008c96:	e008      	b.n	8008caa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e008      	b.n	8008cb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e005      	b.n	8008cb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	e002      	b.n	8008cb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008caa:	2301      	movs	r3, #1
 8008cac:	73fb      	strb	r3, [r7, #15]
    break;
 8008cae:	bf00      	nop
  }
  return  speed;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f9 fe37 	bl	8002944 <HAL_HCD_ResetPort>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f901 	bl	8008ee4 <USBH_Get_USB_Status>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7f9 fe3f 	bl	800298a <HAL_HCD_HC_GetXferCount>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d16:	b590      	push	{r4, r7, lr}
 8008d18:	b089      	sub	sp, #36	; 0x24
 8008d1a:	af04      	add	r7, sp, #16
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	461a      	mov	r2, r3
 8008d24:	4603      	mov	r3, r0
 8008d26:	70fb      	strb	r3, [r7, #3]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70bb      	strb	r3, [r7, #2]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d3e:	787c      	ldrb	r4, [r7, #1]
 8008d40:	78ba      	ldrb	r2, [r7, #2]
 8008d42:	78f9      	ldrb	r1, [r7, #3]
 8008d44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4623      	mov	r3, r4
 8008d56:	f7f9 fa2b 	bl	80021b0 <HAL_HCD_HC_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f8bf 	bl	8008ee4 <USBH_Get_USB_Status>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd90      	pop	{r4, r7, pc}

08008d74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7f9 fac4 	bl	8002320 <HAL_HCD_HC_Halt>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f8a0 	bl	8008ee4 <USBH_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008db2:	b590      	push	{r4, r7, lr}
 8008db4:	b089      	sub	sp, #36	; 0x24
 8008db6:	af04      	add	r7, sp, #16
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	70fb      	strb	r3, [r7, #3]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70bb      	strb	r3, [r7, #2]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dda:	787c      	ldrb	r4, [r7, #1]
 8008ddc:	78ba      	ldrb	r2, [r7, #2]
 8008dde:	78f9      	ldrb	r1, [r7, #3]
 8008de0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008de8:	9302      	str	r3, [sp, #8]
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	4623      	mov	r3, r4
 8008df6:	f7f9 fab7 	bl	8002368 <HAL_HCD_HC_SubmitRequest>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f86f 	bl	8008ee4 <USBH_Get_USB_Status>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd90      	pop	{r4, r7, pc}

08008e14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f9 fd98 	bl	8002960 <HAL_HCD_HC_GetURBState>
 8008e30:	4603      	mov	r3, r0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d103      	bne.n	8008e58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f872 	bl	8008f3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e58:	20c8      	movs	r0, #200	; 0xc8
 8008e5a:	f7f8 fe57 	bl	8001b0c <HAL_Delay>
  return USBH_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
 8008e74:	4613      	mov	r3, r2
 8008e76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e80:	78fa      	ldrb	r2, [r7, #3]
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	4613      	mov	r3, r2
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	3317      	adds	r3, #23
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e96:	78fa      	ldrb	r2, [r7, #3]
 8008e98:	68f9      	ldr	r1, [r7, #12]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	440b      	add	r3, r1
 8008ea4:	333c      	adds	r3, #60	; 0x3c
 8008ea6:	78ba      	ldrb	r2, [r7, #2]
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e009      	b.n	8008ec0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	333d      	adds	r3, #61	; 0x3d
 8008ebc:	78ba      	ldrb	r2, [r7, #2]
 8008ebe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7f8 fe18 	bl	8001b0c <HAL_Delay>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d817      	bhi.n	8008f28 <USBH_Get_USB_Status+0x44>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBH_Get_USB_Status+0x1c>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f17 	.word	0x08008f17
 8008f08:	08008f1d 	.word	0x08008f1d
 8008f0c:	08008f23 	.word	0x08008f23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e00b      	b.n	8008f2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f16:	2302      	movs	r3, #2
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	e008      	b.n	8008f2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e005      	b.n	8008f2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e002      	b.n	8008f2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	bf00      	nop
  }
  return usb_status;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
 8008f54:	e001      	b.n	8008f5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f56:	2301      	movs	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2101      	movs	r1, #1
 8008f60:	4803      	ldr	r0, [pc, #12]	; (8008f70 <MX_DriverVbusFS+0x34>)
 8008f62:	f7f9 f8a5 	bl	80020b0 <HAL_GPIO_WritePin>
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40020800 	.word	0x40020800

08008f74 <malloc>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <malloc+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f000 b82b 	b.w	8008fd4 <_malloc_r>
 8008f7e:	bf00      	nop
 8008f80:	200000a4 	.word	0x200000a4

08008f84 <free>:
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <free+0xc>)
 8008f86:	4601      	mov	r1, r0
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f000 b8f3 	b.w	8009174 <_free_r>
 8008f8e:	bf00      	nop
 8008f90:	200000a4 	.word	0x200000a4

08008f94 <sbrk_aligned>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4e0e      	ldr	r6, [pc, #56]	; (8008fd0 <sbrk_aligned+0x3c>)
 8008f98:	460c      	mov	r4, r1
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	b911      	cbnz	r1, 8008fa6 <sbrk_aligned+0x12>
 8008fa0:	f000 f8ac 	bl	80090fc <_sbrk_r>
 8008fa4:	6030      	str	r0, [r6, #0]
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 f8a7 	bl	80090fc <_sbrk_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d00a      	beq.n	8008fc8 <sbrk_aligned+0x34>
 8008fb2:	1cc4      	adds	r4, r0, #3
 8008fb4:	f024 0403 	bic.w	r4, r4, #3
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d007      	beq.n	8008fcc <sbrk_aligned+0x38>
 8008fbc:	1a21      	subs	r1, r4, r0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 f89c 	bl	80090fc <_sbrk_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d101      	bne.n	8008fcc <sbrk_aligned+0x38>
 8008fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fcc:	4620      	mov	r0, r4
 8008fce:	bd70      	pop	{r4, r5, r6, pc}
 8008fd0:	200009c0 	.word	0x200009c0

08008fd4 <_malloc_r>:
 8008fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd8:	1ccd      	adds	r5, r1, #3
 8008fda:	f025 0503 	bic.w	r5, r5, #3
 8008fde:	3508      	adds	r5, #8
 8008fe0:	2d0c      	cmp	r5, #12
 8008fe2:	bf38      	it	cc
 8008fe4:	250c      	movcc	r5, #12
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	4607      	mov	r7, r0
 8008fea:	db01      	blt.n	8008ff0 <_malloc_r+0x1c>
 8008fec:	42a9      	cmp	r1, r5
 8008fee:	d905      	bls.n	8008ffc <_malloc_r+0x28>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090d0 <_malloc_r+0xfc>
 8009000:	f000 f868 	bl	80090d4 <__malloc_lock>
 8009004:	f8d8 3000 	ldr.w	r3, [r8]
 8009008:	461c      	mov	r4, r3
 800900a:	bb5c      	cbnz	r4, 8009064 <_malloc_r+0x90>
 800900c:	4629      	mov	r1, r5
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff ffc0 	bl	8008f94 <sbrk_aligned>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	4604      	mov	r4, r0
 8009018:	d155      	bne.n	80090c6 <_malloc_r+0xf2>
 800901a:	f8d8 4000 	ldr.w	r4, [r8]
 800901e:	4626      	mov	r6, r4
 8009020:	2e00      	cmp	r6, #0
 8009022:	d145      	bne.n	80090b0 <_malloc_r+0xdc>
 8009024:	2c00      	cmp	r4, #0
 8009026:	d048      	beq.n	80090ba <_malloc_r+0xe6>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	4631      	mov	r1, r6
 800902c:	4638      	mov	r0, r7
 800902e:	eb04 0903 	add.w	r9, r4, r3
 8009032:	f000 f863 	bl	80090fc <_sbrk_r>
 8009036:	4581      	cmp	r9, r0
 8009038:	d13f      	bne.n	80090ba <_malloc_r+0xe6>
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	1a6d      	subs	r5, r5, r1
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa7 	bl	8008f94 <sbrk_aligned>
 8009046:	3001      	adds	r0, #1
 8009048:	d037      	beq.n	80090ba <_malloc_r+0xe6>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	442b      	add	r3, r5
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	f8d8 3000 	ldr.w	r3, [r8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d038      	beq.n	80090ca <_malloc_r+0xf6>
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	42a2      	cmp	r2, r4
 800905c:	d12b      	bne.n	80090b6 <_malloc_r+0xe2>
 800905e:	2200      	movs	r2, #0
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e00f      	b.n	8009084 <_malloc_r+0xb0>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	1b52      	subs	r2, r2, r5
 8009068:	d41f      	bmi.n	80090aa <_malloc_r+0xd6>
 800906a:	2a0b      	cmp	r2, #11
 800906c:	d917      	bls.n	800909e <_malloc_r+0xca>
 800906e:	1961      	adds	r1, r4, r5
 8009070:	42a3      	cmp	r3, r4
 8009072:	6025      	str	r5, [r4, #0]
 8009074:	bf18      	it	ne
 8009076:	6059      	strne	r1, [r3, #4]
 8009078:	6863      	ldr	r3, [r4, #4]
 800907a:	bf08      	it	eq
 800907c:	f8c8 1000 	streq.w	r1, [r8]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f000 f829 	bl	80090e0 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0ae      	beq.n	8008ff6 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7ab      	b.n	8008ff6 <_malloc_r+0x22>
 800909e:	42a3      	cmp	r3, r4
 80090a0:	6862      	ldr	r2, [r4, #4]
 80090a2:	d1dd      	bne.n	8009060 <_malloc_r+0x8c>
 80090a4:	f8c8 2000 	str.w	r2, [r8]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xb0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7ac      	b.n	800900a <_malloc_r+0x36>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b4      	b.n	8009020 <_malloc_r+0x4c>
 80090b6:	4613      	mov	r3, r2
 80090b8:	e7cc      	b.n	8009054 <_malloc_r+0x80>
 80090ba:	230c      	movs	r3, #12
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4638      	mov	r0, r7
 80090c0:	f000 f80e 	bl	80090e0 <__malloc_unlock>
 80090c4:	e797      	b.n	8008ff6 <_malloc_r+0x22>
 80090c6:	6025      	str	r5, [r4, #0]
 80090c8:	e7dc      	b.n	8009084 <_malloc_r+0xb0>
 80090ca:	605b      	str	r3, [r3, #4]
 80090cc:	deff      	udf	#255	; 0xff
 80090ce:	bf00      	nop
 80090d0:	200009bc 	.word	0x200009bc

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__malloc_lock+0x8>)
 80090d6:	f000 b84b 	b.w	8009170 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	20000b00 	.word	0x20000b00

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f000 b846 	b.w	8009172 <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	20000b00 	.word	0x20000b00

080090ec <memset>:
 80090ec:	4402      	add	r2, r0
 80090ee:	4603      	mov	r3, r0
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d100      	bne.n	80090f6 <memset+0xa>
 80090f4:	4770      	bx	lr
 80090f6:	f803 1b01 	strb.w	r1, [r3], #1
 80090fa:	e7f9      	b.n	80090f0 <memset+0x4>

080090fc <_sbrk_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d06      	ldr	r5, [pc, #24]	; (8009118 <_sbrk_r+0x1c>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f8 fc1c 	bl	8001944 <_sbrk>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_sbrk_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_sbrk_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20000afc 	.word	0x20000afc

0800911c <__errno>:
 800911c:	4b01      	ldr	r3, [pc, #4]	; (8009124 <__errno+0x8>)
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	200000a4 	.word	0x200000a4

08009128 <__libc_init_array>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	4d0d      	ldr	r5, [pc, #52]	; (8009160 <__libc_init_array+0x38>)
 800912c:	4c0d      	ldr	r4, [pc, #52]	; (8009164 <__libc_init_array+0x3c>)
 800912e:	1b64      	subs	r4, r4, r5
 8009130:	10a4      	asrs	r4, r4, #2
 8009132:	2600      	movs	r6, #0
 8009134:	42a6      	cmp	r6, r4
 8009136:	d109      	bne.n	800914c <__libc_init_array+0x24>
 8009138:	4d0b      	ldr	r5, [pc, #44]	; (8009168 <__libc_init_array+0x40>)
 800913a:	4c0c      	ldr	r4, [pc, #48]	; (800916c <__libc_init_array+0x44>)
 800913c:	f000 fb38 	bl	80097b0 <_init>
 8009140:	1b64      	subs	r4, r4, r5
 8009142:	10a4      	asrs	r4, r4, #2
 8009144:	2600      	movs	r6, #0
 8009146:	42a6      	cmp	r6, r4
 8009148:	d105      	bne.n	8009156 <__libc_init_array+0x2e>
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009150:	4798      	blx	r3
 8009152:	3601      	adds	r6, #1
 8009154:	e7ee      	b.n	8009134 <__libc_init_array+0xc>
 8009156:	f855 3b04 	ldr.w	r3, [r5], #4
 800915a:	4798      	blx	r3
 800915c:	3601      	adds	r6, #1
 800915e:	e7f2      	b.n	8009146 <__libc_init_array+0x1e>
 8009160:	080098a8 	.word	0x080098a8
 8009164:	080098a8 	.word	0x080098a8
 8009168:	080098a8 	.word	0x080098a8
 800916c:	080098ac 	.word	0x080098ac

08009170 <__retarget_lock_acquire_recursive>:
 8009170:	4770      	bx	lr

08009172 <__retarget_lock_release_recursive>:
 8009172:	4770      	bx	lr

08009174 <_free_r>:
 8009174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009176:	2900      	cmp	r1, #0
 8009178:	d044      	beq.n	8009204 <_free_r+0x90>
 800917a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917e:	9001      	str	r0, [sp, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f1a1 0404 	sub.w	r4, r1, #4
 8009186:	bfb8      	it	lt
 8009188:	18e4      	addlt	r4, r4, r3
 800918a:	f7ff ffa3 	bl	80090d4 <__malloc_lock>
 800918e:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <_free_r+0x94>)
 8009190:	9801      	ldr	r0, [sp, #4]
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	b933      	cbnz	r3, 80091a4 <_free_r+0x30>
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6014      	str	r4, [r2, #0]
 800919a:	b003      	add	sp, #12
 800919c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091a0:	f7ff bf9e 	b.w	80090e0 <__malloc_unlock>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x46>
 80091a8:	6825      	ldr	r5, [r4, #0]
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf01      	itttt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	1949      	addeq	r1, r1, r5
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	e7ed      	b.n	8009196 <_free_r+0x22>
 80091ba:	461a      	mov	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	b10b      	cbz	r3, 80091c4 <_free_r+0x50>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x46>
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	1855      	adds	r5, r2, r1
 80091c8:	42a5      	cmp	r5, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x70>
 80091cc:	6824      	ldr	r4, [r4, #0]
 80091ce:	4421      	add	r1, r4
 80091d0:	1854      	adds	r4, r2, r1
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	d1e0      	bne.n	800919a <_free_r+0x26>
 80091d8:	681c      	ldr	r4, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6053      	str	r3, [r2, #4]
 80091de:	440c      	add	r4, r1
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	e7da      	b.n	800919a <_free_r+0x26>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x78>
 80091e6:	230c      	movs	r3, #12
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	e7d6      	b.n	800919a <_free_r+0x26>
 80091ec:	6825      	ldr	r5, [r4, #0]
 80091ee:	1961      	adds	r1, r4, r5
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1949      	addeq	r1, r1, r5
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7ca      	b.n	800919a <_free_r+0x26>
 8009204:	b003      	add	sp, #12
 8009206:	bd30      	pop	{r4, r5, pc}
 8009208:	200009bc 	.word	0x200009bc

0800920c <atan2f>:
 800920c:	f000 b864 	b.w	80092d8 <__ieee754_atan2f>

08009210 <expf>:
 8009210:	b508      	push	{r3, lr}
 8009212:	ed2d 8b02 	vpush	{d8}
 8009216:	eef0 8a40 	vmov.f32	s17, s0
 800921a:	f000 f8fd 	bl	8009418 <__ieee754_expf>
 800921e:	eeb0 8a40 	vmov.f32	s16, s0
 8009222:	eeb0 0a68 	vmov.f32	s0, s17
 8009226:	f000 f847 	bl	80092b8 <finitef>
 800922a:	b160      	cbz	r0, 8009246 <expf+0x36>
 800922c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800926c <expf+0x5c>
 8009230:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009238:	dd0a      	ble.n	8009250 <expf+0x40>
 800923a:	f7ff ff6f 	bl	800911c <__errno>
 800923e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009270 <expf+0x60>
 8009242:	2322      	movs	r3, #34	; 0x22
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	eeb0 0a48 	vmov.f32	s0, s16
 800924a:	ecbd 8b02 	vpop	{d8}
 800924e:	bd08      	pop	{r3, pc}
 8009250:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009274 <expf+0x64>
 8009254:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	d5f3      	bpl.n	8009246 <expf+0x36>
 800925e:	f7ff ff5d 	bl	800911c <__errno>
 8009262:	2322      	movs	r3, #34	; 0x22
 8009264:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009278 <expf+0x68>
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	e7ec      	b.n	8009246 <expf+0x36>
 800926c:	42b17217 	.word	0x42b17217
 8009270:	7f800000 	.word	0x7f800000
 8009274:	c2cff1b5 	.word	0xc2cff1b5
 8009278:	00000000 	.word	0x00000000

0800927c <sqrtf>:
 800927c:	b508      	push	{r3, lr}
 800927e:	ed2d 8b02 	vpush	{d8}
 8009282:	eeb0 8a40 	vmov.f32	s16, s0
 8009286:	f000 f824 	bl	80092d2 <__ieee754_sqrtf>
 800928a:	eeb4 8a48 	vcmp.f32	s16, s16
 800928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009292:	d60c      	bvs.n	80092ae <sqrtf+0x32>
 8009294:	eddf 8a07 	vldr	s17, [pc, #28]	; 80092b4 <sqrtf+0x38>
 8009298:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a0:	d505      	bpl.n	80092ae <sqrtf+0x32>
 80092a2:	f7ff ff3b 	bl	800911c <__errno>
 80092a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80092aa:	2321      	movs	r3, #33	; 0x21
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	ecbd 8b02 	vpop	{d8}
 80092b2:	bd08      	pop	{r3, pc}
 80092b4:	00000000 	.word	0x00000000

080092b8 <finitef>:
 80092b8:	b082      	sub	sp, #8
 80092ba:	ed8d 0a01 	vstr	s0, [sp, #4]
 80092be:	9801      	ldr	r0, [sp, #4]
 80092c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80092c4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80092c8:	bfac      	ite	ge
 80092ca:	2000      	movge	r0, #0
 80092cc:	2001      	movlt	r0, #1
 80092ce:	b002      	add	sp, #8
 80092d0:	4770      	bx	lr

080092d2 <__ieee754_sqrtf>:
 80092d2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80092d6:	4770      	bx	lr

080092d8 <__ieee754_atan2f>:
 80092d8:	ee10 2a90 	vmov	r2, s1
 80092dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80092e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80092e4:	b510      	push	{r4, lr}
 80092e6:	eef0 7a40 	vmov.f32	s15, s0
 80092ea:	dc06      	bgt.n	80092fa <__ieee754_atan2f+0x22>
 80092ec:	ee10 0a10 	vmov	r0, s0
 80092f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80092f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80092f8:	dd04      	ble.n	8009304 <__ieee754_atan2f+0x2c>
 80092fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80092fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009302:	bd10      	pop	{r4, pc}
 8009304:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009308:	d103      	bne.n	8009312 <__ieee754_atan2f+0x3a>
 800930a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800930e:	f000 b951 	b.w	80095b4 <atanf>
 8009312:	1794      	asrs	r4, r2, #30
 8009314:	f004 0402 	and.w	r4, r4, #2
 8009318:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800931c:	b943      	cbnz	r3, 8009330 <__ieee754_atan2f+0x58>
 800931e:	2c02      	cmp	r4, #2
 8009320:	d05e      	beq.n	80093e0 <__ieee754_atan2f+0x108>
 8009322:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80093f4 <__ieee754_atan2f+0x11c>
 8009326:	2c03      	cmp	r4, #3
 8009328:	bf08      	it	eq
 800932a:	eef0 7a47 	vmoveq.f32	s15, s14
 800932e:	e7e6      	b.n	80092fe <__ieee754_atan2f+0x26>
 8009330:	b941      	cbnz	r1, 8009344 <__ieee754_atan2f+0x6c>
 8009332:	eddf 7a31 	vldr	s15, [pc, #196]	; 80093f8 <__ieee754_atan2f+0x120>
 8009336:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80093fc <__ieee754_atan2f+0x124>
 800933a:	2800      	cmp	r0, #0
 800933c:	bfb8      	it	lt
 800933e:	eef0 7a47 	vmovlt.f32	s15, s14
 8009342:	e7dc      	b.n	80092fe <__ieee754_atan2f+0x26>
 8009344:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009348:	d110      	bne.n	800936c <__ieee754_atan2f+0x94>
 800934a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800934e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009352:	d107      	bne.n	8009364 <__ieee754_atan2f+0x8c>
 8009354:	2c02      	cmp	r4, #2
 8009356:	d846      	bhi.n	80093e6 <__ieee754_atan2f+0x10e>
 8009358:	4b29      	ldr	r3, [pc, #164]	; (8009400 <__ieee754_atan2f+0x128>)
 800935a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800935e:	edd3 7a00 	vldr	s15, [r3]
 8009362:	e7cc      	b.n	80092fe <__ieee754_atan2f+0x26>
 8009364:	2c02      	cmp	r4, #2
 8009366:	d841      	bhi.n	80093ec <__ieee754_atan2f+0x114>
 8009368:	4b26      	ldr	r3, [pc, #152]	; (8009404 <__ieee754_atan2f+0x12c>)
 800936a:	e7f6      	b.n	800935a <__ieee754_atan2f+0x82>
 800936c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009370:	d0df      	beq.n	8009332 <__ieee754_atan2f+0x5a>
 8009372:	1a5b      	subs	r3, r3, r1
 8009374:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009378:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800937c:	da1a      	bge.n	80093b4 <__ieee754_atan2f+0xdc>
 800937e:	2a00      	cmp	r2, #0
 8009380:	da01      	bge.n	8009386 <__ieee754_atan2f+0xae>
 8009382:	313c      	adds	r1, #60	; 0x3c
 8009384:	db19      	blt.n	80093ba <__ieee754_atan2f+0xe2>
 8009386:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800938a:	f000 f9e7 	bl	800975c <fabsf>
 800938e:	f000 f911 	bl	80095b4 <atanf>
 8009392:	eef0 7a40 	vmov.f32	s15, s0
 8009396:	2c01      	cmp	r4, #1
 8009398:	d012      	beq.n	80093c0 <__ieee754_atan2f+0xe8>
 800939a:	2c02      	cmp	r4, #2
 800939c:	d017      	beq.n	80093ce <__ieee754_atan2f+0xf6>
 800939e:	2c00      	cmp	r4, #0
 80093a0:	d0ad      	beq.n	80092fe <__ieee754_atan2f+0x26>
 80093a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009408 <__ieee754_atan2f+0x130>
 80093a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093aa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800940c <__ieee754_atan2f+0x134>
 80093ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093b2:	e7a4      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80093f8 <__ieee754_atan2f+0x120>
 80093b8:	e7ed      	b.n	8009396 <__ieee754_atan2f+0xbe>
 80093ba:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009410 <__ieee754_atan2f+0x138>
 80093be:	e7ea      	b.n	8009396 <__ieee754_atan2f+0xbe>
 80093c0:	ee17 3a90 	vmov	r3, s15
 80093c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	e797      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009408 <__ieee754_atan2f+0x130>
 80093d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800940c <__ieee754_atan2f+0x134>
 80093da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093de:	e78e      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093e0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800940c <__ieee754_atan2f+0x134>
 80093e4:	e78b      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009414 <__ieee754_atan2f+0x13c>
 80093ea:	e788      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009410 <__ieee754_atan2f+0x138>
 80093f0:	e785      	b.n	80092fe <__ieee754_atan2f+0x26>
 80093f2:	bf00      	nop
 80093f4:	c0490fdb 	.word	0xc0490fdb
 80093f8:	3fc90fdb 	.word	0x3fc90fdb
 80093fc:	bfc90fdb 	.word	0xbfc90fdb
 8009400:	08009850 	.word	0x08009850
 8009404:	0800985c 	.word	0x0800985c
 8009408:	33bbbd2e 	.word	0x33bbbd2e
 800940c:	40490fdb 	.word	0x40490fdb
 8009410:	00000000 	.word	0x00000000
 8009414:	3f490fdb 	.word	0x3f490fdb

08009418 <__ieee754_expf>:
 8009418:	ee10 2a10 	vmov	r2, s0
 800941c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009420:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009424:	d902      	bls.n	800942c <__ieee754_expf+0x14>
 8009426:	ee30 0a00 	vadd.f32	s0, s0, s0
 800942a:	4770      	bx	lr
 800942c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009430:	d106      	bne.n	8009440 <__ieee754_expf+0x28>
 8009432:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800956c <__ieee754_expf+0x154>
 8009436:	2900      	cmp	r1, #0
 8009438:	bf18      	it	ne
 800943a:	eeb0 0a67 	vmovne.f32	s0, s15
 800943e:	4770      	bx	lr
 8009440:	484b      	ldr	r0, [pc, #300]	; (8009570 <__ieee754_expf+0x158>)
 8009442:	4282      	cmp	r2, r0
 8009444:	dd02      	ble.n	800944c <__ieee754_expf+0x34>
 8009446:	2000      	movs	r0, #0
 8009448:	f000 b9ac 	b.w	80097a4 <__math_oflowf>
 800944c:	2a00      	cmp	r2, #0
 800944e:	da05      	bge.n	800945c <__ieee754_expf+0x44>
 8009450:	4a48      	ldr	r2, [pc, #288]	; (8009574 <__ieee754_expf+0x15c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d902      	bls.n	800945c <__ieee754_expf+0x44>
 8009456:	2000      	movs	r0, #0
 8009458:	f000 b99e 	b.w	8009798 <__math_uflowf>
 800945c:	4a46      	ldr	r2, [pc, #280]	; (8009578 <__ieee754_expf+0x160>)
 800945e:	4293      	cmp	r3, r2
 8009460:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009464:	d952      	bls.n	800950c <__ieee754_expf+0xf4>
 8009466:	4a45      	ldr	r2, [pc, #276]	; (800957c <__ieee754_expf+0x164>)
 8009468:	4293      	cmp	r3, r2
 800946a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800946e:	d834      	bhi.n	80094da <__ieee754_expf+0xc2>
 8009470:	4b43      	ldr	r3, [pc, #268]	; (8009580 <__ieee754_expf+0x168>)
 8009472:	4413      	add	r3, r2
 8009474:	ed93 7a00 	vldr	s14, [r3]
 8009478:	4b42      	ldr	r3, [pc, #264]	; (8009584 <__ieee754_expf+0x16c>)
 800947a:	4413      	add	r3, r2
 800947c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009480:	f1c1 0201 	rsb	r2, r1, #1
 8009484:	edd3 7a00 	vldr	s15, [r3]
 8009488:	1a52      	subs	r2, r2, r1
 800948a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800948e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009492:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009588 <__ieee754_expf+0x170>
 8009496:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800958c <__ieee754_expf+0x174>
 800949a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800949e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009590 <__ieee754_expf+0x178>
 80094a2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80094a6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009594 <__ieee754_expf+0x17c>
 80094aa:	eee5 6a06 	vfma.f32	s13, s10, s12
 80094ae:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009598 <__ieee754_expf+0x180>
 80094b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80094b6:	eef0 6a40 	vmov.f32	s13, s0
 80094ba:	eee5 6a46 	vfms.f32	s13, s10, s12
 80094be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80094c2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80094c6:	bb92      	cbnz	r2, 800952e <__ieee754_expf+0x116>
 80094c8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80094cc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80094d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80094d4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80094d8:	4770      	bx	lr
 80094da:	4b30      	ldr	r3, [pc, #192]	; (800959c <__ieee754_expf+0x184>)
 80094dc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80095a0 <__ieee754_expf+0x188>
 80094e0:	eddf 6a30 	vldr	s13, [pc, #192]	; 80095a4 <__ieee754_expf+0x18c>
 80094e4:	4413      	add	r3, r2
 80094e6:	edd3 7a00 	vldr	s15, [r3]
 80094ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 80094ee:	eeb0 7a40 	vmov.f32	s14, s0
 80094f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094f6:	ee17 2a90 	vmov	r2, s15
 80094fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094fe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009502:	eddf 6a29 	vldr	s13, [pc, #164]	; 80095a8 <__ieee754_expf+0x190>
 8009506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800950a:	e7be      	b.n	800948a <__ieee754_expf+0x72>
 800950c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009510:	d20b      	bcs.n	800952a <__ieee754_expf+0x112>
 8009512:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095ac <__ieee754_expf+0x194>
 8009516:	ee70 6a26 	vadd.f32	s13, s0, s13
 800951a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	dd02      	ble.n	800952a <__ieee754_expf+0x112>
 8009524:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009528:	4770      	bx	lr
 800952a:	2200      	movs	r2, #0
 800952c:	e7af      	b.n	800948e <__ieee754_expf+0x76>
 800952e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009532:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009536:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800953a:	bfb8      	it	lt
 800953c:	3264      	addlt	r2, #100	; 0x64
 800953e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009546:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800954a:	ee17 3a90 	vmov	r3, s15
 800954e:	bfab      	itete	ge
 8009550:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009554:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009558:	ee00 3a10 	vmovge	s0, r3
 800955c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80095b0 <__ieee754_expf+0x198>
 8009560:	bfbc      	itt	lt
 8009562:	ee00 3a10 	vmovlt	s0, r3
 8009566:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800956a:	4770      	bx	lr
 800956c:	00000000 	.word	0x00000000
 8009570:	42b17217 	.word	0x42b17217
 8009574:	42cff1b5 	.word	0x42cff1b5
 8009578:	3eb17218 	.word	0x3eb17218
 800957c:	3f851591 	.word	0x3f851591
 8009580:	08009870 	.word	0x08009870
 8009584:	08009878 	.word	0x08009878
 8009588:	3331bb4c 	.word	0x3331bb4c
 800958c:	b5ddea0e 	.word	0xb5ddea0e
 8009590:	388ab355 	.word	0x388ab355
 8009594:	bb360b61 	.word	0xbb360b61
 8009598:	3e2aaaab 	.word	0x3e2aaaab
 800959c:	08009868 	.word	0x08009868
 80095a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80095a4:	3f317180 	.word	0x3f317180
 80095a8:	3717f7d1 	.word	0x3717f7d1
 80095ac:	7149f2ca 	.word	0x7149f2ca
 80095b0:	0d800000 	.word	0x0d800000

080095b4 <atanf>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	ee10 5a10 	vmov	r5, s0
 80095ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80095be:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80095c2:	eef0 7a40 	vmov.f32	s15, s0
 80095c6:	db10      	blt.n	80095ea <atanf+0x36>
 80095c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80095cc:	dd04      	ble.n	80095d8 <atanf+0x24>
 80095ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 80095d2:	eeb0 0a67 	vmov.f32	s0, s15
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009710 <atanf+0x15c>
 80095dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009714 <atanf+0x160>
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	bfd8      	it	le
 80095e4:	eef0 7a47 	vmovle.f32	s15, s14
 80095e8:	e7f3      	b.n	80095d2 <atanf+0x1e>
 80095ea:	4b4b      	ldr	r3, [pc, #300]	; (8009718 <atanf+0x164>)
 80095ec:	429c      	cmp	r4, r3
 80095ee:	dc10      	bgt.n	8009612 <atanf+0x5e>
 80095f0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80095f4:	da0a      	bge.n	800960c <atanf+0x58>
 80095f6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800971c <atanf+0x168>
 80095fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009602:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960a:	dce2      	bgt.n	80095d2 <atanf+0x1e>
 800960c:	f04f 33ff 	mov.w	r3, #4294967295
 8009610:	e013      	b.n	800963a <atanf+0x86>
 8009612:	f000 f8a3 	bl	800975c <fabsf>
 8009616:	4b42      	ldr	r3, [pc, #264]	; (8009720 <atanf+0x16c>)
 8009618:	429c      	cmp	r4, r3
 800961a:	dc4f      	bgt.n	80096bc <atanf+0x108>
 800961c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009620:	429c      	cmp	r4, r3
 8009622:	dc41      	bgt.n	80096a8 <atanf+0xf4>
 8009624:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009628:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800962c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009630:	2300      	movs	r3, #0
 8009632:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009636:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009640:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009724 <atanf+0x170>
 8009644:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009728 <atanf+0x174>
 8009648:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800972c <atanf+0x178>
 800964c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009650:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009654:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009730 <atanf+0x17c>
 8009658:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800965c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009734 <atanf+0x180>
 8009660:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009664:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009738 <atanf+0x184>
 8009668:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800966c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800973c <atanf+0x188>
 8009670:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009674:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009740 <atanf+0x18c>
 8009678:	eea6 5a87 	vfma.f32	s10, s13, s14
 800967c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009744 <atanf+0x190>
 8009680:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009684:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009748 <atanf+0x194>
 8009688:	eea7 5a26 	vfma.f32	s10, s14, s13
 800968c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800974c <atanf+0x198>
 8009690:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009694:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009698:	eea5 7a86 	vfma.f32	s14, s11, s12
 800969c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80096a0:	d121      	bne.n	80096e6 <atanf+0x132>
 80096a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096a6:	e794      	b.n	80095d2 <atanf+0x1e>
 80096a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80096b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096b4:	2301      	movs	r3, #1
 80096b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096ba:	e7be      	b.n	800963a <atanf+0x86>
 80096bc:	4b24      	ldr	r3, [pc, #144]	; (8009750 <atanf+0x19c>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	dc0b      	bgt.n	80096da <atanf+0x126>
 80096c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80096c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096ce:	2302      	movs	r3, #2
 80096d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80096d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d8:	e7af      	b.n	800963a <atanf+0x86>
 80096da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80096de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096e2:	2303      	movs	r3, #3
 80096e4:	e7a9      	b.n	800963a <atanf+0x86>
 80096e6:	4a1b      	ldr	r2, [pc, #108]	; (8009754 <atanf+0x1a0>)
 80096e8:	491b      	ldr	r1, [pc, #108]	; (8009758 <atanf+0x1a4>)
 80096ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80096ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80096f2:	edd3 6a00 	vldr	s13, [r3]
 80096f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80096fa:	2d00      	cmp	r5, #0
 80096fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009700:	edd2 7a00 	vldr	s15, [r2]
 8009704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009708:	bfb8      	it	lt
 800970a:	eef1 7a67 	vneglt.f32	s15, s15
 800970e:	e760      	b.n	80095d2 <atanf+0x1e>
 8009710:	3fc90fdb 	.word	0x3fc90fdb
 8009714:	bfc90fdb 	.word	0xbfc90fdb
 8009718:	3edfffff 	.word	0x3edfffff
 800971c:	7149f2ca 	.word	0x7149f2ca
 8009720:	3f97ffff 	.word	0x3f97ffff
 8009724:	3c8569d7 	.word	0x3c8569d7
 8009728:	3d4bda59 	.word	0x3d4bda59
 800972c:	bd6ef16b 	.word	0xbd6ef16b
 8009730:	3d886b35 	.word	0x3d886b35
 8009734:	3dba2e6e 	.word	0x3dba2e6e
 8009738:	3e124925 	.word	0x3e124925
 800973c:	3eaaaaab 	.word	0x3eaaaaab
 8009740:	bd15a221 	.word	0xbd15a221
 8009744:	bd9d8795 	.word	0xbd9d8795
 8009748:	bde38e38 	.word	0xbde38e38
 800974c:	be4ccccd 	.word	0xbe4ccccd
 8009750:	401bffff 	.word	0x401bffff
 8009754:	08009880 	.word	0x08009880
 8009758:	08009890 	.word	0x08009890

0800975c <fabsf>:
 800975c:	ee10 3a10 	vmov	r3, s0
 8009760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009764:	ee00 3a10 	vmov	s0, r3
 8009768:	4770      	bx	lr

0800976a <with_errnof>:
 800976a:	b513      	push	{r0, r1, r4, lr}
 800976c:	4604      	mov	r4, r0
 800976e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009772:	f7ff fcd3 	bl	800911c <__errno>
 8009776:	ed9d 0a01 	vldr	s0, [sp, #4]
 800977a:	6004      	str	r4, [r0, #0]
 800977c:	b002      	add	sp, #8
 800977e:	bd10      	pop	{r4, pc}

08009780 <xflowf>:
 8009780:	b130      	cbz	r0, 8009790 <xflowf+0x10>
 8009782:	eef1 7a40 	vneg.f32	s15, s0
 8009786:	ee27 0a80 	vmul.f32	s0, s15, s0
 800978a:	2022      	movs	r0, #34	; 0x22
 800978c:	f7ff bfed 	b.w	800976a <with_errnof>
 8009790:	eef0 7a40 	vmov.f32	s15, s0
 8009794:	e7f7      	b.n	8009786 <xflowf+0x6>
	...

08009798 <__math_uflowf>:
 8009798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80097a0 <__math_uflowf+0x8>
 800979c:	f7ff bff0 	b.w	8009780 <xflowf>
 80097a0:	10000000 	.word	0x10000000

080097a4 <__math_oflowf>:
 80097a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80097ac <__math_oflowf+0x8>
 80097a8:	f7ff bfea 	b.w	8009780 <xflowf>
 80097ac:	70000000 	.word	0x70000000

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
